// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"node_modules/object-assign/index.js":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
'use strict';
/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};
},{}],"node_modules/prop-types/lib/ReactPropTypesSecret.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],"node_modules/prop-types/checkPropTypes.js":[function(require,module,exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

var printWarning = function () {};

if ("development" !== 'production') {
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

  var loggedTypeFailures = {};

  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */


function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if ("development" !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }

        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }

        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}

module.exports = checkPropTypes;
},{"./lib/ReactPropTypesSecret":"node_modules/prop-types/lib/ReactPropTypesSecret.js"}],"node_modules/react/cjs/react.development.js":[function(require,module,exports) {
/** @license React v16.5.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    var _assign = require('object-assign');

    var checkPropTypes = require('prop-types/checkPropTypes'); // TODO: this is special because it gets imported during build.


    var ReactVersion = '16.5.2'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_PLACEHOLDER_TYPE = hasSymbol ? Symbol.for('react.placeholder') : 0xead1;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    } // Exports ReactDOM.createRoot
    // Experimental error-boundary API that can recover from errors within a single
    // render phase
    // Suspense


    var enableSuspense = false; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Warn about legacy context API
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;

        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame

        throw error;
      }
    } // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }

        if (condition) {
          return;
        }

        if (typeof console !== 'undefined') {
          var _args$map = args.map(function (item) {
            return '' + item;
          }),
              a = _args$map[0],
              b = _args$map[1],
              c = _args$map[2],
              d = _args$map[3],
              e = _args$map[4],
              f = _args$map[5],
              g = _args$map[6],
              h = _args$map[7];

          var message = 'Warning: ' + format; // We intentionally don't use spread (or .apply) because it breaks IE9:
          // https://github.com/facebook/react/issues/13610

          switch (args.length) {
            case 0:
              console.error(message);
              break;

            case 1:
              console.error(message, a);
              break;

            case 2:
              console.error(message, a, b);
              break;

            case 3:
              console.error(message, a, b, c);
              break;

            case 4:
              console.error(message, a, b, c, d);
              break;

            case 5:
              console.error(message, a, b, c, d, e);
              break;

            case 6:
              console.error(message, a, b, c, d, e, f);
              break;

            case 7:
              console.error(message, a, b, c, d, e, f, g);
              break;

            case 8:
              console.error(message, a, b, c, d, e, f, g, h);
              break;

            default:
              throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
          }
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;

          var _message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          throw new Error(_message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;

        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }

        warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
     * This is the abstract API for an update queue.
     */


    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function (publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }
    /**
     * Base class helpers for the updating state of a component.
     */

    function Component(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */

    Component.prototype.setState = function (partialState, callback) {
      !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */


    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */


    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };

      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function () {
            lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };

      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    function ComponentDummy() {}

    ComponentDummy.prototype = Component.prototype;
    /**
     * Convenience component with default shallow equality check for sCU.
     */

    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }

    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

    _assign(pureComponentPrototype, Component.prototype);

    pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value

    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }
    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */


    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null,
      currentDispatcher: null
    };
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };

    var Resolved = 1;

    function refineResolvedThenable(thenable) {
      return thenable._reactStatus === Resolved ? thenable._reactResult : null;
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_ASYNC_MODE_TYPE:
          return 'AsyncMode';

        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_PLACEHOLDER_TYPE:
          return 'Placeholder';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            var renderFn = type.render;
            var functionName = renderFn.displayName || renderFn.name || '';
            return type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
        }

        if (typeof type.then === 'function') {
          var thenable = type;
          var resolvedThenable = refineResolvedThenable(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }
        }
      }

      return null;
    }

    var ReactDebugCurrentFrame = {};
    var currentlyValidatingElement = null;

    function setCurrentlyValidatingElement(element) {
      {
        currentlyValidatingElement = element;
      }
    }

    {
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = ''; // Add an extra top frame while an element is being validated

        if (currentlyValidatingElement) {
          var name = getComponentName(currentlyValidatingElement.type);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
        } // Delegate to the injected renderer-specific implementation


        var impl = ReactDebugCurrentFrame.getCurrentStack;

        if (impl) {
          stack += impl() || '';
        }

        return stack;
      };
    }
    var ReactSharedInternals = {
      ReactCurrentOwner: ReactCurrentOwner,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };
    {
      _assign(ReactSharedInternals, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {}
      });
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = warningWithoutStack$1;
    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }
    var warning$1 = warning;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */


    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });

        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */


    function createElement(type, config, children) {
      var propName = void 0; // Reserved names are extracted

      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      } // Resolve default props


      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;

        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }

      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }

          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */


    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */


    function cloneElement(element, config, children) {
      !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;
      var propName = void 0; // Original props are copied

      var props = _assign({}, element.props); // Reserved names are extracted


      var key = element.key;
      var ref = element.ref; // Self is preserved since the owner is preserved.

      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.

      var source = element._source; // Owner will be preserved, unless ref is overridden

      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        } // Remaining properties override existing props


        var defaultProps = void 0;

        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */


    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */

    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */


    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;

    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];

    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;

      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }
    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children;

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      var invokeCallback = false;

      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;

          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }

        }
      }

      if (invokeCallback) {
        callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child = void 0;
      var nextName = void 0;
      var subtreeCount = 0; // Count of children found in the current subtree.

      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
              didWarnAboutMaps = true;
            }
          }
          var iterator = iteratorFn.call(children);
          var step = void 0;
          var ii = 0;

          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';
          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
          }
          var childrenString = '' + children;
          invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
        }
      }

      return subtreeCount;
    }
    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }
    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */


    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof component === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      } // Implicit key determined by the index in the set


      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;
      func.call(context, child, bookKeeping.count++);
    }
    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */


    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }

      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;
      var mappedChild = func.call(context, child, bookKeeping.count++);

      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
          return c;
        });
      } else if (mappedChild != null) {
        if (isValidElement(mappedChild)) {
          mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }

        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';

      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }

      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }
    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */


    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }

      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */


    function countChildren(children) {
      return traverseAllChildren(children, function () {
        return null;
      }, null);
    }
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */


    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
        return child;
      });
      return result;
    }
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */


    function onlyChild(children) {
      !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
      return children;
    }

    function readContext(context, observedBits) {
      var dispatcher = ReactCurrentOwner.currentDispatcher;
      !(dispatcher !== null) ? invariant(false, 'Context.unstable_read(): Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.') : void 0;
      return dispatcher.readContext(context, observedBits);
    }

    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
        }
      }

      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // These are circular
        Provider: null,
        Consumer: null,
        unstable_read: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      context.Consumer = context;
      context.unstable_read = readContext.bind(null, context);
      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }
      return context;
    }

    function lazy(ctor) {
      var thenable = null;
      return {
        then: function (resolve, reject) {
          if (thenable === null) {
            // Lazily create thenable by wrapping in an extra thenable.
            thenable = ctor();
            ctor = null;
          }

          return thenable.then(resolve, reject);
        },
        // React uses these fields to store the result.
        _reactStatus: -1,
        _reactResult: null
      };
    }

    function forwardRef(render) {
      {
        if (typeof render !== 'function') {
          warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        } else {
          !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
          render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
        }

        if (render != null) {
          !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
        }
      }
      return {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
    }

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_ASYNC_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_PLACEHOLDER_TYPE || typeof type === 'object' && type !== null && (typeof type.then === 'function' || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }
    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */


    var propTypesMisspellWarningShown = void 0;
    {
      propTypesMisspellWarningShown = false;
    }

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);

        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }

      return '';
    }

    function getSourceInfoErrorAddendum(elementProps) {
      if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
        var source = elementProps.__source;
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }

      return '';
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */


    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

        if (parentName) {
          info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
      }

      return info;
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */


    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }

      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.

      var childOwner = '';

      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
      }

      setCurrentlyValidatingElement(element);
      {
        warning$1(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
      }
      setCurrentlyValidatingElement(null);
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */


    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }

      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];

          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);

        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step = void 0;

            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */


    function validatePropTypes(element) {
      var type = element.type;
      var name = void 0,
          propTypes = void 0;

      if (typeof type === 'function') {
        // Class or functional component
        name = type.displayName || type.name;
        propTypes = type.propTypes;
      } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
        // ForwardRef
        var functionName = type.render.displayName || type.render.name || '';
        name = type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
        propTypes = type.propTypes;
      } else {
        return;
      }

      if (propTypes) {
        setCurrentlyValidatingElement(element);
        checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
        setCurrentlyValidatingElement(null);
      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true;
        warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
      }

      if (typeof type.getDefaultProps === 'function') {
        !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */


    function validateFragmentProps(fragment) {
      setCurrentlyValidatingElement(fragment);
      var keys = Object.keys(fragment.props);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (key !== 'children' && key !== 'key') {
          warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
          break;
        }
      }

      if (fragment.ref !== null) {
        warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
      }

      setCurrentlyValidatingElement(null);
    }

    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.

      if (!validType) {
        var info = '';

        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);

        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        var typeString = void 0;

        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }

        warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
      }

      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.

      if (element == null) {
        return element;
      } // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)


      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }

    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type; // Legacy hook: remove it

      {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
      return validatedFactory;
    }

    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);

      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }

      validatePropTypes(newElement);
      return newElement;
    }

    var React = {
      Children: {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      },
      createRef: createRef,
      Component: Component,
      PureComponent: PureComponent,
      createContext: createContext,
      forwardRef: forwardRef,
      Fragment: REACT_FRAGMENT_TYPE,
      StrictMode: REACT_STRICT_MODE_TYPE,
      unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,
      unstable_Profiler: REACT_PROFILER_TYPE,
      createElement: createElementWithValidation,
      cloneElement: cloneElementWithValidation,
      createFactory: createFactoryWithValidation,
      isValidElement: isValidElement,
      version: ReactVersion,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    };

    if (enableSuspense) {
      React.Placeholder = REACT_PLACEHOLDER_TYPE;
      React.lazy = lazy;
    }

    var React$2 = Object.freeze({
      default: React
    });
    var React$3 = React$2 && React || React$2; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var react = React$3.default || React$3;
    module.exports = react;
  })();
}
},{"object-assign":"node_modules/object-assign/index.js","prop-types/checkPropTypes":"node_modules/prop-types/checkPropTypes.js"}],"node_modules/react/index.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/react.production.min.js');
} else {
  module.exports = require('./cjs/react.development.js');
}
},{"./cjs/react.development.js":"node_modules/react/cjs/react.development.js"}],"node_modules/schedule/cjs/schedule.development.js":[function(require,module,exports) {
/** @license React v16.5.2
 * schedule.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    /* eslint-disable no-var */
    // TODO: Currently there's only a single priority level, Deferred. Will add
    // additional priorities.

    var DEFERRED_TIMEOUT = 5000; // Callbacks are stored as a circular, doubly linked list.

    var firstCallbackNode = null;
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    var timeRemaining;

    if (hasNativePerformanceNow) {
      timeRemaining = function () {
        // We assume that if we have a performance timer that the rAF callback
        // gets a performance timer value. Not sure if this is always true.
        var remaining = getFrameDeadline() - performance.now();
        return remaining > 0 ? remaining : 0;
      };
    } else {
      timeRemaining = function () {
        // Fallback to Date.now()
        var remaining = getFrameDeadline() - Date.now();
        return remaining > 0 ? remaining : 0;
      };
    }

    var deadlineObject = {
      timeRemaining: timeRemaining,
      didTimeout: false
    };

    function ensureHostCallbackIsScheduled() {
      if (isPerformingWork) {
        // Don't schedule work yet; wait until the next time we yield.
        return;
      } // Schedule the host callback using the earliest timeout in the list.


      var timesOutAt = firstCallbackNode.timesOutAt;

      if (!isHostCallbackScheduled) {
        isHostCallbackScheduled = true;
      } else {
        // Cancel the existing host callback.
        cancelCallback();
      }

      requestCallback(flushWork, timesOutAt);
    }

    function flushFirstCallback(node) {
      var flushedNode = firstCallbackNode; // Remove the node from the list before calling the callback. That way the
      // list is in a consistent state even if the callback throws.

      var next = firstCallbackNode.next;

      if (firstCallbackNode === next) {
        // This is the last callback in the list.
        firstCallbackNode = null;
        next = null;
      } else {
        var previous = firstCallbackNode.previous;
        firstCallbackNode = previous.next = next;
        next.previous = previous;
      }

      flushedNode.next = flushedNode.previous = null; // Now it's safe to call the callback.

      var callback = flushedNode.callback;
      callback(deadlineObject);
    }

    function flushWork(didTimeout) {
      isPerformingWork = true;
      deadlineObject.didTimeout = didTimeout;

      try {
        if (didTimeout) {
          // Flush all the timed out callbacks without yielding.
          while (firstCallbackNode !== null) {
            // Read the current time. Flush all the callbacks that expire at or
            // earlier than that time. Then read the current time again and repeat.
            // This optimizes for as few performance.now calls as possible.
            var currentTime = exports.unstable_now();

            if (firstCallbackNode.timesOutAt <= currentTime) {
              do {
                flushFirstCallback();
              } while (firstCallbackNode !== null && firstCallbackNode.timesOutAt <= currentTime);

              continue;
            }

            break;
          }
        } else {
          // Keep flushing callbacks until we run out of time in the frame.
          if (firstCallbackNode !== null) {
            do {
              flushFirstCallback();
            } while (firstCallbackNode !== null && getFrameDeadline() - exports.unstable_now() > 0);
          }
        }
      } finally {
        isPerformingWork = false;

        if (firstCallbackNode !== null) {
          // There's still work remaining. Request another callback.
          ensureHostCallbackIsScheduled(firstCallbackNode);
        } else {
          isHostCallbackScheduled = false;
        }
      }
    }

    function unstable_scheduleWork(callback, options) {
      var currentTime = exports.unstable_now();
      var timesOutAt;

      if (options !== undefined && options !== null && options.timeout !== null && options.timeout !== undefined) {
        // Check for an explicit timeout
        timesOutAt = currentTime + options.timeout;
      } else {
        // Compute an absolute timeout using the default constant.
        timesOutAt = currentTime + DEFERRED_TIMEOUT;
      }

      var newNode = {
        callback: callback,
        timesOutAt: timesOutAt,
        next: null,
        previous: null
      }; // Insert the new callback into the list, sorted by its timeout.

      if (firstCallbackNode === null) {
        // This is the first callback in the list.
        firstCallbackNode = newNode.next = newNode.previous = newNode;
        ensureHostCallbackIsScheduled(firstCallbackNode);
      } else {
        var next = null;
        var node = firstCallbackNode;

        do {
          if (node.timesOutAt > timesOutAt) {
            // The new callback times out before this one.
            next = node;
            break;
          }

          node = node.next;
        } while (node !== firstCallbackNode);

        if (next === null) {
          // No callback with a later timeout was found, which means the new
          // callback has the latest timeout in the list.
          next = firstCallbackNode;
        } else if (next === firstCallbackNode) {
          // The new callback has the earliest timeout in the entire list.
          firstCallbackNode = newNode;
          ensureHostCallbackIsScheduled(firstCallbackNode);
        }

        var previous = next.previous;
        previous.next = next.previous = newNode;
        newNode.next = next;
        newNode.previous = previous;
      }

      return newNode;
    }

    function unstable_cancelScheduledWork(callbackNode) {
      var next = callbackNode.next;

      if (next === null) {
        // Already cancelled.
        return;
      }

      if (next === callbackNode) {
        // This is the only scheduled callback. Clear the list.
        firstCallbackNode = null;
      } else {
        // Remove the callback from its position in the list.
        if (callbackNode === firstCallbackNode) {
          firstCallbackNode = next;
        }

        var previous = callbackNode.previous;
        previous.next = next;
        next.previous = previous;
      }

      callbackNode.next = callbackNode.previous = null;
    } // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.
    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.


    var localDate = Date; // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088

    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined; // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.

    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined; // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.

    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;

    var requestAnimationFrameWithTimeout = function (callback) {
      // schedule rAF and also a setTimeout
      rAFID = localRequestAnimationFrame(function (timestamp) {
        // cancel the setTimeout
        localClearTimeout(rAFTimeoutID);
        callback(timestamp);
      });
      rAFTimeoutID = localSetTimeout(function () {
        // cancel the requestAnimationFrame
        localCancelAnimationFrame(rAFID);
        callback(exports.unstable_now());
      }, ANIMATION_FRAME_TIMEOUT);
    };

    if (hasNativePerformanceNow) {
      var Performance = performance;

      exports.unstable_now = function () {
        return Performance.now();
      };
    } else {
      exports.unstable_now = function () {
        return localDate.now();
      };
    }

    var requestCallback;
    var cancelCallback;
    var getFrameDeadline;

    if (typeof window === 'undefined') {
      // If this accidentally gets imported in a non-browser environment, fallback
      // to a naive implementation.
      var timeoutID = -1;

      requestCallback = function (callback, absoluteTimeout) {
        timeoutID = setTimeout(callback, 0, true);
      };

      cancelCallback = function () {
        clearTimeout(timeoutID);
      };

      getFrameDeadline = function () {
        return 0;
      };
    } else if (window._schedMock) {
      // Dynamic injection, only for testing purposes.
      var impl = window._schedMock;
      requestCallback = impl[0];
      cancelCallback = impl[1];
      getFrameDeadline = impl[2];
    } else {
      if (typeof console !== 'undefined') {
        if (typeof localRequestAnimationFrame !== 'function') {
          console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }

        if (typeof localCancelAnimationFrame !== 'function') {
          console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
      }

      var scheduledCallback = null;
      var isIdleScheduled = false;
      var timeoutTime = -1;
      var isAnimationFrameScheduled = false;
      var isPerformingIdleWork = false;
      var frameDeadline = 0; // We start out assuming that we run at 30fps but then the heuristic tracking
      // will adjust this value to a faster fps if we get more frequent animation
      // frames.

      var previousFrameTime = 33;
      var activeFrameTime = 33;

      getFrameDeadline = function () {
        return frameDeadline;
      }; // We use the postMessage trick to defer idle work until after the repaint.


      var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);

      var idleTick = function (event) {
        if (event.source !== window || event.data !== messageKey) {
          return;
        }

        isIdleScheduled = false;
        var currentTime = exports.unstable_now();
        var didTimeout = false;

        if (frameDeadline - currentTime <= 0) {
          // There's no time left in this idle period. Check if the callback has
          // a timeout and whether it's been exceeded.
          if (timeoutTime !== -1 && timeoutTime <= currentTime) {
            // Exceeded the timeout. Invoke the callback even though there's no
            // time left.
            didTimeout = true;
          } else {
            // No timeout.
            if (!isAnimationFrameScheduled) {
              // Schedule another animation callback so we retry later.
              isAnimationFrameScheduled = true;
              requestAnimationFrameWithTimeout(animationTick);
            } // Exit without invoking the callback.


            return;
          }
        }

        timeoutTime = -1;
        var callback = scheduledCallback;
        scheduledCallback = null;

        if (callback !== null) {
          isPerformingIdleWork = true;

          try {
            callback(didTimeout);
          } finally {
            isPerformingIdleWork = false;
          }
        }
      }; // Assumes that we have addEventListener in this environment. Might need
      // something better for old IE.


      window.addEventListener('message', idleTick, false);

      var animationTick = function (rafTime) {
        isAnimationFrameScheduled = false;
        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;

        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
          if (nextFrameTime < 8) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If we get lower than that, it is probably a bug.
            nextFrameTime = 8;
          } // If one frame goes long, then the next one can be short to catch up.
          // If two frames are short in a row, then that's an indication that we
          // actually have a higher frame rate than what we're currently optimizing.
          // We adjust our heuristic dynamically accordingly. For example, if we're
          // running on 120hz display or 90hz VR display.
          // Take the max of the two in case one of them was an anomaly due to
          // missed frame deadlines.


          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
        } else {
          previousFrameTime = nextFrameTime;
        }

        frameDeadline = rafTime + activeFrameTime;

        if (!isIdleScheduled) {
          isIdleScheduled = true;
          window.postMessage(messageKey, '*');
        }
      };

      requestCallback = function (callback, absoluteTimeout) {
        scheduledCallback = callback;
        timeoutTime = absoluteTimeout;

        if (isPerformingIdleWork) {
          // If we're already performing idle work, an error must have been thrown.
          // Don't wait for the next frame. Continue working ASAP, in a new event.
          window.postMessage(messageKey, '*');
        } else if (!isAnimationFrameScheduled) {
          // If rAF didn't already schedule one, we need to schedule a frame.
          // TODO: If this rAF doesn't materialize because the browser throttles, we
          // might want to still have setTimeout trigger rIC as a backup to ensure
          // that we keep performing work.
          isAnimationFrameScheduled = true;
          requestAnimationFrameWithTimeout(animationTick);
        }
      };

      cancelCallback = function () {
        scheduledCallback = null;
        isIdleScheduled = false;
        timeoutTime = -1;
      };
    }

    exports.unstable_scheduleWork = unstable_scheduleWork;
    exports.unstable_cancelScheduledWork = unstable_cancelScheduledWork;
  })();
}
},{}],"node_modules/schedule/index.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/schedule.production.min.js');
} else {
  module.exports = require('./cjs/schedule.development.js');
}
},{"./cjs/schedule.development.js":"node_modules/schedule/cjs/schedule.development.js"}],"node_modules/schedule/cjs/schedule-tracing.development.js":[function(require,module,exports) {
/** @license React v16.5.2
 * schedule-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    }); // Exports ReactDOM.createRoot
    // Experimental error-boundary API that can recover from errors within a single
    // render phase
    // Suspense
    // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Warn about legacy context API
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.

    var enableSchedulerTracing = true; // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties

    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.

    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

    exports.__subscriberRef = null;

    if (enableSchedulerTracing) {
      exports.__interactionsRef = {
        current: new Set()
      };
      exports.__subscriberRef = {
        current: null
      };
    }

    function unstable_clear(callback) {
      if (!enableSchedulerTracing) {
        return callback();
      }

      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = new Set();

      try {
        return callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;
      }
    }

    function unstable_getCurrent() {
      if (!enableSchedulerTracing) {
        return null;
      } else {
        return exports.__interactionsRef.current;
      }
    }

    function unstable_getThreadID() {
      return ++threadIDCounter;
    }

    function unstable_trace(name, timestamp, callback) {
      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback();
      }

      var interaction = {
        __count: 1,
        id: interactionIDCounter++,
        name: name,
        timestamp: timestamp
      };
      var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
      // To do that, clone the current interactions.
      // The previous set will be restored upon completion.

      var interactions = new Set(prevInteractions);
      interactions.add(interaction);
      exports.__interactionsRef.current = interactions;
      var subscriber = exports.__subscriberRef.current;
      var returnValue = void 0;

      try {
        if (subscriber !== null) {
          subscriber.onInteractionTraced(interaction);
        }
      } finally {
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(interactions, threadID);
          }
        } finally {
          try {
            returnValue = callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;

            try {
              if (subscriber !== null) {
                subscriber.onWorkStopped(interactions, threadID);
              }
            } finally {
              interaction.__count--; // If no async work was scheduled for this interaction,
              // Notify subscribers that it's completed.

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            }
          }
        }
      }

      return returnValue;
    }

    function unstable_wrap(callback) {
      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback;
      }

      var wrappedInteractions = exports.__interactionsRef.current;
      var subscriber = exports.__subscriberRef.current;

      if (subscriber !== null) {
        subscriber.onWorkScheduled(wrappedInteractions, threadID);
      } // Update the pending async work count for the current interactions.
      // Update after calling subscribers in case of error.


      wrappedInteractions.forEach(function (interaction) {
        interaction.__count++;
      });
      var hasRun = false;

      function wrapped() {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = wrappedInteractions;
        subscriber = exports.__subscriberRef.current;

        try {
          var returnValue = void 0;

          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(wrappedInteractions, threadID);
            }
          } finally {
            try {
              returnValue = callback.apply(undefined, arguments);
            } finally {
              exports.__interactionsRef.current = prevInteractions;

              if (subscriber !== null) {
                subscriber.onWorkStopped(wrappedInteractions, threadID);
              }
            }
          }

          return returnValue;
        } finally {
          if (!hasRun) {
            // We only expect a wrapped function to be executed once,
            // But in the event that it's executed more than once–
            // Only decrement the outstanding interaction counts once.
            hasRun = true; // Update pending async counts for all wrapped interactions.
            // If this was the last scheduled async work for any of them,
            // Mark them as completed.

            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        }
      }

      wrapped.cancel = function cancel() {
        subscriber = exports.__subscriberRef.current;

        try {
          if (subscriber !== null) {
            subscriber.onWorkCanceled(wrappedInteractions, threadID);
          }
        } finally {
          // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      };

      return wrapped;
    }

    var subscribers = null;

    if (enableSchedulerTracing) {
      subscribers = new Set();
    }

    function unstable_subscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.add(subscriber);

        if (subscribers.size === 1) {
          exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
          };
        }
      }
    }

    function unstable_unsubscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.delete(subscriber);

        if (subscribers.size === 0) {
          exports.__subscriberRef.current = null;
        }
      }
    }

    function onInteractionTraced(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionTraced(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onInteractionScheduledWorkCompleted(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkScheduled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkScheduled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStarted(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStopped(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStopped(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkCanceled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkCanceled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_trace = unstable_trace;
    exports.unstable_wrap = unstable_wrap;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}
},{}],"node_modules/schedule/tracing.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/schedule-tracing.production.min.js');
} else {
  module.exports = require('./cjs/schedule-tracing.development.js');
}
},{"./cjs/schedule-tracing.development.js":"node_modules/schedule/cjs/schedule-tracing.development.js"}],"node_modules/react-dom/cjs/react-dom.development.js":[function(require,module,exports) {
/** @license React v16.5.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    var React = require('react');

    var _assign = require('object-assign');

    var checkPropTypes = require('prop-types/checkPropTypes');

    var schedule = require('schedule');

    var tracing = require('schedule/tracing');
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */


    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;

        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame

        throw error;
      }
    } // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.


    !React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

    var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);

      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    };

    {
      // In DEV mode, we swap out invokeGuardedCallback for a special version
      // that plays more nicely with the browser's DevTools. The idea is to preserve
      // "Pause on exceptions" behavior. Because React wraps all user-provided
      // functions in invokeGuardedCallback, and the production version of
      // invokeGuardedCallback uses a try-catch, all user exceptions are treated
      // like caught exceptions, and the DevTools won't pause unless the developer
      // takes the extra step of enabling pause on caught exceptions. This is
      // untintuitive, though, because even though React has caught the error, from
      // the developer's perspective, the error is uncaught.
      //
      // To preserve the expected "Pause on exceptions" behavior, we don't use a
      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
      // DOM node, and call the user-provided callback from inside an event handler
      // for that fake event. If the callback throws, the error is "captured" using
      // a global event handler. But because the error happens in a different
      // event loop context, it does not interrupt the normal program flow.
      // Effectively, this gives us try-catch behavior without actually using
      // try-catch. Neat!
      // Check that the browser supports the APIs we need to implement our special
      // DEV version of invokeGuardedCallback
      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');

        var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
          // If document doesn't exist we know for sure we will crash in this method
          // when we call document.createEvent(). However this can cause confusing
          // errors: https://github.com/facebookincubator/create-react-app/issues/3482
          // So we preemptively throw with a better message instead.
          !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
          var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
          // set this to true at the beginning, then set it to false right after
          // calling the function. If the function errors, `didError` will never be
          // set to false. This strategy works even if the browser is flaky and
          // fails to call our global error handler, because it doesn't rely on
          // the error event at all.

          var didError = true; // Keeps track of the value of window.event so that we can reset it
          // during the callback to let user code access window.event in the
          // browsers that support it.

          var windowEvent = window.event; // Create an event handler for our fake event. We will synchronously
          // dispatch our fake event using `dispatchEvent`. Inside the handler, we
          // call the user-provided callback.

          var funcArgs = Array.prototype.slice.call(arguments, 3);

          function callCallback() {
            // We immediately remove the callback from event listeners so that
            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
            // nested call would trigger the fake event handlers of any call higher
            // in the stack.
            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
            // window.event assignment in both IE <= 10 as they throw an error
            // "Member not found" in strict mode, and in Firefox which does not
            // support window.event.

            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
              window.event = windowEvent;
            }

            func.apply(context, funcArgs);
            didError = false;
          } // Create a global error event handler. We use this to capture the value
          // that was thrown. It's possible that this error handler will fire more
          // than once; for example, if non-React code also calls `dispatchEvent`
          // and a handler for that event throws. We should be resilient to most of
          // those cases. Even if our error event handler fires more than once, the
          // last error event is always used. If the callback actually does error,
          // we know that the last error event is the correct one, because it's not
          // possible for anything else to have happened in between our callback
          // erroring and the code that follows the `dispatchEvent` call below. If
          // the callback doesn't error, but the error event was fired, we know to
          // ignore it because `didError` will be false, as described above.


          var error = void 0; // Use this to track whether the error event is ever called.

          var didSetError = false;
          var isCrossOriginError = false;

          function handleWindowError(event) {
            error = event.error;
            didSetError = true;

            if (error === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }

            if (event.defaultPrevented) {
              // Some other error handler has prevented default.
              // Browsers silence the error report if this happens.
              // We'll remember this to later decide whether to log it or not.
              if (error != null && typeof error === 'object') {
                try {
                  error._suppressLogging = true;
                } catch (inner) {// Ignore.
                }
              }
            }
          } // Create a fake event type.


          var evtType = 'react-' + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

          window.addEventListener('error', handleWindowError);
          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
          // errors, it will trigger our global error handler.

          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);

          if (didError) {
            if (!didSetError) {
              // The callback errored, but the error event never fired.
              error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
            } else if (isCrossOriginError) {
              error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
            }

            this.onError(error);
          } // Remove our event listeners


          window.removeEventListener('error', handleWindowError);
        };

        invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl; // Used by Fiber to simulate a try-catch.

    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.

    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function (error) {
        hasError = true;
        caughtError = error;
      }
    };
    /**
     * Call a function while guarding against errors that happens within it.
     * Returns an error if it throws, otherwise null.
     *
     * In production, this is implemented using a try-catch. The reason we don't
     * use a try-catch directly is so that we can swap out a different
     * implementation in DEV mode.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */

    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
     * Same as invokeGuardedCallback, but instead of returning an error, it stores
     * it in a global so it can be rethrown by `rethrowCaughtError` later.
     * TODO: See if caughtError and rethrowError can be unified.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */


    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);

      if (hasError) {
        var error = clearCaughtError();

        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error;
        }
      }
    }
    /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */


    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error;
      }
    }

    function hasCaughtError() {
      return hasError;
    }

    function clearCaughtError() {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
        return error;
      } else {
        invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
      }
    }
    /**
     * Injectable ordering of event plugins.
     */


    var eventPluginOrder = null;
    /**
     * Injectable mapping from names to event plugin modules.
     */

    var namesToPlugins = {};
    /**
     * Recomputes the plugin list using the injected plugins and plugin ordering.
     *
     * @private
     */

    function recomputePluginOrdering() {
      if (!eventPluginOrder) {
        // Wait until an `eventPluginOrder` is injected.
        return;
      }

      for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName];
        var pluginIndex = eventPluginOrder.indexOf(pluginName);
        !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;

        if (plugins[pluginIndex]) {
          continue;
        }

        !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
        plugins[pluginIndex] = pluginModule;
        var publishedEvents = pluginModule.eventTypes;

        for (var eventName in publishedEvents) {
          !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
        }
      }
    }
    /**
     * Publishes an event so that it can be dispatched by the supplied plugin.
     *
     * @param {object} dispatchConfig Dispatch configuration for the event.
     * @param {object} PluginModule Plugin publishing the event.
     * @return {boolean} True if the event was successfully published.
     * @private
     */


    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
      !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
      eventNameDispatchConfigs[eventName] = dispatchConfig;
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
            var phasedRegistrationName = phasedRegistrationNames[phaseName];
            publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
          }
        }

        return true;
      } else if (dispatchConfig.registrationName) {
        publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
        return true;
      }

      return false;
    }
    /**
     * Publishes a registration name that is used to identify dispatched events.
     *
     * @param {string} registrationName Registration name to add.
     * @param {object} PluginModule Plugin publishing the event.
     * @private
     */


    function publishRegistrationName(registrationName, pluginModule, eventName) {
      !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
      registrationNameModules[registrationName] = pluginModule;
      registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;

        if (registrationName === 'onDoubleClick') {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
    }
    /**
     * Registers plugins so that they can extract and dispatch events.
     *
     * @see {EventPluginHub}
     */

    /**
     * Ordered list of injected plugins.
     */


    var plugins = [];
    /**
     * Mapping from event name to dispatch config
     */

    var eventNameDispatchConfigs = {};
    /**
     * Mapping from registration name to plugin module
     */

    var registrationNameModules = {};
    /**
     * Mapping from registration name to event name
     */

    var registrationNameDependencies = {};
    /**
     * Mapping from lowercase registration names to the properly cased version,
     * used to warn in the case of missing event handlers. Available
     * only in true.
     * @type {Object}
     */

    var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

    /**
     * Injects an ordering of plugins (by plugin name). This allows the ordering
     * to be decoupled from injection of the actual plugins so that ordering is
     * always deterministic regardless of packaging, on-the-fly injection, etc.
     *
     * @param {array} InjectedEventPluginOrder
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginOrder}
     */

    function injectEventPluginOrder(injectedEventPluginOrder) {
      !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0; // Clone the ordering so it cannot be dynamically mutated.

      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    }
    /**
     * Injects plugins to be used by `EventPluginHub`. The plugin names must be
     * in the ordering injected by `injectEventPluginOrder`.
     *
     * Plugins can be injected as part of page initialization or on-the-fly.
     *
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginsByName}
     */


    function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false;

      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }

        var pluginModule = injectedNamesToPlugins[pluginName];

        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
          !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
          namesToPlugins[pluginName] = pluginModule;
          isOrderingDirty = true;
        }
      }

      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }

        if (condition) {
          return;
        }

        if (typeof console !== 'undefined') {
          var _args$map = args.map(function (item) {
            return '' + item;
          }),
              a = _args$map[0],
              b = _args$map[1],
              c = _args$map[2],
              d = _args$map[3],
              e = _args$map[4],
              f = _args$map[5],
              g = _args$map[6],
              h = _args$map[7];

          var message = 'Warning: ' + format; // We intentionally don't use spread (or .apply) because it breaks IE9:
          // https://github.com/facebook/react/issues/13610

          switch (args.length) {
            case 0:
              console.error(message);
              break;

            case 1:
              console.error(message, a);
              break;

            case 2:
              console.error(message, a, b);
              break;

            case 3:
              console.error(message, a, b, c);
              break;

            case 4:
              console.error(message, a, b, c, d);
              break;

            case 5:
              console.error(message, a, b, c, d, e);
              break;

            case 6:
              console.error(message, a, b, c, d, e, f);
              break;

            case 7:
              console.error(message, a, b, c, d, e, f, g);
              break;

            case 8:
              console.error(message, a, b, c, d, e, f, g, h);
              break;

            default:
              throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
          }
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;

          var _message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          throw new Error(_message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var getFiberCurrentPropsFromNode = null;
    var getInstanceFromNode = null;
    var getNodeFromInstance = null;

    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
      getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
      getInstanceFromNode = getInstanceFromNodeImpl;
      getNodeFromInstance = getNodeFromInstanceImpl;
      {
        !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
      }
    }

    var validateEventDispatches = void 0;
    {
      validateEventDispatches = function (event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        var listenersIsArr = Array.isArray(dispatchListeners);
        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
        var instancesIsArr = Array.isArray(dispatchInstances);
        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
        !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
      };
    }
    /**
     * Dispatch the event to the listener.
     * @param {SyntheticEvent} event SyntheticEvent to handle
     * @param {boolean} simulated If the event is simulated (changes exn behavior)
     * @param {function} listener Application-level callback
     * @param {*} inst Internal component instance
     */

    function executeDispatch(event, simulated, listener, inst) {
      var type = event.type || 'unknown-event';
      event.currentTarget = getNodeFromInstance(inst);
      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }
    /**
     * Standard/simple iteration through an event's collected dispatches.
     */


    function executeDispatchesInOrder(event, simulated) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
      {
        validateEventDispatches(event);
      }

      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          } // Listeners and Instances are two parallel arrays that are always in sync.


          executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
        }
      } else if (dispatchListeners) {
        executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
      }

      event._dispatchListeners = null;
      event._dispatchInstances = null;
    }
    /**
     * @see executeDispatchesInOrderStopAtTrueImpl
     */

    /**
     * Execution of a "direct" dispatch - there must be at most one dispatch
     * accumulated on the event or it is considered an error. It doesn't really make
     * sense for an event with multiple dispatches (bubbled) to keep track of the
     * return values at each dispatch execution, but it does tend to make sense when
     * dealing with "direct" dispatches.
     *
     * @return {*} The return value of executing the single dispatch.
     */

    /**
     * @param {SyntheticEvent} event
     * @return {boolean} True iff number of dispatches accumulated is greater than 0.
     */

    /**
     * Accumulates items that must not be null or undefined into the first one. This
     * is used to conserve memory by avoiding array allocations, and thus sacrifices
     * API cleanness. Since `current` can be null before being passed in and not
     * null after this function, make sure to assign it back to `current`:
     *
     * `a = accumulateInto(a, b);`
     *
     * This API should be sparingly used. Try `accumulate` for something cleaner.
     *
     * @return {*|array<*>} An accumulation of items.
     */


    function accumulateInto(current, next) {
      !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

      if (current == null) {
        return next;
      } // Both are not empty. Warning: Never call x.concat(y) when you are not
      // certain that x is an Array (x could be a string with concat method).


      if (Array.isArray(current)) {
        if (Array.isArray(next)) {
          current.push.apply(current, next);
          return current;
        }

        current.push(next);
        return current;
      }

      if (Array.isArray(next)) {
        // A bit too dangerous to mutate `next`.
        return [current].concat(next);
      }

      return [current, next];
    }
    /**
     * @param {array} arr an "accumulation" of items which is either an Array or
     * a single item. Useful when paired with the `accumulate` module. This is a
     * simple utility that allows us to reason about a collection of items, but
     * handling the case when there is exactly one item (and we do not need to
     * allocate an array).
     * @param {function} cb Callback invoked with each element or a collection.
     * @param {?} [scope] Scope used as `this` in a callback.
     */


    function forEachAccumulated(arr, cb, scope) {
      if (Array.isArray(arr)) {
        arr.forEach(cb, scope);
      } else if (arr) {
        cb.call(scope, arr);
      }
    }
    /**
     * Internal queue of events that have accumulated their dispatches and are
     * waiting to have their dispatches executed.
     */


    var eventQueue = null;
    /**
     * Dispatches an event and releases it back into the pool, unless persistent.
     *
     * @param {?object} event Synthetic event to be dispatched.
     * @param {boolean} simulated If the event is simulated (changes exn behavior)
     * @private
     */

    var executeDispatchesAndRelease = function (event, simulated) {
      if (event) {
        executeDispatchesInOrder(event, simulated);

        if (!event.isPersistent()) {
          event.constructor.release(event);
        }
      }
    };

    var executeDispatchesAndReleaseSimulated = function (e) {
      return executeDispatchesAndRelease(e, true);
    };

    var executeDispatchesAndReleaseTopLevel = function (e) {
      return executeDispatchesAndRelease(e, false);
    };

    function isInteractive(tag) {
      return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }

    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case 'onClick':
        case 'onClickCapture':
        case 'onDoubleClick':
        case 'onDoubleClickCapture':
        case 'onMouseDown':
        case 'onMouseDownCapture':
        case 'onMouseMove':
        case 'onMouseMoveCapture':
        case 'onMouseUp':
        case 'onMouseUpCapture':
          return !!(props.disabled && isInteractive(type));

        default:
          return false;
      }
    }
    /**
     * This is a unified interface for event plugins to be installed and configured.
     *
     * Event plugins can implement the following properties:
     *
     *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
     *     Required. When a top-level event is fired, this method is expected to
     *     extract synthetic events that will in turn be queued and dispatched.
     *
     *   `eventTypes` {object}
     *     Optional, plugins that fire events must publish a mapping of registration
     *     names that are used to register listeners. Values of this mapping must
     *     be objects that contain `registrationName` or `phasedRegistrationNames`.
     *
     *   `executeDispatch` {function(object, function, string)}
     *     Optional, allows plugins to override how an event gets dispatched. By
     *     default, the listener is simply invoked.
     *
     * Each plugin that is injected into `EventsPluginHub` is immediately operable.
     *
     * @public
     */

    /**
     * Methods for injecting dependencies.
     */


    var injection = {
      /**
       * @param {array} InjectedEventPluginOrder
       * @public
       */
      injectEventPluginOrder: injectEventPluginOrder,

      /**
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       */
      injectEventPluginsByName: injectEventPluginsByName
    };
    /**
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */

    function getListener(inst, registrationName) {
      var listener = void 0; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
      // live here; needs to be moved to a better place soon

      var stateNode = inst.stateNode;

      if (!stateNode) {
        // Work in progress (ex: onload events in incremental mode).
        return null;
      }

      var props = getFiberCurrentPropsFromNode(stateNode);

      if (!props) {
        // Work in progress.
        return null;
      }

      listener = props[registrationName];

      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }

      !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
      return listener;
    }
    /**
     * Allows registered plugins an opportunity to extract events from top-level
     * native browser events.
     *
     * @return {*} An accumulation of synthetic events.
     * @internal
     */


    function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = null;

      for (var i = 0; i < plugins.length; i++) {
        // Not every plugin in the ordering may be loaded at runtime.
        var possiblePlugin = plugins[i];

        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

          if (extractedEvents) {
            events = accumulateInto(events, extractedEvents);
          }
        }
      }

      return events;
    }

    function runEventsInBatch(events, simulated) {
      if (events !== null) {
        eventQueue = accumulateInto(eventQueue, events);
      } // Set `eventQueue` to null before processing it so that we can tell if more
      // events get enqueued while processing.


      var processingEventQueue = eventQueue;
      eventQueue = null;

      if (!processingEventQueue) {
        return;
      }

      if (simulated) {
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
      } else {
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
      }

      !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0; // This would be a good time to rethrow if any of the event handlers threw.

      rethrowCaughtError();
    }

    function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      runEventsInBatch(events, false);
    }

    var FunctionalComponent = 0;
    var FunctionalComponentLazy = 1;
    var ClassComponent = 2;
    var ClassComponentLazy = 3;
    var IndeterminateComponent = 4; // Before we know whether it is functional or class

    var HostRoot = 5; // Root of a host tree. Could be nested inside another node.

    var HostPortal = 6; // A subtree. Could be an entry point to a different renderer.

    var HostComponent = 7;
    var HostText = 8;
    var Fragment = 9;
    var Mode = 10;
    var ContextConsumer = 11;
    var ContextProvider = 12;
    var ForwardRef = 13;
    var ForwardRefLazy = 14;
    var Profiler = 15;
    var PlaceholderComponent = 16;
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactInternalInstance$' + randomKey;
    var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

    function precacheFiberNode(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }
    /**
     * Given a DOM node, return the closest ReactDOMComponent or
     * ReactDOMTextComponent instance ancestor.
     */


    function getClosestInstanceFromNode(node) {
      if (node[internalInstanceKey]) {
        return node[internalInstanceKey];
      }

      while (!node[internalInstanceKey]) {
        if (node.parentNode) {
          node = node.parentNode;
        } else {
          // Top of the tree. This node must not be part of a React tree (or is
          // unmounted, potentially).
          return null;
        }
      }

      var inst = node[internalInstanceKey];

      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber, this will always be the deepest root.
        return inst;
      }

      return null;
    }
    /**
     * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
     * instance, or null if the node was not rendered by this React.
     */


    function getInstanceFromNode$1(node) {
      var inst = node[internalInstanceKey];

      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst;
        } else {
          return null;
        }
      }

      return null;
    }
    /**
     * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
     * DOM node.
     */


    function getNodeFromInstance$1(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
      } // Without this first invariant, passing a non-DOM-component triggers the next
      // invariant for a missing parent, which is super confusing.


      invariant(false, 'getNodeFromInstance: Invalid argument.');
    }

    function getFiberCurrentPropsFromNode$1(node) {
      return node[internalEventHandlersKey] || null;
    }

    function updateFiberProps(node, props) {
      node[internalEventHandlersKey] = props;
    }

    function getParent(inst) {
      do {
        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        // That is depending on if we want nested subtrees (layers) to bubble
        // events to their parent. We could also go through parentNode on the
        // host node but that wouldn't work for React Native and doesn't let us
        // do the portal feature.
      } while (inst && inst.tag !== HostComponent);

      if (inst) {
        return inst;
      }

      return null;
    }
    /**
     * Return the lowest common ancestor of A and B, or null if they are in
     * different trees.
     */


    function getLowestCommonAncestor(instA, instB) {
      var depthA = 0;

      for (var tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }

      var depthB = 0;

      for (var tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
      } // If A is deeper, crawl up.


      while (depthA - depthB > 0) {
        instA = getParent(instA);
        depthA--;
      } // If B is deeper, crawl up.


      while (depthB - depthA > 0) {
        instB = getParent(instB);
        depthB--;
      } // Walk in lockstep until we find a match.


      var depth = depthA;

      while (depth--) {
        if (instA === instB || instA === instB.alternate) {
          return instA;
        }

        instA = getParent(instA);
        instB = getParent(instB);
      }

      return null;
    }
    /**
     * Return if A is an ancestor of B.
     */

    /**
     * Return the parent instance of the passed-in instance.
     */

    /**
     * Simulates the traversal of a two-phase, capture/bubble event dispatch.
     */


    function traverseTwoPhase(inst, fn, arg) {
      var path = [];

      while (inst) {
        path.push(inst);
        inst = getParent(inst);
      }

      var i = void 0;

      for (i = path.length; i-- > 0;) {
        fn(path[i], 'captured', arg);
      }

      for (i = 0; i < path.length; i++) {
        fn(path[i], 'bubbled', arg);
      }
    }
    /**
     * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
     * should would receive a `mouseEnter` or `mouseLeave` event.
     *
     * Does not invoke the callback on the nearest common ancestor because nothing
     * "entered" or "left" that element.
     */


    function traverseEnterLeave(from, to, fn, argFrom, argTo) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      var pathFrom = [];

      while (true) {
        if (!from) {
          break;
        }

        if (from === common) {
          break;
        }

        var alternate = from.alternate;

        if (alternate !== null && alternate === common) {
          break;
        }

        pathFrom.push(from);
        from = getParent(from);
      }

      var pathTo = [];

      while (true) {
        if (!to) {
          break;
        }

        if (to === common) {
          break;
        }

        var _alternate = to.alternate;

        if (_alternate !== null && _alternate === common) {
          break;
        }

        pathTo.push(to);
        to = getParent(to);
      }

      for (var i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], 'bubbled', argFrom);
      }

      for (var _i = pathTo.length; _i-- > 0;) {
        fn(pathTo[_i], 'captured', argTo);
      }
    }
    /**
     * Some event types have a notion of different registration names for different
     * "phases" of propagation. This finds listeners by a given phase.
     */


    function listenerAtPhase(inst, event, propagationPhase) {
      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
      return getListener(inst, registrationName);
    }
    /**
     * A small set of propagation patterns, each of which will accept a small amount
     * of information, and generate a set of "dispatch ready event objects" - which
     * are sets of events that have already been annotated with a set of dispatched
     * listener functions/ids. The API is designed this way to discourage these
     * propagation strategies from actually executing the dispatches, since we
     * always want to collect the entire set of dispatches before executing even a
     * single one.
     */

    /**
     * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
     * here, allows us to not have to bind or create functions for each event.
     * Mutating the event's members allows us to not have to create a wrapping
     * "dispatch" object that pairs the event with the listener.
     */


    function accumulateDirectionalDispatches(inst, phase, event) {
      {
        !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
      }
      var listener = listenerAtPhase(inst, event, phase);

      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
      }
    }
    /**
     * Collect dispatches (must be entirely collected before dispatching - see unit
     * tests). Lazily allocate the array to conserve memory.  We must loop through
     * each event and perform the traversal for each one. We cannot perform a
     * single traversal for the entire collection of events because each event may
     * have a different target.
     */


    function accumulateTwoPhaseDispatchesSingle(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
      }
    }
    /**
     * Accumulates without regard to direction, does not look for phased
     * registration names. Same as `accumulateDirectDispatchesSingle` but without
     * requiring that the `dispatchMarker` be the same as the dispatched ID.
     */


    function accumulateDispatches(inst, ignoredDirection, event) {
      if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName;
        var listener = getListener(inst, registrationName);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }
    }
    /**
     * Accumulates dispatches on an `SyntheticEvent`, but only for the
     * `dispatchMarker`.
     * @param {SyntheticEvent} event
     */


    function accumulateDirectDispatchesSingle(event) {
      if (event && event.dispatchConfig.registrationName) {
        accumulateDispatches(event._targetInst, null, event);
      }
    }

    function accumulateTwoPhaseDispatches(events) {
      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
    }

    function accumulateEnterLeaveDispatches(leave, enter, from, to) {
      traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
    }

    function accumulateDirectDispatches(events) {
      forEachAccumulated(events, accumulateDirectDispatchesSingle);
    }

    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement); // Do not uses the below two methods directly!
    // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
    // (It is the only module that is allowed to access these methods.)

    function unsafeCastStringToDOMTopLevelType(topLevelType) {
      return topLevelType;
    }

    function unsafeCastDOMTopLevelTypeToString(topLevelType) {
      return topLevelType;
    }
    /**
     * Generate a mapping of standard vendor prefixes using the defined style property and event name.
     *
     * @param {string} styleProp
     * @param {string} eventName
     * @returns {object}
     */


    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};
      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes['Webkit' + styleProp] = 'webkit' + eventName;
      prefixes['Moz' + styleProp] = 'moz' + eventName;
      return prefixes;
    }
    /**
     * A list of event names to a configurable list of vendor prefixes.
     */


    var vendorPrefixes = {
      animationend: makePrefixMap('Animation', 'AnimationEnd'),
      animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
      animationstart: makePrefixMap('Animation', 'AnimationStart'),
      transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
     * Event names that have already been detected and prefixed (if applicable).
     */

    var prefixedEventNames = {};
    /**
     * Element to check for prefixes on.
     */

    var style = {};
    /**
     * Bootstrap if a DOM exists.
     */

    if (canUseDOM) {
      style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
      // the un-prefixed "animation" and "transition" properties are defined on the
      // style object but the events that fire will still be prefixed, so we need
      // to check if the un-prefixed events are usable, and if not remove them from the map.

      if (!('AnimationEvent' in window)) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      } // Same as above


      if (!('TransitionEvent' in window)) {
        delete vendorPrefixes.transitionend.transition;
      }
    }
    /**
     * Attempts to determine the correct vendor prefixed event name.
     *
     * @param {string} eventName
     * @returns {string}
     */


    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }

      var prefixMap = vendorPrefixes[eventName];

      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }

      return eventName;
    }
    /**
     * To identify top level events in ReactDOM, we use constants defined by this
     * module. This is the only module that uses the unsafe* methods to express
     * that the constants actually correspond to the browser event names. This lets
     * us save some bundle size by avoiding a top level type -> event name map.
     * The rest of ReactDOM code should import top level types from this file.
     */


    var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
    var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
    var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
    var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
    var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
    var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
    var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
    var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
    var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
    var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
    var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
    var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
    var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
    var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
    var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
    var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
    var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
    var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
    var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
    var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
    var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
    var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
    var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
    var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
    var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
    var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
    var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
    var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
    var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
    var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
    var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
    var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
    var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
    var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
    var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
    var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
    var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
    var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
    var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
    var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
    var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
    var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
    var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
    var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
    var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
    var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
    var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
    var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
    var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
    var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
    var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
    var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
    var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
    var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
    var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
    var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
    var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
    var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
    var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
    var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
    var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
    var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
    var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
    var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
    var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
    var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
    var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
    var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
    var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
    var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
    var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
    var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
    var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
    var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
    var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
    var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
    var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
    var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
    var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
    var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
    // Note that events in this list will *not* be listened to at the top level
    // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

    var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

    function getRawEventName(topLevelType) {
      return unsafeCastDOMTopLevelTypeToString(topLevelType);
    }
    /**
     * These variables store information about text content of a target node,
     * allowing comparison of content before and after a given event.
     *
     * Identify the node where selection currently begins, then observe
     * both its text content and its current position in the DOM. Since the
     * browser may natively replace the target node during composition, we can
     * use its position to find its replacement.
     *
     *
     */


    var root = null;
    var startText = null;
    var fallbackText = null;

    function initialize(nativeEventTarget) {
      root = nativeEventTarget;
      startText = getText();
      return true;
    }

    function reset() {
      root = null;
      startText = null;
      fallbackText = null;
    }

    function getData() {
      if (fallbackText) {
        return fallbackText;
      }

      var start = void 0;
      var startValue = startText;
      var startLength = startValue.length;
      var end = void 0;
      var endValue = getText();
      var endLength = endValue.length;

      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }

      var minEnd = startLength - start;

      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }

      var sliceTail = end > 1 ? 1 - end : undefined;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }

    function getText() {
      if ('value' in root) {
        return root.value;
      }

      return root.textContent;
    }
    /* eslint valid-typeof: 0 */


    var EVENT_POOL_SIZE = 10;
    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var EventInterface = {
      type: null,
      target: null,
      // currentTarget is set when dispatching; no use in copying it here
      currentTarget: function () {
        return null;
      },
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function (event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null
    };

    function functionThatReturnsTrue() {
      return true;
    }

    function functionThatReturnsFalse() {
      return false;
    }
    /**
     * Synthetic events are dispatched by event plugins, typically in response to a
     * top-level event delegation handler.
     *
     * These systems should generally use pooling to reduce the frequency of garbage
     * collection. The system should check `isPersistent` to determine whether the
     * event should be released into the pool after being dispatched. Users that
     * need a persisted event should invoke `persist`.
     *
     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
     * normalizing browser quirks. Subclasses do not necessarily have to implement a
     * DOM interface; custom application-specific events can also subclass this.
     *
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {*} targetInst Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @param {DOMEventTarget} nativeEventTarget Target node.
     */


    function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
      {
        // these have a getter/setter for warnings
        delete this.nativeEvent;
        delete this.preventDefault;
        delete this.stopPropagation;
        delete this.isDefaultPrevented;
        delete this.isPropagationStopped;
      }
      this.dispatchConfig = dispatchConfig;
      this._targetInst = targetInst;
      this.nativeEvent = nativeEvent;
      var Interface = this.constructor.Interface;

      for (var propName in Interface) {
        if (!Interface.hasOwnProperty(propName)) {
          continue;
        }

        {
          delete this[propName]; // this has a getter/setter for warnings
        }
        var normalize = Interface[propName];

        if (normalize) {
          this[propName] = normalize(nativeEvent);
        } else {
          if (propName === 'target') {
            this.target = nativeEventTarget;
          } else {
            this[propName] = nativeEvent[propName];
          }
        }
      }

      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

      if (defaultPrevented) {
        this.isDefaultPrevented = functionThatReturnsTrue;
      } else {
        this.isDefaultPrevented = functionThatReturnsFalse;
      }

      this.isPropagationStopped = functionThatReturnsFalse;
      return this;
    }

    _assign(SyntheticEvent.prototype, {
      preventDefault: function () {
        this.defaultPrevented = true;
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.preventDefault) {
          event.preventDefault();
        } else if (typeof event.returnValue !== 'unknown') {
          event.returnValue = false;
        }

        this.isDefaultPrevented = functionThatReturnsTrue;
      },
      stopPropagation: function () {
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.stopPropagation) {
          event.stopPropagation();
        } else if (typeof event.cancelBubble !== 'unknown') {
          // The ChangeEventPlugin registers a "propertychange" event for
          // IE. This event does not support bubbling or cancelling, and
          // any references to cancelBubble throw "Member not found".  A
          // typeof check of "unknown" circumvents this issue (and is also
          // IE specific).
          event.cancelBubble = true;
        }

        this.isPropagationStopped = functionThatReturnsTrue;
      },

      /**
       * We release all dispatched `SyntheticEvent`s after each event loop, adding
       * them back into the pool. This allows a way to hold onto a reference that
       * won't be added back into the pool.
       */
      persist: function () {
        this.isPersistent = functionThatReturnsTrue;
      },

      /**
       * Checks if this event should be released back into the pool.
       *
       * @return {boolean} True if this should not be released, false otherwise.
       */
      isPersistent: functionThatReturnsFalse,

      /**
       * `PooledClass` looks for `destructor` on each instance it releases.
       */
      destructor: function () {
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
          }
        }

        this.dispatchConfig = null;
        this._targetInst = null;
        this.nativeEvent = null;
        this.isDefaultPrevented = functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        this._dispatchListeners = null;
        this._dispatchInstances = null;
        {
          Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
          Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
          Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
          Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
          Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
        }
      }
    });

    SyntheticEvent.Interface = EventInterface;
    /**
     * Helper to reduce boilerplate when creating subclasses.
     */

    SyntheticEvent.extend = function (Interface) {
      var Super = this;

      var E = function () {};

      E.prototype = Super.prototype;
      var prototype = new E();

      function Class() {
        return Super.apply(this, arguments);
      }

      _assign(prototype, Class.prototype);

      Class.prototype = prototype;
      Class.prototype.constructor = Class;
      Class.Interface = _assign({}, Super.Interface, Interface);
      Class.extend = Super.extend;
      addEventPoolingTo(Class);
      return Class;
    };

    addEventPoolingTo(SyntheticEvent);
    /**
     * Helper to nullify syntheticEvent instance properties when destructing
     *
     * @param {String} propName
     * @param {?object} getVal
     * @return {object} defineProperty object
     */

    function getPooledWarningPropertyDefinition(propName, getVal) {
      var isFunction = typeof getVal === 'function';
      return {
        configurable: true,
        set: set,
        get: get
      };

      function set(val) {
        var action = isFunction ? 'setting the method' : 'setting the property';
        warn(action, 'This is effectively a no-op');
        return val;
      }

      function get() {
        var action = isFunction ? 'accessing the method' : 'accessing the property';
        var result = isFunction ? 'This is a no-op function' : 'This is set to null';
        warn(action, result);
        return getVal;
      }

      function warn(action, result) {
        var warningCondition = false;
        !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
      }
    }

    function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
      var EventConstructor = this;

      if (EventConstructor.eventPool.length) {
        var instance = EventConstructor.eventPool.pop();
        EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
      }

      return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }

    function releasePooledEvent(event) {
      var EventConstructor = this;
      !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
      event.destructor();

      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
        EventConstructor.eventPool.push(event);
      }
    }

    function addEventPoolingTo(EventConstructor) {
      EventConstructor.eventPool = [];
      EventConstructor.getPooled = getPooledEvent;
      EventConstructor.release = releasePooledEvent;
    }
    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
     */


    var SyntheticCompositionEvent = SyntheticEvent.extend({
      data: null
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
     *      /#events-inputevents
     */

    var SyntheticInputEvent = SyntheticEvent.extend({
      data: null
    });
    var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;

    if (canUseDOM && 'documentMode' in document) {
      documentMode = document.documentMode;
    } // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.


    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.

    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

    var eventTypes = {
      beforeInput: {
        phasedRegistrationNames: {
          bubbled: 'onBeforeInput',
          captured: 'onBeforeInputCapture'
        },
        dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
      },
      compositionEnd: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionEnd',
          captured: 'onCompositionEndCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      },
      compositionStart: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionStart',
          captured: 'onCompositionStartCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      },
      compositionUpdate: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionUpdate',
          captured: 'onCompositionUpdateCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      }
    }; // Track whether we've ever handled a keypress on the space key.

    var hasSpaceKeypress = false;
    /**
     * Return whether a native keypress event is assumed to be a command.
     * This is required because Firefox fires `keypress` events for key commands
     * (cut, copy, select-all, etc.) even though no character is inserted.
     */

    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
     * Translate native top level events into event types.
     *
     * @param {string} topLevelType
     * @return {object}
     */


    function getCompositionEventType(topLevelType) {
      switch (topLevelType) {
        case TOP_COMPOSITION_START:
          return eventTypes.compositionStart;

        case TOP_COMPOSITION_END:
          return eventTypes.compositionEnd;

        case TOP_COMPOSITION_UPDATE:
          return eventTypes.compositionUpdate;
      }
    }
    /**
     * Does our fallback best-guess model think this event signifies that
     * composition has begun?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isFallbackCompositionStart(topLevelType, nativeEvent) {
      return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
     * Does our fallback mode think that this event is the end of composition?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isFallbackCompositionEnd(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case TOP_KEY_UP:
          // Command keys insert or clear IME input.
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

        case TOP_KEY_DOWN:
          // Expect IME keyCode on each keydown. If we get any other
          // code we must have exited earlier.
          return nativeEvent.keyCode !== START_KEYCODE;

        case TOP_KEY_PRESS:
        case TOP_MOUSE_DOWN:
        case TOP_BLUR:
          // Events are not possible without cancelling IME.
          return true;

        default:
          return false;
      }
    }
    /**
     * Google Input Tools provides composition data via a CustomEvent,
     * with the `data` property populated in the `detail` object. If this
     * is available on the event object, use it. If not, this is a plain
     * composition event and we have nothing special to extract.
     *
     * @param {object} nativeEvent
     * @return {?string}
     */


    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;

      if (typeof detail === 'object' && 'data' in detail) {
        return detail.data;
      }

      return null;
    }
    /**
     * Check if a composition event was triggered by Korean IME.
     * Our fallback mode does not work well with IE's Korean IME,
     * so just use native composition events when Korean IME is used.
     * Although CompositionEvent.locale property is deprecated,
     * it is available in IE, where our fallback mode is enabled.
     *
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.


    var isComposing = false;
    /**
     * @return {?object} A SyntheticCompositionEvent.
     */

    function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var eventType = void 0;
      var fallbackData = void 0;

      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(topLevelType);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
          eventType = eventTypes.compositionStart;
        }
      } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionEnd;
      }

      if (!eventType) {
        return null;
      }

      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        // The current composition is stored statically and must not be
        // overwritten while composition continues.
        if (!isComposing && eventType === eventTypes.compositionStart) {
          isComposing = initialize(nativeEventTarget);
        } else if (eventType === eventTypes.compositionEnd) {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }

      var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

      if (fallbackData) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
      } else {
        var customData = getDataFromCustomEvent(nativeEvent);

        if (customData !== null) {
          event.data = customData;
        }
      }

      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * @param {TopLevelType} topLevelType Number from `TopLevelType`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The string corresponding to this `beforeInput` event.
     */


    function getNativeBeforeInputChars(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case TOP_COMPOSITION_END:
          return getDataFromCustomEvent(nativeEvent);

        case TOP_KEY_PRESS:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;

          if (which !== SPACEBAR_CODE) {
            return null;
          }

          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;

        case TOP_TEXT_INPUT:
          // Record the characters to be added to the DOM.
          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to ignore it.

          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }

          return chars;

        default:
          // For other native event types, do nothing.
          return null;
      }
    }
    /**
     * For browsers that do not provide the `textInput` event, extract the
     * appropriate string to use for SyntheticInputEvent.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The fallback string for this `beforeInput` event.
     */


    function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
      // If we are currently composing (IME) and using a fallback to do so,
      // try to extract the composed characters from the fallback object.
      // If composition event is available, we extract a string only at
      // compositionevent, otherwise extract it at fallback events.
      if (isComposing) {
        if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
          var chars = getData();
          reset();
          isComposing = false;
          return chars;
        }

        return null;
      }

      switch (topLevelType) {
        case TOP_PASTE:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          return null;

        case TOP_KEY_PRESS:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (!isKeypressCommand(nativeEvent)) {
            // IE fires the `keypress` event when a user types an emoji via
            // Touch keyboard of Windows.  In such a case, the `char` property
            // holds an emoji character like `\uD83D\uDE0A`.  Because its length
            // is 2, the property `which` does not represent an emoji correctly.
            // In such a case, we directly return the `char` property instead of
            // using `which`.
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }

          return null;

        case TOP_COMPOSITION_END:
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

        default:
          return null;
      }
    }
    /**
     * Extract a SyntheticInputEvent for `beforeInput`, based on either native
     * `textInput` or fallback behavior.
     *
     * @return {?object} A SyntheticInputEvent.
     */


    function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var chars = void 0;

      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
      } // If no characters are being inserted, no BeforeInput event should
      // be fired.


      if (!chars) {
        return null;
      }

      var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
      event.data = chars;
      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * Create an `onBeforeInput` event to match
     * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
     *
     * This event plugin is based on the native `textInput` event
     * available in Chrome, Safari, Opera, and IE. This event fires after
     * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
     *
     * `beforeInput` is spec'd but not implemented in any browsers, and
     * the `input` event does not provide any useful information about what has
     * actually been added, contrary to the spec. Thus, `textInput` is the best
     * available event to identify the characters that have actually been inserted
     * into the target node.
     *
     * This plugin is also responsible for emitting `composition` events, thus
     * allowing us to share composition fallback code for both `beforeInput` and
     * `composition` event types.
     */


    var BeforeInputEventPlugin = {
      eventTypes: eventTypes,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

        if (composition === null) {
          return beforeInput;
        }

        if (beforeInput === null) {
          return composition;
        }

        return [composition, beforeInput];
      }
    }; // Use to restore controlled state after a change event has fired.

    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;

    function restoreStateOfTarget(target) {
      // We perform this translation at the end of the event loop so that we
      // always receive the correct fiber here
      var internalInstance = getInstanceFromNode(target);

      if (!internalInstance) {
        // Unmounted
        return;
      }

      !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
      restoreImpl(internalInstance.stateNode, internalInstance.type, props);
    }

    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }

    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }

    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }

    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }

      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);

      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    } // Used as a way to call batchedUpdates when we don't have a reference to
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults


    var _batchedUpdatesImpl = function (fn, bookkeeping) {
      return fn(bookkeeping);
    };

    var _interactiveUpdatesImpl = function (fn, a, b) {
      return fn(a, b);
    };

    var _flushInteractiveUpdatesImpl = function () {};

    var isBatching = false;

    function batchedUpdates(fn, bookkeeping) {
      if (isBatching) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
      }

      isBatching = true;

      try {
        return _batchedUpdatesImpl(fn, bookkeeping);
      } finally {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        isBatching = false;
        var controlledComponentsHavePendingUpdates = needsStateRestore();

        if (controlledComponentsHavePendingUpdates) {
          // If a controlled event was fired, we may need to restore the state of
          // the DOM node back to the controlled value. This is necessary when React
          // bails out of the update without touching the DOM.
          _flushInteractiveUpdatesImpl();

          restoreStateIfNeeded();
        }
      }
    }

    function interactiveUpdates(fn, a, b) {
      return _interactiveUpdatesImpl(fn, a, b);
    }

    function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
      _batchedUpdatesImpl = batchedUpdatesImpl;
      _interactiveUpdatesImpl = interactiveUpdatesImpl;
      _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
    }
    /**
     * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
     */


    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      'datetime-local': true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };

    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

      if (nodeName === 'input') {
        return !!supportedInputTypes[elem.type];
      }

      if (nodeName === 'textarea') {
        return true;
      }

      return false;
    }
    /**
     * HTML nodeType values that represent the type of the node
     */


    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
     * Gets the target node from a native browser event by accounting for
     * inconsistencies in browser DOM APIs.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {DOMEventTarget} Target node.
     */

    function getEventTarget(nativeEvent) {
      // Fallback to nativeEvent.srcElement for IE9
      // https://github.com/facebook/react/issues/12506
      var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
      // @see http://www.quirksmode.org/js/events_properties.html


      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */


    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }

      var eventName = 'on' + eventNameSuffix;
      var isSupported = eventName in document;

      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }

      return isSupported;
    }

    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }

    function getTracker(node) {
      return node._valueTracker;
    }

    function detachTracker(node) {
      node._valueTracker = null;
    }

    function getValueFromNode(node) {
      var value = '';

      if (!node) {
        return value;
      }

      if (isCheckable(node)) {
        value = node.checked ? 'true' : 'false';
      } else {
        value = node.value;
      }

      return value;
    }

    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? 'checked' : 'value';
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
      var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
      // and don't track value will cause over reporting of changes,
      // but it's better then a hard failure
      // (needed for certain tests that spyOn input values and Safari)

      if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
        return;
      }

      var get = descriptor.get,
          set = descriptor.set;
      Object.defineProperty(node, valueField, {
        configurable: true,
        get: function () {
          return get.call(this);
        },
        set: function (value) {
          currentValue = '' + value;
          set.call(this, value);
        }
      }); // We could've passed this the first time
      // but it triggers a bug in IE11 and Edge 14/15.
      // Calling defineProperty() again should be equivalent.
      // https://github.com/facebook/react/issues/11768

      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function () {
          return currentValue;
        },
        setValue: function (value) {
          currentValue = '' + value;
        },
        stopTracking: function () {
          detachTracker(node);
          delete node[valueField];
        }
      };
      return tracker;
    }

    function track(node) {
      if (getTracker(node)) {
        return;
      } // TODO: Once it's just Fiber we can move this to node._wrapperState


      node._valueTracker = trackValueOnNode(node);
    }

    function updateValueIfChanged(node) {
      if (!node) {
        return false;
      }

      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
      // that trying again will succeed

      if (!tracker) {
        return true;
      }

      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node);

      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }

      return false;
    }

    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    }; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.


    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_PLACEHOLDER_TYPE = hasSymbol ? Symbol.for('react.placeholder') : 0xead1;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }

    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;

    function getResultFromResolvedThenable(thenable) {
      return thenable._reactResult;
    }

    function refineResolvedThenable(thenable) {
      return thenable._reactStatus === Resolved ? thenable._reactResult : null;
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_ASYNC_MODE_TYPE:
          return 'AsyncMode';

        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_PLACEHOLDER_TYPE:
          return 'Placeholder';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            var renderFn = type.render;
            var functionName = renderFn.displayName || renderFn.name || '';
            return type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
        }

        if (typeof type.then === 'function') {
          var thenable = type;
          var resolvedThenable = refineResolvedThenable(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }
        }
      }

      return null;
    }

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

    function describeFiber(fiber) {
      switch (fiber.tag) {
        case IndeterminateComponent:
        case FunctionalComponent:
        case FunctionalComponentLazy:
        case ClassComponent:
        case ClassComponentLazy:
        case HostComponent:
        case Mode:
          var owner = fiber._debugOwner;
          var source = fiber._debugSource;
          var name = getComponentName(fiber.type);
          var ownerName = null;

          if (owner) {
            ownerName = getComponentName(owner.type);
          }

          return describeComponentFrame(name, source, ownerName);

        default:
          return '';
      }
    }

    function getStackByFiberInDevAndProd(workInProgress) {
      var info = '';
      var node = workInProgress;

      do {
        info += describeFiber(node);
        node = node.return;
      } while (node);

      return info;
    }

    var current = null;
    var phase = null;

    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }

        var owner = current._debugOwner;

        if (owner !== null && typeof owner !== 'undefined') {
          return getComponentName(owner.type);
        }
      }
      return null;
    }

    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return '';
        } // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.


        return getStackByFiberInDevAndProd(current);
      }
      return '';
    }

    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        phase = null;
      }
    }

    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        phase = null;
      }
    }

    function setCurrentPhase(lifeCyclePhase) {
      {
        phase = lifeCyclePhase;
      }
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var warning = warningWithoutStack$1;
    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }
    var warning$1 = warning; // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.

    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the whitelist are presumed to have this type.

    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.

    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.

    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.

    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.

    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.

    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */

    var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    /* eslint-enable max-len */

    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};

    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }

      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }

      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }

      illegalAttributeNameCache[attributeName] = true;
      {
        warning$1(false, 'Invalid attribute name: `%s`', attributeName);
      }
      return false;
    }

    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }

      if (isCustomComponentTag) {
        return false;
      }

      if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
        return true;
      }

      return false;
    }

    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }

      switch (typeof value) {
        case 'function': // $FlowIssue symbol is perfectly valid here

        case 'symbol':
          // eslint-disable-line
          return true;

        case 'boolean':
          {
            if (isCustomComponentTag) {
              return false;
            }

            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix = name.toLowerCase().slice(0, 5);
              return prefix !== 'data-' && prefix !== 'aria-';
            }
          }

        default:
          return false;
      }
    }

    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === 'undefined') {
        return true;
      }

      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }

      if (isCustomComponentTag) {
        return false;
      }

      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;

          case OVERLOADED_BOOLEAN:
            return value === false;

          case NUMERIC:
            return isNaN(value);

          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }

      return false;
    }

    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }

    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.


    var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

    ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
    // elements (not just inputs). Now that ReactDOMInput assigns to the
    // defaultValue property -- do we need this?
    'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.

    [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
      var name = _ref[0],
          attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, // attributeName
      null);
    } // attributeNamespace
    ); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).

    ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    ); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.

    ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML boolean attributes.

    ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
    // on the client side because the browsers are inconsistent. Instead we call focus().
    'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
    'itemScope'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    ); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.

    ['checked', // Note: `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`. We have special logic for handling this.
    'multiple', 'muted', 'selected'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.

    ['capture', 'download'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that must be positive numbers.

    ['cols', 'rows', 'size', 'span'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that must be numbers.

    ['rowSpan', 'start'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    );
    var CAMELIZE = /[\-\:]([a-z])/g;

    var capitalize = function (token) {
      return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML whitelist.
    // Some of these attributes can be hard to find. This list was created by
    // scrapping the MDN documentation.


    ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, null);
    } // attributeNamespace
    ); // String SVG attributes with the xlink namespace.

    ['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/1999/xlink');
    }); // String SVG attributes with the xml namespace.

    ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/XML/1998/namespace');
    }); // Special case: this attribute exists both in HTML and SVG.
    // Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
    // its React `tabIndex` name, like we do for attributes that exist only in HTML.

    properties.tabIndex = new PropertyInfoRecord('tabIndex', STRING, false, // mustUseProperty
    'tabindex', // attributeName
    null);
    /**
     * Get the value for a property on a node. Only used in DEV for SSR validation.
     * The "expected" argument is used as a hint of what the expected value is.
     * Some properties have multiple equivalent values.
     */

    function getValueForProperty(node, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          var attributeName = propertyInfo.attributeName;
          var stringValue = null;

          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);

              if (value === '') {
                return true;
              }

              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value;
              }

              if (value === '' + expected) {
                return expected;
              }

              return value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              // We had an attribute but shouldn't have had one, so read it
              // for the error message.
              return node.getAttribute(attributeName);
            }

            if (propertyInfo.type === BOOLEAN) {
              // If this was a boolean, it doesn't matter what the value is
              // the fact that we have it is the same as the expected.
              return expected;
            } // Even if this property uses a namespace we use getAttribute
            // because we assume its namespaced name is the same as our config.
            // To use getAttributeNS we need the local name which we don't have
            // in our config atm.


            stringValue = node.getAttribute(attributeName);
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === '' + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }
    /**
     * Get the value for a attribute on a node. Only used in DEV for SSR validation.
     * The third argument is used as a hint of what the expected value is. Some
     * attributes have multiple equivalent values.
     */


    function getValueForAttribute(node, name, expected) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }

        if (!node.hasAttribute(name)) {
          return expected === undefined ? undefined : null;
        }

        var value = node.getAttribute(name);

        if (value === '' + expected) {
          return expected;
        }

        return value;
      }
    }
    /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */


    function setValueForProperty(node, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);

      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }

      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
        value = null;
      } // If the prop isn't in the special list, treat it as a simple attribute.


      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;

          if (value === null) {
            node.removeAttribute(_attributeName);
          } else {
            node.setAttribute(_attributeName, '' + value);
          }
        }

        return;
      }

      var mustUseProperty = propertyInfo.mustUseProperty;

      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;

        if (value === null) {
          var type = propertyInfo.type;
          node[propertyName] = type === BOOLEAN ? false : '';
        } else {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propertyName] = value;
        }

        return;
      } // The rest are treated as attributes with special cases.


      var attributeName = propertyInfo.attributeName,
          attributeNamespace = propertyInfo.attributeNamespace;

      if (value === null) {
        node.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;
        var attributeValue = void 0;

        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
          attributeValue = '';
        } else {
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          attributeValue = '' + value;
        }

        if (attributeNamespace) {
          node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node.setAttribute(attributeName, attributeValue);
        }
      }
    } // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.


    function toString(value) {
      return '' + value;
    }

    function getToStringValue(value) {
      switch (typeof value) {
        case 'boolean':
        case 'number':
        case 'object':
        case 'string':
        case 'undefined':
          return value;

        default:
          // function, symbol are assigned as empty strings
          return '';
      }
    }

    var ReactDebugCurrentFrame$1 = null;
    var ReactControlledValuePropTypes = {
      checkPropTypes: null
    };
    {
      ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      var propTypes = {
        value: function (props, propName, componentName) {
          if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
            return null;
          }

          return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        },
        checked: function (props, propName, componentName) {
          if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
            return null;
          }

          return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }
      };
      /**
       * Provide a linked `value` attribute for controlled forms. You should not use
       * this outside of the ReactDOM controlled form components.
       */

      ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
        checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
      };
    } // Exports ReactDOM.createRoot

    var enableUserTimingAPI = true; // Experimental error-boundary API that can recover from errors within a single
    // render phase

    var enableGetDerivedStateFromCatch = false; // Suspense

    var enableSuspense = false; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

    var debugRenderPhaseSideEffects = false; // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:

    var debugRenderPhaseSideEffectsForStrictMode = true; // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.

    var replayFailedUnitOfWorkWithInvokeGuardedCallback = true; // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

    var warnAboutDeprecatedLifecycles = false; // Warn about legacy context API

    var warnAboutLegacyContextAPI = false; // Gather advanced timing metrics for Profiler subtrees.

    var enableProfilerTimer = true; // Trace which interactions trigger each commit.

    var enableSchedulerTracing = true; // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties

    var disableInputAttributeSyncing = false; // TODO: direct imports like some-package/src/* are bad. Fix me.

    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;

    function isControlled(props) {
      var usesChecked = props.type === 'checkbox' || props.type === 'radio';
      return usesChecked ? props.checked != null : props.value != null;
    }
    /**
     * Implements an <input> host component that allows setting these optional
     * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
     *
     * If `checked` or `value` are not supplied (or null/undefined), user actions
     * that affect the checked state or value will trigger updates to the element.
     *
     * If they are supplied (and not null/undefined), the rendered element will not
     * trigger updates to the element. Instead, the props must change in order for
     * the rendered element to be updated.
     *
     * The rendered element will be initialized as unchecked (or `defaultChecked`)
     * with an empty value (or `defaultValue`).
     *
     * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
     */


    function getHostProps(element, props) {
      var node = element;
      var checked = props.checked;

      var hostProps = _assign({}, props, {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: undefined,
        checked: checked != null ? checked : node._wrapperState.initialChecked
      });

      return hostProps;
    }

    function initWrapperState(element, props) {
      {
        ReactControlledValuePropTypes.checkPropTypes('input', props);

        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
          warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnCheckedDefaultChecked = true;
        }

        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
          warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnValueDefaultValue = true;
        }
      }
      var node = element;
      var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
      node._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }

    function updateChecked(element, props) {
      var node = element;
      var checked = props.checked;

      if (checked != null) {
        setValueForProperty(node, 'checked', checked, false);
      }
    }

    function updateWrapper(element, props) {
      var node = element;
      {
        var _controlled = isControlled(props);

        if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
          warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
          didWarnUncontrolledToControlled = true;
        }

        if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
          warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
          didWarnControlledToUncontrolled = true;
        }
      }
      updateChecked(element, props);
      var value = getToStringValue(props.value);
      var type = props.type;

      if (value != null) {
        if (type === 'number') {
          if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) {
            node.value = toString(value);
          }
        } else if (node.value !== toString(value)) {
          node.value = toString(value);
        }
      } else if (type === 'submit' || type === 'reset') {
        // Submit/reset inputs need the attribute removed completely to avoid
        // blank-text buttons.
        node.removeAttribute('value');
        return;
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the value attribute, React only assigns a new value
        // whenever the defaultValue React prop has changed. When not present,
        // React does nothing
        if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      } else {
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) {
          setDefaultValue(node, props.type, value);
        } else if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the checked attribute, the attribute is directly
        // controllable from the defaultValue React property. It needs to be
        // updated as new props come in.
        if (props.defaultChecked == null) {
          node.removeAttribute('checked');
        } else {
          node.defaultChecked = !!props.defaultChecked;
        }
      } else {
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) {
          node.defaultChecked = !!props.defaultChecked;
        }
      }
    }

    function postMountWrapper(element, props, isHydrating) {
      var node = element; // Do not assign value if it is already set. This prevents user text input
      // from being lost during SSR hydration.

      if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
        var type = props.type;
        var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
        // default value provided by the browser. See: #12872

        if (isButton && (props.value === undefined || props.value === null)) {
          return;
        }

        var _initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.


        if (!isHydrating) {
          if (disableInputAttributeSyncing) {
            var value = getToStringValue(props.value); // When not syncing the value attribute, the value property points
            // directly to the React prop. Only assign it if it exists.

            if (value != null) {
              // Always assign on buttons so that it is possible to assign an
              // empty string to clear button text.
              //
              // Otherwise, do not re-assign the value property if is empty. This
              // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
              // prematurely marking required inputs as invalid. Equality is compared
              // to the current value in case the browser provided value is not an
              // empty string.
              if (isButton || value !== node.value) {
                node.value = toString(value);
              }
            }
          } else {
            // When syncing the value attribute, the value property should use
            // the the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            if (_initialValue !== node.value) {
              node.value = _initialValue;
            }
          }
        }

        if (disableInputAttributeSyncing) {
          // When not syncing the value attribute, assign the value attribute
          // directly from the defaultValue React property (when present)
          var defaultValue = getToStringValue(props.defaultValue);

          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        } else {
          // Otherwise, the value attribute is synchronized to the property,
          // so we assign defaultValue to the same thing as the value property
          // assignment step above.
          node.defaultValue = _initialValue;
        }
      } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
      // this is needed to work around a chrome bug where setting defaultChecked
      // will sometimes influence the value of checked (even after detachment).
      // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
      // We need to temporarily unset name to avoid disrupting radio button groups.


      var name = node.name;

      if (name !== '') {
        node.name = '';
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the checked attribute, the checked property
        // never gets assigned. It must be manually set. We don't want
        // to do this when hydrating so that existing user input isn't
        // modified
        if (!isHydrating) {
          updateChecked(element, props);
        } // Only assign the checked attribute if it is defined. This saves
        // a DOM write when controlling the checked attribute isn't needed
        // (text inputs, submit/reset)


        if (props.hasOwnProperty('defaultChecked')) {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!props.defaultChecked;
        }
      } else {
        // When syncing the checked attribute, both the the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
      }

      if (name !== '') {
        node.name = name;
      }
    }

    function restoreControlledState(element, props) {
      var node = element;
      updateWrapper(node, props);
      updateNamedCousins(node, props);
    }

    function updateNamedCousins(rootNode, props) {
      var name = props.name;

      if (props.type === 'radio' && name != null) {
        var queryRoot = rootNode;

        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        } // If `rootNode.form` was non-null, then we could try `form.elements`,
        // but that sometimes behaves strangely in IE8. We could also try using
        // `form.getElementsByName`, but that will only return direct children
        // and won't include inputs that use the HTML5 `form=` attribute. Since
        // the input might not even be in a form. It might not even be in the
        // document. Let's just use the local `querySelectorAll` to ensure we don't
        // miss anything.


        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];

          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          } // This will throw if radio buttons rendered by different copies of React
          // and the same name are rendered into the same form (same as #1939).
          // That's probably okay; we don't support it just as we don't support
          // mixing React radio buttons with non-React ones.


          var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
          !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0; // We need update the tracked value on the named cousin since the value
          // was changed but the input saw no event or value set

          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
          // was previously checked to update will cause it to be come re-checked
          // as appropriate.

          updateWrapper(otherNode, otherProps);
        }
      }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253


    function setDefaultValue(node, type, value) {
      if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
      type !== 'number' || node.ownerDocument.activeElement !== node) {
        if (value == null) {
          node.defaultValue = toString(node._wrapperState.initialValue);
        } else if (node.defaultValue !== toString(value)) {
          node.defaultValue = toString(value);
        }
      }
    }

    var eventTypes$1 = {
      change: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        },
        dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
      }
    };

    function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
      var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
      event.type = 'change'; // Flag this event loop as needing state restore.

      enqueueStateRestore(target);
      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * For IE shims
     */


    var activeElement = null;
    var activeElementInst = null;
    /**
     * SECTION: handle `change` event
     */

    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }

    function manualDispatchChangeEvent(nativeEvent) {
      var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
      // other events and have it go through ReactBrowserEventEmitter. Since it
      // doesn't, we manually listen for the events and so we have to enqueue and
      // process the abstract event manually.
      //
      // Batching is necessary here in order to ensure that all event handlers run
      // before the next rerender (including event handlers attached to ancestor
      // elements instead of directly on the input). Without this, controlled
      // components don't work properly in conjunction with event bubbling because
      // the component is rerendered and the value reverted before all the event
      // handlers can run. See https://github.com/facebook/react/issues/708.

      batchedUpdates(runEventInBatch, event);
    }

    function runEventInBatch(event) {
      runEventsInBatch(event, false);
    }

    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance$1(targetInst);

      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }

    function getTargetInstForChangeEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_CHANGE) {
        return targetInst;
      }
    }
    /**
     * SECTION: handle `input` event
     */


    var isInputEventSupported = false;

    if (canUseDOM) {
      // IE9 claims to support the input event but fails to trigger it when
      // deleting text, so we ignore its input events.
      isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    }
    /**
     * (For IE <=9) Starts tracking propertychange events on the passed-in element
     * and override the value property so that we can distinguish user events from
     * value changes in JS.
     */


    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
     * (For IE <=9) Removes the event listeners from the currently-tracked element,
     * if any exists.
     */


    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }

      activeElement.detachEvent('onpropertychange', handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }
    /**
     * (For IE <=9) Handles a propertychange event, sending a `change` event if
     * the value of the active element has changed.
     */


    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== 'value') {
        return;
      }

      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }

    function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
      if (topLevelType === TOP_FOCUS) {
        // In IE9, propertychange fires for most input events but is buggy and
        // doesn't fire when text is deleted, but conveniently, selectionchange
        // appears to fire in all of the remaining cases so we catch those and
        // forward the event if the value has changed
        // In either case, we don't want to call the event handler if the value
        // is changed from JS so we redefine a setter for `.value` that updates
        // our activeElementValue variable, allowing us to ignore those changes
        //
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (topLevelType === TOP_BLUR) {
        stopWatchingForValueChange();
      }
    } // For IE8 and IE9.


    function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
      if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
        // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
      }
    }
    /**
     * SECTION: handle `click` event
     */


    function shouldUseClickEvent(elem) {
      // Use the `click` event to detect changes to checkbox and radio inputs.
      // This approach works across all browsers, whereas `change` does not fire
      // until `blur` in IE8.
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }

    function getTargetInstForClickEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_CLICK) {
        return getInstIfValueChanged(targetInst);
      }
    }

    function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
        return getInstIfValueChanged(targetInst);
      }
    }

    function handleControlledInputBlur(node) {
      var state = node._wrapperState;

      if (!state || !state.controlled || node.type !== 'number') {
        return;
      }

      if (!disableInputAttributeSyncing) {
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
      }
    }
    /**
     * This plugin creates an `onChange` event that normalizes change events
     * across form elements. This event fires at a time when it's possible to
     * change the element's value without seeing a flicker.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - select
     */


    var ChangeEventPlugin = {
      eventTypes: eventTypes$1,
      _isInputEventSupported: isInputEventSupported,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
        var getTargetInstFunc = void 0,
            handleEventFunc = void 0;

        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }

        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(topLevelType, targetInst);

          if (inst) {
            var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
            return event;
          }
        }

        if (handleEventFunc) {
          handleEventFunc(topLevelType, targetNode, targetInst);
        } // When blurring, set the value attribute for number inputs


        if (topLevelType === TOP_BLUR) {
          handleControlledInputBlur(targetNode);
        }
      }
    };
    /**
     * Module that is injectable into `EventPluginHub`, that specifies a
     * deterministic ordering of `EventPlugin`s. A convenient way to reason about
     * plugins, without having to package every one of them. This is better than
     * having plugins be ordered in the same order that they are injected because
     * that ordering would be influenced by the packaging order.
     * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
     * preventing default on events is convenient in `SimpleEventPlugin` handlers.
     */

    var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
    var SyntheticUIEvent = SyntheticEvent.extend({
      view: null,
      detail: null
    });
    /**
     * Translation from modifier key to the associated property in the event.
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
     */

    var modifierKeyToProp = {
      Alt: 'altKey',
      Control: 'ctrlKey',
      Meta: 'metaKey',
      Shift: 'shiftKey'
    }; // IE8 does not implement getModifierState so we simply map it to the only
    // modifier keys exposed by the event itself, does not support Lock-keys.
    // Currently, all major browsers except Chrome seems to support Lock-keys.

    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;

      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }

      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }

    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }

    var previousScreenX = 0;
    var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

    var isMovementXSet = false;
    var isMovementYSet = false;
    /**
     * @interface MouseEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticMouseEvent = SyntheticUIEvent.extend({
      screenX: null,
      screenY: null,
      clientX: null,
      clientY: null,
      pageX: null,
      pageY: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      getModifierState: getEventModifierState,
      button: null,
      buttons: null,
      relatedTarget: function (event) {
        return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
      },
      movementX: function (event) {
        if ('movementX' in event) {
          return event.movementX;
        }

        var screenX = previousScreenX;
        previousScreenX = event.screenX;

        if (!isMovementXSet) {
          isMovementXSet = true;
          return 0;
        }

        return event.type === 'mousemove' ? event.screenX - screenX : 0;
      },
      movementY: function (event) {
        if ('movementY' in event) {
          return event.movementY;
        }

        var screenY = previousScreenY;
        previousScreenY = event.screenY;

        if (!isMovementYSet) {
          isMovementYSet = true;
          return 0;
        }

        return event.type === 'mousemove' ? event.screenY - screenY : 0;
      }
    });
    /**
     * @interface PointerEvent
     * @see http://www.w3.org/TR/pointerevents/
     */

    var SyntheticPointerEvent = SyntheticMouseEvent.extend({
      pointerId: null,
      width: null,
      height: null,
      pressure: null,
      tangentialPressure: null,
      tiltX: null,
      tiltY: null,
      twist: null,
      pointerType: null,
      isPrimary: null
    });
    var eventTypes$2 = {
      mouseEnter: {
        registrationName: 'onMouseEnter',
        dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
      },
      mouseLeave: {
        registrationName: 'onMouseLeave',
        dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
      },
      pointerEnter: {
        registrationName: 'onPointerEnter',
        dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
      },
      pointerLeave: {
        registrationName: 'onPointerLeave',
        dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
      }
    };
    var EnterLeaveEventPlugin = {
      eventTypes: eventTypes$2,

      /**
       * For almost every interaction we care about, there will be both a top-level
       * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
       * we do not extract duplicate events. However, moving the mouse into the
       * browser from outside will not fire a `mouseout` event. In this case, we use
       * the `mouseover` top-level event.
       */
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
        var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

        if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
          return null;
        }

        if (!isOutEvent && !isOverEvent) {
          // Must not be a mouse or pointer in or out - ignoring.
          return null;
        }

        var win = void 0;

        if (nativeEventTarget.window === nativeEventTarget) {
          // `nativeEventTarget` is probably a window object.
          win = nativeEventTarget;
        } else {
          // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
          var doc = nativeEventTarget.ownerDocument;

          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }

        var from = void 0;
        var to = void 0;

        if (isOutEvent) {
          from = targetInst;
          var related = nativeEvent.relatedTarget || nativeEvent.toElement;
          to = related ? getClosestInstanceFromNode(related) : null;
        } else {
          // Moving to a node from outside the window.
          from = null;
          to = targetInst;
        }

        if (from === to) {
          // Nothing pertains to our managed components.
          return null;
        }

        var eventInterface = void 0,
            leaveEventType = void 0,
            enterEventType = void 0,
            eventTypePrefix = void 0;

        if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
          eventInterface = SyntheticMouseEvent;
          leaveEventType = eventTypes$2.mouseLeave;
          enterEventType = eventTypes$2.mouseEnter;
          eventTypePrefix = 'mouse';
        } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
          eventInterface = SyntheticPointerEvent;
          leaveEventType = eventTypes$2.pointerLeave;
          enterEventType = eventTypes$2.pointerEnter;
          eventTypePrefix = 'pointer';
        }

        var fromNode = from == null ? win : getNodeFromInstance$1(from);
        var toNode = to == null ? win : getNodeFromInstance$1(to);
        var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
        leave.type = eventTypePrefix + 'leave';
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
        enter.type = eventTypePrefix + 'enter';
        enter.target = toNode;
        enter.relatedTarget = fromNode;
        accumulateEnterLeaveDispatches(leave, enter, from, to);
        return [leave, enter];
      }
    };
    /*eslint-disable no-self-compare */

    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */

    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        // Added the nonzero y check to make Flow happy, but it is redundant
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }
    /**
     * Performs equality by iterating through keys on an object and returning false
     * when any key has values which are not strictly equal between the arguments.
     * Returns true when the values of all keys are strictly equal.
     */


    function shallowEqual(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }

      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);

      if (keysA.length !== keysB.length) {
        return false;
      } // Test for A's keys different from B.


      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }

      return true;
    }
    /**
     * `ReactInstanceMap` maintains a mapping from a public facing stateful
     * instance (key) and the internal representation (value). This allows public
     * methods to accept the user facing instance as an argument and map them back
     * to internal methods.
     *
     * Note that this module is currently shared and assumed to be stateless.
     * If this becomes an actual Map, that will break.
     */

    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */


    function get(key) {
      return key._reactInternalFiber;
    }

    function has(key) {
      return key._reactInternalFiber !== undefined;
    }

    function set(key, value) {
      key._reactInternalFiber = value;
    } // Don't change these two values. They're used by React Dev Tools.


    var NoEffect =
    /*              */
    0;
    var PerformedWork =
    /*         */
    1; // You can change the rest (and add more).

    var Placement =
    /*             */
    2;
    var Update =
    /*                */
    4;
    var PlacementAndUpdate =
    /*    */
    6;
    var Deletion =
    /*              */
    8;
    var ContentReset =
    /*          */
    16;
    var Callback =
    /*              */
    32;
    var DidCapture =
    /*            */
    64;
    var Ref =
    /*                   */
    128;
    var Snapshot =
    /*              */
    256; // Update & Callback & Ref & Snapshot

    var LifecycleEffectMask =
    /*   */
    420; // Union of all host effects

    var HostEffectMask =
    /*        */
    511;
    var Incomplete =
    /*            */
    512;
    var ShouldCapture =
    /*         */
    1024;
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var MOUNTING = 1;
    var MOUNTED = 2;
    var UNMOUNTED = 3;

    function isFiberMountedImpl(fiber) {
      var node = fiber;

      if (!fiber.alternate) {
        // If there is no alternate, this might be a new tree that isn't inserted
        // yet. If it is, then it will have a pending insertion effect on it.
        if ((node.effectTag & Placement) !== NoEffect) {
          return MOUNTING;
        }

        while (node.return) {
          node = node.return;

          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }
        }
      } else {
        while (node.return) {
          node = node.return;
        }
      }

      if (node.tag === HostRoot) {
        // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return MOUNTED;
      } // If we didn't hit the root, that means that we're in an disconnected tree
      // that has been unmounted.


      return UNMOUNTED;
    }

    function isFiberMounted(fiber) {
      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function isMounted(component) {
      {
        var owner = ReactCurrentOwner$1.current;

        if (owner !== null && (owner.tag === ClassComponent || owner.tag === ClassComponentLazy)) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
          instance._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get(component);

      if (!fiber) {
        return false;
      }

      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function assertIsMounted(fiber) {
      !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    }

    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;

      if (!alternate) {
        // If there is no alternate, then we only need to check if it is mounted.
        var state = isFiberMountedImpl(fiber);
        !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;

        if (state === MOUNTING) {
          return null;
        }

        return fiber;
      } // If we have two possible branches, we'll walk backwards up to the root
      // to see what path the root points to. On the way we may hit one of the
      // special cases and we'll deal with them.


      var a = fiber;
      var b = alternate;

      while (true) {
        var parentA = a.return;
        var parentB = parentA ? parentA.alternate : null;

        if (!parentA || !parentB) {
          // We're at the root.
          break;
        } // If both copies of the parent fiber point to the same child, we can
        // assume that the child is current. This happens when we bailout on low
        // priority: the bailed out fiber's child reuses the current child.


        if (parentA.child === parentB.child) {
          var child = parentA.child;

          while (child) {
            if (child === a) {
              // We've determined that A is the current branch.
              assertIsMounted(parentA);
              return fiber;
            }

            if (child === b) {
              // We've determined that B is the current branch.
              assertIsMounted(parentA);
              return alternate;
            }

            child = child.sibling;
          } // We should never have an alternate for any mounting node. So the only
          // way this could possibly happen is if this was unmounted, if at all.


          invariant(false, 'Unable to find node on an unmounted component.');
        }

        if (a.return !== b.return) {
          // The return pointer of A and the return pointer of B point to different
          // fibers. We assume that return pointers never criss-cross, so A must
          // belong to the child set of A.return, and B must belong to the child
          // set of B.return.
          a = parentA;
          b = parentB;
        } else {
          // The return pointers point to the same fiber. We'll have to use the
          // default, slow path: scan the child sets of each parent alternate to see
          // which child belongs to which set.
          //
          // Search parent A's child set
          var didFindChild = false;
          var _child = parentA.child;

          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) {
            // Search parent B's child set
            _child = parentB.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }

              _child = _child.sibling;
            }

            !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
          }
        }

        !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      } // If the root is not a host container, we're in a disconnected tree. I.e.
      // unmounted.


      !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;

      if (a.stateNode.current === a) {
        // We've determined that A is the current branch.
        return fiber;
      } // Otherwise B has to be current branch.


      return alternate;
    }

    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      } // Next we'll drill down this component to find the first HostComponent/Text.


      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      } // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      } // Next we'll drill down this component to find the first HostComponent/Text.


      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child && node.tag !== HostPortal) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      } // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function addEventBubbleListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, false);
    }

    function addEventCaptureListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, true);
    }
    /**
     * @interface Event
     * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
     */


    var SyntheticAnimationEvent = SyntheticEvent.extend({
      animationName: null,
      elapsedTime: null,
      pseudoElement: null
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/clipboard-apis/
     */

    var SyntheticClipboardEvent = SyntheticEvent.extend({
      clipboardData: function (event) {
        return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
      }
    });
    /**
     * @interface FocusEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticFocusEvent = SyntheticUIEvent.extend({
      relatedTarget: null
    });
    /**
     * `charCode` represents the actual "character code" and is safe to use with
     * `String.fromCharCode`. As such, only keys that correspond to printable
     * characters produce a valid `charCode`, the only exception to this is Enter.
     * The Tab-key is considered non-printable and does not have a `charCode`,
     * presumably because it does not produce a tab-character in browsers.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {number} Normalized `charCode` property.
     */

    function getEventCharCode(nativeEvent) {
      var charCode = void 0;
      var keyCode = nativeEvent.keyCode;

      if ('charCode' in nativeEvent) {
        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
      // report Enter as charCode 10 when ctrl is pressed.


      if (charCode === 10) {
        charCode = 13;
      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
      // Must not discard the (non-)printable Enter-key.


      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }

      return 0;
    }
    /**
     * Normalization of deprecated HTML5 `key` values
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */


    var normalizeKey = {
      Esc: 'Escape',
      Spacebar: ' ',
      Left: 'ArrowLeft',
      Up: 'ArrowUp',
      Right: 'ArrowRight',
      Down: 'ArrowDown',
      Del: 'Delete',
      Win: 'OS',
      Menu: 'ContextMenu',
      Apps: 'ContextMenu',
      Scroll: 'ScrollLock',
      MozPrintableKey: 'Unidentified'
    };
    /**
     * Translation from legacy `keyCode` to HTML5 `key`
     * Only special keys supported, all others depend on keyboard layout or browser
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */

    var translateToKey = {
      '8': 'Backspace',
      '9': 'Tab',
      '12': 'Clear',
      '13': 'Enter',
      '16': 'Shift',
      '17': 'Control',
      '18': 'Alt',
      '19': 'Pause',
      '20': 'CapsLock',
      '27': 'Escape',
      '32': ' ',
      '33': 'PageUp',
      '34': 'PageDown',
      '35': 'End',
      '36': 'Home',
      '37': 'ArrowLeft',
      '38': 'ArrowUp',
      '39': 'ArrowRight',
      '40': 'ArrowDown',
      '45': 'Insert',
      '46': 'Delete',
      '112': 'F1',
      '113': 'F2',
      '114': 'F3',
      '115': 'F4',
      '116': 'F5',
      '117': 'F6',
      '118': 'F7',
      '119': 'F8',
      '120': 'F9',
      '121': 'F10',
      '122': 'F11',
      '123': 'F12',
      '144': 'NumLock',
      '145': 'ScrollLock',
      '224': 'Meta'
    };
    /**
     * @param {object} nativeEvent Native browser event.
     * @return {string} Normalized `key` property.
     */

    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        // Normalize inconsistent values reported by browsers due to
        // implementations of a working draft specification.
        // FireFox implements `key` but returns `MozPrintableKey` for all
        // printable characters (normalized to `Unidentified`), ignore it.
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

        if (key !== 'Unidentified') {
          return key;
        }
      } // Browser does not implement `key`, polyfill as much of it as we can.


      if (nativeEvent.type === 'keypress') {
        var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
        // thus be captured by `keypress`, no other non-printable key should.

        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
      }

      if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
        // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
      }

      return '';
    }
    /**
     * @interface KeyboardEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */


    var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
      key: getEventKey,
      location: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      repeat: null,
      locale: null,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function (event) {
        // `charCode` is the result of a KeyPress event and represents the value of
        // the actual printable character.
        // KeyPress is deprecated, but its replacement is not yet final and not
        // implemented in any major browser. Only KeyPress has charCode.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }

        return 0;
      },
      keyCode: function (event) {
        // `keyCode` is the result of a KeyDown/Up event and represents the value of
        // physical keyboard key.
        // The actual meaning of the value depends on the users' keyboard layout
        // which cannot be detected. Assuming that it is a US keyboard layout
        // provides a surprisingly accurate mapping for US and European users.
        // Due to this, it is left to the user to implement at this time.
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }

        return 0;
      },
      which: function (event) {
        // `which` is an alias for either `keyCode` or `charCode` depending on the
        // type of the event.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }

        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }

        return 0;
      }
    });
    /**
     * @interface DragEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticDragEvent = SyntheticMouseEvent.extend({
      dataTransfer: null
    });
    /**
     * @interface TouchEvent
     * @see http://www.w3.org/TR/touch-events/
     */

    var SyntheticTouchEvent = SyntheticUIEvent.extend({
      touches: null,
      targetTouches: null,
      changedTouches: null,
      altKey: null,
      metaKey: null,
      ctrlKey: null,
      shiftKey: null,
      getModifierState: getEventModifierState
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
     * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
     */

    var SyntheticTransitionEvent = SyntheticEvent.extend({
      propertyName: null,
      elapsedTime: null,
      pseudoElement: null
    });
    /**
     * @interface WheelEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticWheelEvent = SyntheticMouseEvent.extend({
      deltaX: function (event) {
        return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
        'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
      },
      deltaY: function (event) {
        return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
        'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
        'wheelDelta' in event ? -event.wheelDelta : 0;
      },
      deltaZ: null,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: null
    });
    /**
     * Turns
     * ['abort', ...]
     * into
     * eventTypes = {
     *   'abort': {
     *     phasedRegistrationNames: {
     *       bubbled: 'onAbort',
     *       captured: 'onAbortCapture',
     *     },
     *     dependencies: [TOP_ABORT],
     *   },
     *   ...
     * };
     * topLevelEventsToDispatchConfig = new Map([
     *   [TOP_ABORT, { sameConfig }],
     * ]);
     */

    var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
    var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];
    var eventTypes$4 = {};
    var topLevelEventsToDispatchConfig = {};

    function addEventTypeNameToConfig(_ref, isInteractive) {
      var topEvent = _ref[0],
          event = _ref[1];
      var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
      var onEvent = 'on' + capitalizedEvent;
      var type = {
        phasedRegistrationNames: {
          bubbled: onEvent,
          captured: onEvent + 'Capture'
        },
        dependencies: [topEvent],
        isInteractive: isInteractive
      };
      eventTypes$4[event] = type;
      topLevelEventsToDispatchConfig[topEvent] = type;
    }

    interactiveEventTypeNames.forEach(function (eventTuple) {
      addEventTypeNameToConfig(eventTuple, true);
    });
    nonInteractiveEventTypeNames.forEach(function (eventTuple) {
      addEventTypeNameToConfig(eventTuple, false);
    }); // Only used in DEV for exhaustiveness validation.

    var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
    var SimpleEventPlugin = {
      eventTypes: eventTypes$4,
      isInteractiveTopLevelEventType: function (topLevelType) {
        var config = topLevelEventsToDispatchConfig[topLevelType];
        return config !== undefined && config.isInteractive === true;
      },
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];

        if (!dispatchConfig) {
          return null;
        }

        var EventConstructor = void 0;

        switch (topLevelType) {
          case TOP_KEY_PRESS:
            // Firefox creates a keypress event for function keys too. This removes
            // the unwanted keypress events. Enter is however both printable and
            // non-printable. One would expect Tab to be as well (but it isn't).
            if (getEventCharCode(nativeEvent) === 0) {
              return null;
            }

          /* falls through */

          case TOP_KEY_DOWN:
          case TOP_KEY_UP:
            EventConstructor = SyntheticKeyboardEvent;
            break;

          case TOP_BLUR:
          case TOP_FOCUS:
            EventConstructor = SyntheticFocusEvent;
            break;

          case TOP_CLICK:
            // Firefox creates a click event on right mouse clicks. This removes the
            // unwanted click events.
            if (nativeEvent.button === 2) {
              return null;
            }

          /* falls through */

          case TOP_AUX_CLICK:
          case TOP_DOUBLE_CLICK:
          case TOP_MOUSE_DOWN:
          case TOP_MOUSE_MOVE:
          case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

          /* falls through */

          case TOP_MOUSE_OUT:
          case TOP_MOUSE_OVER:
          case TOP_CONTEXT_MENU:
            EventConstructor = SyntheticMouseEvent;
            break;

          case TOP_DRAG:
          case TOP_DRAG_END:
          case TOP_DRAG_ENTER:
          case TOP_DRAG_EXIT:
          case TOP_DRAG_LEAVE:
          case TOP_DRAG_OVER:
          case TOP_DRAG_START:
          case TOP_DROP:
            EventConstructor = SyntheticDragEvent;
            break;

          case TOP_TOUCH_CANCEL:
          case TOP_TOUCH_END:
          case TOP_TOUCH_MOVE:
          case TOP_TOUCH_START:
            EventConstructor = SyntheticTouchEvent;
            break;

          case TOP_ANIMATION_END:
          case TOP_ANIMATION_ITERATION:
          case TOP_ANIMATION_START:
            EventConstructor = SyntheticAnimationEvent;
            break;

          case TOP_TRANSITION_END:
            EventConstructor = SyntheticTransitionEvent;
            break;

          case TOP_SCROLL:
            EventConstructor = SyntheticUIEvent;
            break;

          case TOP_WHEEL:
            EventConstructor = SyntheticWheelEvent;
            break;

          case TOP_COPY:
          case TOP_CUT:
          case TOP_PASTE:
            EventConstructor = SyntheticClipboardEvent;
            break;

          case TOP_GOT_POINTER_CAPTURE:
          case TOP_LOST_POINTER_CAPTURE:
          case TOP_POINTER_CANCEL:
          case TOP_POINTER_DOWN:
          case TOP_POINTER_MOVE:
          case TOP_POINTER_OUT:
          case TOP_POINTER_OVER:
          case TOP_POINTER_UP:
            EventConstructor = SyntheticPointerEvent;
            break;

          default:
            {
              if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
              }
            } // HTML Events
            // @see http://www.w3.org/TR/html5/index.html#events-0

            EventConstructor = SyntheticEvent;
            break;
        }

        var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        accumulateTwoPhaseDispatches(event);
        return event;
      }
    };
    var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;
    var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
    var callbackBookkeepingPool = [];
    /**
     * Find the deepest React component completely containing the root of the
     * passed-in instance (for use when entire React trees are nested within each
     * other). If React trees are not nested, returns null.
     */

    function findRootContainerNode(inst) {
      // TODO: It may be a good idea to cache this to prevent unnecessary DOM
      // traversal, but caching is difficult to do correctly without using a
      // mutation observer to listen for all DOM changes.
      while (inst.return) {
        inst = inst.return;
      }

      if (inst.tag !== HostRoot) {
        // This can happen if we're in a detached tree.
        return null;
      }

      return inst.stateNode.containerInfo;
    } // Used to store ancestor hierarchy in top level callback


    function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
      if (callbackBookkeepingPool.length) {
        var instance = callbackBookkeepingPool.pop();
        instance.topLevelType = topLevelType;
        instance.nativeEvent = nativeEvent;
        instance.targetInst = targetInst;
        return instance;
      }

      return {
        topLevelType: topLevelType,
        nativeEvent: nativeEvent,
        targetInst: targetInst,
        ancestors: []
      };
    }

    function releaseTopLevelCallbackBookKeeping(instance) {
      instance.topLevelType = null;
      instance.nativeEvent = null;
      instance.targetInst = null;
      instance.ancestors.length = 0;

      if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
        callbackBookkeepingPool.push(instance);
      }
    }

    function handleTopLevel(bookKeeping) {
      var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
      // It's important that we build the array of ancestors before calling any
      // event handlers, because event handlers can modify the DOM, leading to
      // inconsistencies with ReactMount's node cache. See #1105.

      var ancestor = targetInst;

      do {
        if (!ancestor) {
          bookKeeping.ancestors.push(ancestor);
          break;
        }

        var root = findRootContainerNode(ancestor);

        if (!root) {
          break;
        }

        bookKeeping.ancestors.push(ancestor);
        ancestor = getClosestInstanceFromNode(root);
      } while (ancestor);

      for (var i = 0; i < bookKeeping.ancestors.length; i++) {
        targetInst = bookKeeping.ancestors[i];
        runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
      }
    } // TODO: can we stop exporting these?


    var _enabled = true;

    function setEnabled(enabled) {
      _enabled = !!enabled;
    }

    function isEnabled() {
      return _enabled;
    }
    /**
     * Traps top-level events by using event bubbling.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */


    function trapBubbledEvent(topLevelType, element) {
      if (!element) {
        return null;
      }

      var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
      addEventBubbleListener(element, getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
      dispatch.bind(null, topLevelType));
    }
    /**
     * Traps a top-level event by using event capturing.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */


    function trapCapturedEvent(topLevelType, element) {
      if (!element) {
        return null;
      }

      var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
      addEventCaptureListener(element, getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
      dispatch.bind(null, topLevelType));
    }

    function dispatchInteractiveEvent(topLevelType, nativeEvent) {
      interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
    }

    function dispatchEvent(topLevelType, nativeEvent) {
      if (!_enabled) {
        return;
      }

      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);

      if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }

      var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

      try {
        // Event queue being processed in the same cycle allows
        // `preventDefault`.
        batchedUpdates(handleTopLevel, bookKeeping);
      } finally {
        releaseTopLevelCallbackBookKeeping(bookKeeping);
      }
    }
    /**
     * Summary of `ReactBrowserEventEmitter` event handling:
     *
     *  - Top-level delegation is used to trap most native browser events. This
     *    may only occur in the main thread and is the responsibility of
     *    ReactDOMEventListener, which is injected and can therefore support
     *    pluggable event sources. This is the only work that occurs in the main
     *    thread.
     *
     *  - We normalize and de-duplicate events to account for browser quirks. This
     *    may be done in the worker thread.
     *
     *  - Forward these native events (with the associated top-level type used to
     *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
     *    to extract any synthetic events.
     *
     *  - The `EventPluginHub` will then process each event by annotating them with
     *    "dispatches", a sequence of listeners and IDs that care about that event.
     *
     *  - The `EventPluginHub` then dispatches the events.
     *
     * Overview of React and the event system:
     *
     * +------------+    .
     * |    DOM     |    .
     * +------------+    .
     *       |           .
     *       v           .
     * +------------+    .
     * | ReactEvent |    .
     * |  Listener  |    .
     * +------------+    .                         +-----------+
     *       |           .               +--------+|SimpleEvent|
     *       |           .               |         |Plugin     |
     * +-----|------+    .               v         +-----------+
     * |     |      |    .    +--------------+                    +------------+
     * |     +-----------.--->|EventPluginHub|                    |    Event   |
     * |            |    .    |              |     +-----------+  | Propagators|
     * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
     * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
     * |            |    .    |              |     +-----------+  |  utilities |
     * |     +-----------.--->|              |                    +------------+
     * |     |      |    .    +--------------+
     * +-----|------+    .                ^        +-----------+
     *       |           .                |        |Enter/Leave|
     *       +           .                +-------+|Plugin     |
     * +-------------+   .                         +-----------+
     * | application |   .
     * |-------------|   .
     * |             |   .
     * |             |   .
     * +-------------+   .
     *                   .
     *    React Core     .  General Purpose Event Plugin System
     */


    var alreadyListeningTo = {};
    var reactTopListenersCounter = 0;
    /**
     * To ensure no conflicts with other potential React instances on the page
     */

    var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

    function getListeningForDocument(mountAt) {
      // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
      // directly.
      if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
        mountAt[topListenersIDKey] = reactTopListenersCounter++;
        alreadyListeningTo[mountAt[topListenersIDKey]] = {};
      }

      return alreadyListeningTo[mountAt[topListenersIDKey]];
    }
    /**
     * We listen for bubbled touch events on the document object.
     *
     * Firefox v8.01 (and possibly others) exhibited strange behavior when
     * mounting `onmousemove` events at some node that was not the document
     * element. The symptoms were that if your mouse is not moving over something
     * contained within that mount point (for example on the background) the
     * top-level listeners for `onmousemove` won't be called. However, if you
     * register the `mousemove` on the document object, then it will of course
     * catch all `mousemove`s. This along with iOS quirks, justifies restricting
     * top-level listeners to the document object only, at least for these
     * movement types of events and possibly all events.
     *
     * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
     *
     * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
     * they bubble to document.
     *
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {object} mountAt Container where to mount the listener
     */


    function listenTo(registrationName, mountAt) {
      var isListening = getListeningForDocument(mountAt);
      var dependencies = registrationNameDependencies[registrationName];

      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];

        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          switch (dependency) {
            case TOP_SCROLL:
              trapCapturedEvent(TOP_SCROLL, mountAt);
              break;

            case TOP_FOCUS:
            case TOP_BLUR:
              trapCapturedEvent(TOP_FOCUS, mountAt);
              trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
              // but this ensures we mark both as attached rather than just one.

              isListening[TOP_BLUR] = true;
              isListening[TOP_FOCUS] = true;
              break;

            case TOP_CANCEL:
            case TOP_CLOSE:
              if (isEventSupported(getRawEventName(dependency))) {
                trapCapturedEvent(dependency, mountAt);
              }

              break;

            case TOP_INVALID:
            case TOP_SUBMIT:
            case TOP_RESET:
              // We listen to them on the target DOM elements.
              // Some of them bubble so we don't want them to fire twice.
              break;

            default:
              // By default, listen on the top level to all non-media events.
              // Media events don't bubble so adding the listener wouldn't do anything.
              var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;

              if (!isMediaEvent) {
                trapBubbledEvent(dependency, mountAt);
              }

              break;
          }

          isListening[dependency] = true;
        }
      }
    }

    function isListeningToAllDependencies(registrationName, mountAt) {
      var isListening = getListeningForDocument(mountAt);
      var dependencies = registrationNameDependencies[registrationName];

      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];

        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          return false;
        }
      }

      return true;
    }

    function getActiveElement(doc) {
      doc = doc || (typeof document !== 'undefined' ? document : undefined);

      if (typeof doc === 'undefined') {
        return null;
      }

      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    /**
     * Given any node return the first leaf node without children.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {DOMElement|DOMTextNode}
     */


    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }

      return node;
    }
    /**
     * Get the next sibling within a container. This will walk up the
     * DOM if a node's siblings have been exhausted.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {?DOMElement|DOMTextNode}
     */


    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }

        node = node.parentNode;
      }
    }
    /**
     * Get object describing the nodes which contain characters at offset.
     *
     * @param {DOMElement|DOMTextNode} root
     * @param {number} offset
     * @return {?object}
     */


    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      var nodeStart = 0;
      var nodeEnd = 0;

      while (node) {
        if (node.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node.textContent.length;

          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node,
              offset: offset - nodeStart
            };
          }

          nodeStart = nodeEnd;
        }

        node = getLeafNode(getSiblingNode(node));
      }
    }
    /**
     * @param {DOMElement} outerNode
     * @return {?object}
     */


    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;
      var win = ownerDocument && ownerDocument.defaultView || window;
      var selection = win.getSelection && win.getSelection();

      if (!selection || selection.rangeCount === 0) {
        return null;
      }

      var anchorNode = selection.anchorNode,
          anchorOffset = selection.anchorOffset,
          focusNode = selection.focusNode,
          focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
      // up/down buttons on an <input type="number">. Anonymous divs do not seem to
      // expose properties, triggering a "Permission denied error" if any of its
      // properties are accessed. The only seemingly possible way to avoid erroring
      // is to access a property that typically works for non-anonymous divs and
      // catch any error that may otherwise arise. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

      try {
        /* eslint-disable no-unused-expressions */
        anchorNode.nodeType;
        focusNode.nodeType;
        /* eslint-enable no-unused-expressions */
      } catch (e) {
        return null;
      }

      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
     * Returns {start, end} where `start` is the character/codepoint index of
     * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
     * `end` is the index of (focusNode, focusOffset).
     *
     * Returns null if you pass in garbage input but we should probably just crash.
     *
     * Exported only for testing.
     */


    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node = outerNode;
      var parentNode = null;

      outer: while (true) {
        var next = null;

        while (true) {
          if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
            start = length + anchorOffset;
          }

          if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
            end = length + focusOffset;
          }

          if (node.nodeType === TEXT_NODE) {
            length += node.nodeValue.length;
          }

          if ((next = node.firstChild) === null) {
            break;
          } // Moving from `node` to its first child `next`.


          parentNode = node;
          node = next;
        }

        while (true) {
          if (node === outerNode) {
            // If `outerNode` has children, this is always the second time visiting
            // it. If it has no children, this is still the first loop, and the only
            // valid selection is anchorNode and focusNode both equal to this node
            // and both offsets 0, in which case we will have handled above.
            break outer;
          }

          if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
            start = length;
          }

          if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
            end = length;
          }

          if ((next = node.nextSibling) !== null) {
            break;
          }

          node = parentNode;
          parentNode = node.parentNode;
        } // Moving from `node` to its next sibling `next`.


        node = next;
      }

      if (start === -1 || end === -1) {
        // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
      }

      return {
        start: start,
        end: end
      };
    }
    /**
     * In modern non-IE browsers, we can support both forward and backward
     * selections.
     *
     * Note: IE10+ supports the Selection object, but it does not support
     * the `extend` method, which means that even in modern IE, it's not possible
     * to programmatically create a backward selection. Thus, for all IE
     * versions, we use the old IE API to create our selections.
     *
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */


    function setOffsets(node, offsets) {
      var doc = node.ownerDocument || document;
      var win = doc && doc.defaultView || window;
      var selection = win.getSelection();
      var length = node.textContent.length;
      var start = Math.min(offsets.start, length);
      var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
      // Flip backward selections, so we can set with a single range.

      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }

      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);

      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }

        var range = doc.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();

        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }

    function isTextNode(node) {
      return node && node.nodeType === TEXT_NODE;
    }

    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if ('contains' in outerNode) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }

    function isInDocument(node) {
      return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }

    function getActiveElementDeep() {
      var win = window;
      var element = getActiveElement();

      while (element instanceof win.HTMLIFrameElement) {
        // Accessing the contentDocument of a HTMLIframeElement can cause the browser
        // to throw, e.g. if it has a cross-origin src attribute
        try {
          win = element.contentDocument.defaultView;
        } catch (e) {
          return element;
        }

        element = getActiveElement(win.document);
      }

      return element;
    }
    /**
     * @ReactInputSelection: React input selection module. Based on Selection.js,
     * but modified to be suitable for react and has a couple of bug fixes (doesn't
     * assume buttons have range selections allowed).
     * Input selection module for React.
     */

    /**
     * @hasSelectionCapabilities: we get the element types that support selection
     * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
     * and `selectionEnd` rows.
     */


    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }

    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem: focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
      };
    }
    /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */


    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;

      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        } // Focusing a node can change the scroll position, which is undesirable


        var ancestors = [];
        var ancestor = priorFocusedElem;

        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }

        if (typeof priorFocusedElem.focus === 'function') {
          priorFocusedElem.focus();
        }

        for (var i = 0; i < ancestors.length; i++) {
          var info = ancestors[i];
          info.element.scrollLeft = info.left;
          info.element.scrollTop = info.top;
        }
      }
    }
    /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */


    function getSelection$1(input) {
      var selection = void 0;

      if ('selectionStart' in input) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        // Content editable or old IE textarea.
        selection = getOffsets(input);
      }

      return selection || {
        start: 0,
        end: 0
      };
    }
    /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */


    function setSelection(input, offsets) {
      var start = offsets.start,
          end = offsets.end;

      if (end === undefined) {
        end = start;
      }

      if ('selectionStart' in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }

    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    var eventTypes$3 = {
      select: {
        phasedRegistrationNames: {
          bubbled: 'onSelect',
          captured: 'onSelectCapture'
        },
        dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
      }
    };
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
     * Get an object which is a unique representation of the current selection.
     *
     * The return value will not be consistent across nodes or browsers, but
     * two identical selections on the same node will return identical objects.
     *
     * @param {DOMElement} node
     * @return {object}
     */

    function getSelection(node) {
      if ('selectionStart' in node && hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else {
        var win = node.ownerDocument && node.ownerDocument.defaultView || window;
        var selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    /**
     * Get document associated with the event target.
     *
     * @param {object} nativeEventTarget
     * @return {Document}
     */


    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
     * Poll selection to see whether it's changed.
     *
     * @param {object} nativeEvent
     * @param {object} nativeEventTarget
     * @return {?SyntheticEvent}
     */


    function constructSelectEvent(nativeEvent, nativeEventTarget) {
      // Ensure we have the right element, and that the user is not dragging a
      // selection (this matches native `select` event behavior). In HTML5, select
      // fires only on input and textarea thus if there's no focused element we
      // won't dispatch.
      var doc = getEventTargetDocument(nativeEventTarget);

      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return null;
      } // Only fire when selection has actually changed.


      var currentSelection = getSelection(activeElement$1);

      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
        syntheticEvent.type = 'select';
        syntheticEvent.target = activeElement$1;
        accumulateTwoPhaseDispatches(syntheticEvent);
        return syntheticEvent;
      }

      return null;
    }
    /**
     * This plugin creates an `onSelect` event that normalizes select events
     * across form elements.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - contentEditable
     *
     * This differs from native browser implementations in the following ways:
     * - Fires on contentEditable fields as well as inputs.
     * - Fires for collapsed selection.
     * - Fires after user input.
     */


    var SelectEventPlugin = {
      eventTypes: eventTypes$3,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
        // not extract events. See #3639.

        if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
          return null;
        }

        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

        switch (topLevelType) {
          // Track the input node that has focus.
          case TOP_FOCUS:
            if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }

            break;

          case TOP_BLUR:
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          // Don't fire the event while the user is dragging. This matches the
          // semantics of the native select event.

          case TOP_MOUSE_DOWN:
            mouseDown = true;
            break;

          case TOP_CONTEXT_MENU:
          case TOP_MOUSE_UP:
          case TOP_DRAG_END:
            mouseDown = false;
            return constructSelectEvent(nativeEvent, nativeEventTarget);
          // Chrome and IE fire non-standard event when selection is changed (and
          // sometimes when it hasn't). IE's event fires out of order with respect
          // to key and input events on deletion, so we discard it.
          //
          // Firefox doesn't support selectionchange, so check selection status
          // after each key entry. The selection changes after keydown and before
          // keyup, but we check on keydown as well in the case of holding down a
          // key, when multiple keydown events are fired but only one keyup is.
          // This is also our approach for IE handling, for the reason above.

          case TOP_SELECTION_CHANGE:
            if (skipSelectionChangeEvent) {
              break;
            }

          // falls through

          case TOP_KEY_DOWN:
          case TOP_KEY_UP:
            return constructSelectEvent(nativeEvent, nativeEventTarget);
        }

        return null;
      }
    };
    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */

    injection.injectEventPluginOrder(DOMEventPluginOrder);
    setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
    /**
     * Some important event plugins included by default (without having to require
     * them).
     */

    injection.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin,
      ChangeEventPlugin: ChangeEventPlugin,
      SelectEventPlugin: SelectEventPlugin,
      BeforeInputEventPlugin: BeforeInputEventPlugin
    });
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;

    function flattenChildren(children) {
      var content = ''; // Flatten children. We'll warn if they are invalid
      // during validateProps() which runs for hydration too.
      // Note that this would throw on non-element objects.
      // Elements are stringified (which is normally irrelevant
      // but matters for <fbt>).

      React.Children.forEach(children, function (child) {
        if (child == null) {
          return;
        }

        content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration codepath too.
      });
      return content;
    }
    /**
     * Implements an <option> host component that warns when `selected` is set.
     */


    function validateProps(element, props) {
      {
        // This mirrors the codepath above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) {
          React.Children.forEach(props.children, function (child) {
            if (child == null) {
              return;
            }

            if (typeof child === 'string' || typeof child === 'number') {
              return;
            }

            if (typeof child.type !== 'string') {
              return;
            }

            if (!didWarnInvalidChild) {
              didWarnInvalidChild = true;
              warning$1(false, 'Only strings and numbers are supported as <option> children.');
            }
          });
        } // TODO: Remove support for `selected` in <option>.


        if (props.selected != null && !didWarnSelectedSetOnOption) {
          warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
          didWarnSelectedSetOnOption = true;
        }
      }
    }

    function postMountWrapper$1(element, props) {
      // value="" should make a value attribute (#6219)
      if (props.value != null) {
        element.setAttribute('value', toString(getToStringValue(props.value)));
      }
    }

    function getHostProps$1(element, props) {
      var hostProps = _assign({
        children: undefined
      }, props);

      var content = flattenChildren(props.children);

      if (content) {
        hostProps.children = content;
      }

      return hostProps;
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var didWarnValueDefaultValue$1 = void 0;
    {
      didWarnValueDefaultValue$1 = false;
    }

    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        return '\n\nCheck the render method of `' + ownerName + '`.';
      }

      return '';
    }

    var valuePropNames = ['value', 'defaultValue'];
    /**
     * Validation function for `value` and `defaultValue`.
     */

    function checkSelectPropTypes(props) {
      ReactControlledValuePropTypes.checkPropTypes('select', props);

      for (var i = 0; i < valuePropNames.length; i++) {
        var propName = valuePropNames[i];

        if (props[propName] == null) {
          continue;
        }

        var isArray = Array.isArray(props[propName]);

        if (props.multiple && !isArray) {
          warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
        } else if (!props.multiple && isArray) {
          warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
        }
      }
    }

    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      var options = node.options;

      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};

        for (var i = 0; i < selectedValues.length; i++) {
          // Prefix to avoid chaos with special keys.
          selectedValue['$' + selectedValues[i]] = true;
        }

        for (var _i = 0; _i < options.length; _i++) {
          var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

          if (options[_i].selected !== selected) {
            options[_i].selected = selected;
          }

          if (selected && setDefaultSelected) {
            options[_i].defaultSelected = true;
          }
        }
      } else {
        // Do not set `select.value` as exact behavior isn't consistent across all
        // browsers for all cases.
        var _selectedValue = toString(getToStringValue(propValue));

        var defaultSelected = null;

        for (var _i2 = 0; _i2 < options.length; _i2++) {
          if (options[_i2].value === _selectedValue) {
            options[_i2].selected = true;

            if (setDefaultSelected) {
              options[_i2].defaultSelected = true;
            }

            return;
          }

          if (defaultSelected === null && !options[_i2].disabled) {
            defaultSelected = options[_i2];
          }
        }

        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }
    /**
     * Implements a <select> host component that allows optionally setting the
     * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
     * stringable. If `multiple` is true, the prop must be an array of stringables.
     *
     * If `value` is not supplied (or null/undefined), user actions that change the
     * selected option will trigger updates to the rendered options.
     *
     * If it is supplied (and not null/undefined), the rendered options will not
     * update in response to user actions. Instead, the `value` prop must change in
     * order for the rendered options to update.
     *
     * If `defaultValue` is provided, any options with the supplied values will be
     * selected.
     */


    function getHostProps$2(element, props) {
      return _assign({}, props, {
        value: undefined
      });
    }

    function initWrapperState$1(element, props) {
      var node = element;
      {
        checkSelectPropTypes(props);
      }
      node._wrapperState = {
        wasMultiple: !!props.multiple
      };
      {
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
          warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
          didWarnValueDefaultValue$1 = true;
        }
      }
    }

    function postMountWrapper$2(element, props) {
      var node = element;
      node.multiple = !!props.multiple;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      }
    }

    function postUpdateWrapper(element, props) {
      var node = element;
      var wasMultiple = node._wrapperState.wasMultiple;
      node._wrapperState.wasMultiple = !!props.multiple;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (wasMultiple !== !!props.multiple) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
      }
    }

    function restoreControlledState$2(element, props) {
      var node = element;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      }
    }

    var didWarnValDefaultVal = false;
    /**
     * Implements a <textarea> host component that allows setting `value`, and
     * `defaultValue`. This differs from the traditional DOM API because value is
     * usually set as PCDATA children.
     *
     * If `value` is not supplied (or null/undefined), user actions that affect the
     * value will trigger updates to the element.
     *
     * If `value` is supplied (and not null/undefined), the rendered element will
     * not trigger updates to the element. Instead, the `value` prop must change in
     * order for the rendered element to be updated.
     *
     * The rendered element will be initialized with an empty value, the prop
     * `defaultValue` if specified, or the children content (deprecated).
     */

    function getHostProps$3(element, props) {
      var node = element;
      !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0; // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.  We could add a check in setTextContent
      // to only set the value if/when the value differs from the node value (which would
      // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
      // solution. The value can be a boolean or object so that's why it's forced
      // to be a string.

      var hostProps = _assign({}, props, {
        value: undefined,
        defaultValue: undefined,
        children: toString(node._wrapperState.initialValue)
      });

      return hostProps;
    }

    function initWrapperState$2(element, props) {
      var node = element;
      {
        ReactControlledValuePropTypes.checkPropTypes('textarea', props);

        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
          warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnValDefaultVal = true;
        }
      }
      var initialValue = props.value; // Only bother fetching default value if we're going to use it

      if (initialValue == null) {
        var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.

        var children = props.children;

        if (children != null) {
          {
            warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
          }
          !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;

          if (Array.isArray(children)) {
            !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
            children = children[0];
          }

          defaultValue = children;
        }

        if (defaultValue == null) {
          defaultValue = '';
        }

        initialValue = defaultValue;
      }

      node._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }

    function updateWrapper$1(element, props) {
      var node = element;
      var value = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);

      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

        if (newValue !== node.value) {
          node.value = newValue;
        }

        if (props.defaultValue == null && node.defaultValue !== newValue) {
          node.defaultValue = newValue;
        }
      }

      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    }

    function postMountWrapper$3(element, props) {
      var node = element; // This is in postMount because we need access to the DOM node, which is not
      // available until after the component has mounted.

      var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
      // initial value. In IE10/IE11 there is a bug where the placeholder attribute
      // will populate textContent as well.
      // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

      if (textContent === node._wrapperState.initialValue) {
        node.value = textContent;
      }
    }

    function restoreControlledState$3(element, props) {
      // DOM component is still mounted; update
      updateWrapper$1(element, props);
    }

    var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
      html: HTML_NAMESPACE$1,
      mathml: MATH_NAMESPACE,
      svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.

    function getIntrinsicNamespace(type) {
      switch (type) {
        case 'svg':
          return SVG_NAMESPACE;

        case 'math':
          return MATH_NAMESPACE;

        default:
          return HTML_NAMESPACE$1;
      }
    }

    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
        // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
      }

      if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
        // We're leaving SVG.
        return HTML_NAMESPACE$1;
      } // By default, pass namespace below.


      return parentNamespace;
    }
    /* globals MSApp */

    /**
     * Create a function which has 'unsafe' privileges (required by windows8 apps)
     */


    var createMicrosoftUnsafeLocalFunction = function (func) {
      if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
        return function (arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function () {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    }; // SVG temp container for IE lacking innerHTML


    var reusableSVGContainer = void 0;
    /**
     * Set the innerHTML property of a node
     *
     * @param {DOMElement} node
     * @param {string} html
     * @internal
     */

    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
        reusableSVGContainer = reusableSVGContainer || document.createElement('div');
        reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
        var svgNode = reusableSVGContainer.firstChild;

        while (node.firstChild) {
          node.removeChild(node.firstChild);
        }

        while (svgNode.firstChild) {
          node.appendChild(svgNode.firstChild);
        }
      } else {
        node.innerHTML = html;
      }
    });
    /**
     * Set the textContent property of a node. For text updates, it's faster
     * to set the `nodeValue` of the Text node directly instead of using
     * `.textContent` which will remove the existing node and create a new one.
     *
     * @param {DOMElement} node
     * @param {string} text
     * @internal
     */

    var setTextContent = function (node, text) {
      if (text) {
        var firstChild = node.firstChild;

        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }

      node.textContent = text;
    };
    /**
     * CSS properties which accept numbers but are not in units of "px".
     */


    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    /**
     * @param {string} prefix vendor-specific prefix, eg: Webkit
     * @param {string} key style name, eg: transitionDuration
     * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
     * WebkitTransitionDuration
     */

    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
     * Support style names that may come passed in prefixed by adding permutations
     * of vendor prefixes.
     */


    var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.

    Object.keys(isUnitlessNumber).forEach(function (prop) {
      prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });
    /**
     * Convert a value into the proper css writable value. The style name `name`
     * should be logical (no hyphens), as specified
     * in `CSSProperty.isUnitlessNumber`.
     *
     * @param {string} name CSS property name such as `topMargin`.
     * @param {*} value CSS property value such as `10px`.
     * @return {string} Normalized style value with dimensions applied.
     */

    function dangerousStyleValue(name, value, isCustomProperty) {
      // Note that we've removed escapeTextForBrowser() calls here since the
      // whole string will be escaped when the attribute is injected into
      // the markup. If you provide unsafe user data here they can inject
      // arbitrary CSS which may be problematic (I couldn't repro this):
      // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
      // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
      // This is not an XSS hole but instead a potential CSS injection issue
      // which has lead to a greater discussion about how we're going to
      // trust URLs moving forward. See #2115901
      var isEmpty = value == null || typeof value === 'boolean' || value === '';

      if (isEmpty) {
        return '';
      }

      if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
      }

      return ('' + value).trim();
    }

    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
     * Hyphenates a camelcased CSS property name, for example:
     *
     *   > hyphenateStyleName('backgroundColor')
     *   < "background-color"
     *   > hyphenateStyleName('MozTransition')
     *   < "-moz-transition"
     *   > hyphenateStyleName('msTransition')
     *   < "-ms-transition"
     *
     * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
     * is converted to `-ms-`.
     */

    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }

    var warnValidStyle = function () {};

    {
      // 'msTransform' is correct, but the other prefixes should be capitalized
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;

      var camelize = function (string) {
        return string.replace(hyphenPattern, function (_, character) {
          return character.toUpperCase();
        });
      };

      var warnHyphenatedStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
        // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
      };

      var warnBadVendoredStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
      };

      var warnStyleValueWithSemicolon = function (name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }

        warnedStyleValues[value] = true;
        warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
      };

      var warnStyleValueIsNaN = function (name, value) {
        if (warnedForNaNValue) {
          return;
        }

        warnedForNaNValue = true;
        warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
      };

      var warnStyleValueIsInfinity = function (name, value) {
        if (warnedForInfinityValue) {
          return;
        }

        warnedForInfinityValue = true;
        warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
      };

      warnValidStyle = function (name, value) {
        if (name.indexOf('-') > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }

        if (typeof value === 'number') {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    /**
     * Operations for dealing with CSS properties.
     */

    /**
     * This creates a string that is expected to be equivalent to the style
     * attribute generated by server-side rendering. It by-passes warnings and
     * security checks so it's not safe to use this value for anything other than
     * comparison. It is only used in DEV for SSR validation.
     */

    function createDangerousStringForStyles(styles) {
      {
        var serialized = '';
        var delimiter = '';

        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }

          var styleValue = styles[styleName];

          if (styleValue != null) {
            var isCustomProperty = styleName.indexOf('--') === 0;
            serialized += delimiter + hyphenateStyleName(styleName) + ':';
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
            delimiter = ';';
          }
        }

        return serialized || null;
      }
    }
    /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     */


    function setValueForStyles(node, styles) {
      var style = node.style;

      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }

        var isCustomProperty = styleName.indexOf('--') === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle$1(styleName, styles[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

        if (styleName === 'float') {
          styleName = 'cssFloat';
        }

        if (isCustomProperty) {
          style.setProperty(styleName, styleValue);
        } else {
          style[styleName] = styleValue;
        }
      }
    } // For HTML, certain tags should omit their close tag. We keep a whitelist for
    // those special-case tags.


    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

    }; // For HTML, certain tags cannot have children. This has the same purpose as
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.

    var voidElementTags = _assign({
      menuitem: true
    }, omittedCloseTags); // TODO: We can remove this if we add invariantWithStack()
    // or add stack by default to invariants where possible.


    var HTML$1 = '__html';
    var ReactDebugCurrentFrame$2 = null;
    {
      ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
    }

    function assertValidProps(tag, props) {
      if (!props) {
        return;
      } // Note the use of `==` which checks for null or undefined.


      if (voidElementTags[tag]) {
        !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
      }

      if (props.dangerouslySetInnerHTML != null) {
        !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
        !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
      }

      {
        !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
      }
      !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
    }

    function isCustomComponent(tagName, props) {
      if (tagName.indexOf('-') === -1) {
        return typeof props.is === 'string';
      }

      switch (tagName) {
        // These are reserved SVG and MathML elements.
        // We don't mind this whitelist too much because we expect it to never grow.
        // The alternative is to track the namespace in a few places which is convoluted.
        // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
          return false;

        default:
          return true;
      }
    } // When adding attributes to the HTML or SVG whitelist, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.


    var possibleStandardNames = {
      // HTML
      accept: 'accept',
      acceptcharset: 'acceptCharset',
      'accept-charset': 'acceptCharset',
      accesskey: 'accessKey',
      action: 'action',
      allowfullscreen: 'allowFullScreen',
      alt: 'alt',
      as: 'as',
      async: 'async',
      autocapitalize: 'autoCapitalize',
      autocomplete: 'autoComplete',
      autocorrect: 'autoCorrect',
      autofocus: 'autoFocus',
      autoplay: 'autoPlay',
      autosave: 'autoSave',
      capture: 'capture',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing',
      challenge: 'challenge',
      charset: 'charSet',
      checked: 'checked',
      children: 'children',
      cite: 'cite',
      class: 'className',
      classid: 'classID',
      classname: 'className',
      cols: 'cols',
      colspan: 'colSpan',
      content: 'content',
      contenteditable: 'contentEditable',
      contextmenu: 'contextMenu',
      controls: 'controls',
      controlslist: 'controlsList',
      coords: 'coords',
      crossorigin: 'crossOrigin',
      dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
      data: 'data',
      datetime: 'dateTime',
      default: 'default',
      defaultchecked: 'defaultChecked',
      defaultvalue: 'defaultValue',
      defer: 'defer',
      dir: 'dir',
      disabled: 'disabled',
      download: 'download',
      draggable: 'draggable',
      enctype: 'encType',
      for: 'htmlFor',
      form: 'form',
      formmethod: 'formMethod',
      formaction: 'formAction',
      formenctype: 'formEncType',
      formnovalidate: 'formNoValidate',
      formtarget: 'formTarget',
      frameborder: 'frameBorder',
      headers: 'headers',
      height: 'height',
      hidden: 'hidden',
      high: 'high',
      href: 'href',
      hreflang: 'hrefLang',
      htmlfor: 'htmlFor',
      httpequiv: 'httpEquiv',
      'http-equiv': 'httpEquiv',
      icon: 'icon',
      id: 'id',
      innerhtml: 'innerHTML',
      inputmode: 'inputMode',
      integrity: 'integrity',
      is: 'is',
      itemid: 'itemID',
      itemprop: 'itemProp',
      itemref: 'itemRef',
      itemscope: 'itemScope',
      itemtype: 'itemType',
      keyparams: 'keyParams',
      keytype: 'keyType',
      kind: 'kind',
      label: 'label',
      lang: 'lang',
      list: 'list',
      loop: 'loop',
      low: 'low',
      manifest: 'manifest',
      marginwidth: 'marginWidth',
      marginheight: 'marginHeight',
      max: 'max',
      maxlength: 'maxLength',
      media: 'media',
      mediagroup: 'mediaGroup',
      method: 'method',
      min: 'min',
      minlength: 'minLength',
      multiple: 'multiple',
      muted: 'muted',
      name: 'name',
      nomodule: 'noModule',
      nonce: 'nonce',
      novalidate: 'noValidate',
      open: 'open',
      optimum: 'optimum',
      pattern: 'pattern',
      placeholder: 'placeholder',
      playsinline: 'playsInline',
      poster: 'poster',
      preload: 'preload',
      profile: 'profile',
      radiogroup: 'radioGroup',
      readonly: 'readOnly',
      referrerpolicy: 'referrerPolicy',
      rel: 'rel',
      required: 'required',
      reversed: 'reversed',
      role: 'role',
      rows: 'rows',
      rowspan: 'rowSpan',
      sandbox: 'sandbox',
      scope: 'scope',
      scoped: 'scoped',
      scrolling: 'scrolling',
      seamless: 'seamless',
      selected: 'selected',
      shape: 'shape',
      size: 'size',
      sizes: 'sizes',
      span: 'span',
      spellcheck: 'spellCheck',
      src: 'src',
      srcdoc: 'srcDoc',
      srclang: 'srcLang',
      srcset: 'srcSet',
      start: 'start',
      step: 'step',
      style: 'style',
      summary: 'summary',
      tabindex: 'tabIndex',
      target: 'target',
      title: 'title',
      type: 'type',
      usemap: 'useMap',
      value: 'value',
      width: 'width',
      wmode: 'wmode',
      wrap: 'wrap',
      // SVG
      about: 'about',
      accentheight: 'accentHeight',
      'accent-height': 'accentHeight',
      accumulate: 'accumulate',
      additive: 'additive',
      alignmentbaseline: 'alignmentBaseline',
      'alignment-baseline': 'alignmentBaseline',
      allowreorder: 'allowReorder',
      alphabetic: 'alphabetic',
      amplitude: 'amplitude',
      arabicform: 'arabicForm',
      'arabic-form': 'arabicForm',
      ascent: 'ascent',
      attributename: 'attributeName',
      attributetype: 'attributeType',
      autoreverse: 'autoReverse',
      azimuth: 'azimuth',
      basefrequency: 'baseFrequency',
      baselineshift: 'baselineShift',
      'baseline-shift': 'baselineShift',
      baseprofile: 'baseProfile',
      bbox: 'bbox',
      begin: 'begin',
      bias: 'bias',
      by: 'by',
      calcmode: 'calcMode',
      capheight: 'capHeight',
      'cap-height': 'capHeight',
      clip: 'clip',
      clippath: 'clipPath',
      'clip-path': 'clipPath',
      clippathunits: 'clipPathUnits',
      cliprule: 'clipRule',
      'clip-rule': 'clipRule',
      color: 'color',
      colorinterpolation: 'colorInterpolation',
      'color-interpolation': 'colorInterpolation',
      colorinterpolationfilters: 'colorInterpolationFilters',
      'color-interpolation-filters': 'colorInterpolationFilters',
      colorprofile: 'colorProfile',
      'color-profile': 'colorProfile',
      colorrendering: 'colorRendering',
      'color-rendering': 'colorRendering',
      contentscripttype: 'contentScriptType',
      contentstyletype: 'contentStyleType',
      cursor: 'cursor',
      cx: 'cx',
      cy: 'cy',
      d: 'd',
      datatype: 'datatype',
      decelerate: 'decelerate',
      descent: 'descent',
      diffuseconstant: 'diffuseConstant',
      direction: 'direction',
      display: 'display',
      divisor: 'divisor',
      dominantbaseline: 'dominantBaseline',
      'dominant-baseline': 'dominantBaseline',
      dur: 'dur',
      dx: 'dx',
      dy: 'dy',
      edgemode: 'edgeMode',
      elevation: 'elevation',
      enablebackground: 'enableBackground',
      'enable-background': 'enableBackground',
      end: 'end',
      exponent: 'exponent',
      externalresourcesrequired: 'externalResourcesRequired',
      fill: 'fill',
      fillopacity: 'fillOpacity',
      'fill-opacity': 'fillOpacity',
      fillrule: 'fillRule',
      'fill-rule': 'fillRule',
      filter: 'filter',
      filterres: 'filterRes',
      filterunits: 'filterUnits',
      floodopacity: 'floodOpacity',
      'flood-opacity': 'floodOpacity',
      floodcolor: 'floodColor',
      'flood-color': 'floodColor',
      focusable: 'focusable',
      fontfamily: 'fontFamily',
      'font-family': 'fontFamily',
      fontsize: 'fontSize',
      'font-size': 'fontSize',
      fontsizeadjust: 'fontSizeAdjust',
      'font-size-adjust': 'fontSizeAdjust',
      fontstretch: 'fontStretch',
      'font-stretch': 'fontStretch',
      fontstyle: 'fontStyle',
      'font-style': 'fontStyle',
      fontvariant: 'fontVariant',
      'font-variant': 'fontVariant',
      fontweight: 'fontWeight',
      'font-weight': 'fontWeight',
      format: 'format',
      from: 'from',
      fx: 'fx',
      fy: 'fy',
      g1: 'g1',
      g2: 'g2',
      glyphname: 'glyphName',
      'glyph-name': 'glyphName',
      glyphorientationhorizontal: 'glyphOrientationHorizontal',
      'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
      glyphorientationvertical: 'glyphOrientationVertical',
      'glyph-orientation-vertical': 'glyphOrientationVertical',
      glyphref: 'glyphRef',
      gradienttransform: 'gradientTransform',
      gradientunits: 'gradientUnits',
      hanging: 'hanging',
      horizadvx: 'horizAdvX',
      'horiz-adv-x': 'horizAdvX',
      horizoriginx: 'horizOriginX',
      'horiz-origin-x': 'horizOriginX',
      ideographic: 'ideographic',
      imagerendering: 'imageRendering',
      'image-rendering': 'imageRendering',
      in2: 'in2',
      in: 'in',
      inlist: 'inlist',
      intercept: 'intercept',
      k1: 'k1',
      k2: 'k2',
      k3: 'k3',
      k4: 'k4',
      k: 'k',
      kernelmatrix: 'kernelMatrix',
      kernelunitlength: 'kernelUnitLength',
      kerning: 'kerning',
      keypoints: 'keyPoints',
      keysplines: 'keySplines',
      keytimes: 'keyTimes',
      lengthadjust: 'lengthAdjust',
      letterspacing: 'letterSpacing',
      'letter-spacing': 'letterSpacing',
      lightingcolor: 'lightingColor',
      'lighting-color': 'lightingColor',
      limitingconeangle: 'limitingConeAngle',
      local: 'local',
      markerend: 'markerEnd',
      'marker-end': 'markerEnd',
      markerheight: 'markerHeight',
      markermid: 'markerMid',
      'marker-mid': 'markerMid',
      markerstart: 'markerStart',
      'marker-start': 'markerStart',
      markerunits: 'markerUnits',
      markerwidth: 'markerWidth',
      mask: 'mask',
      maskcontentunits: 'maskContentUnits',
      maskunits: 'maskUnits',
      mathematical: 'mathematical',
      mode: 'mode',
      numoctaves: 'numOctaves',
      offset: 'offset',
      opacity: 'opacity',
      operator: 'operator',
      order: 'order',
      orient: 'orient',
      orientation: 'orientation',
      origin: 'origin',
      overflow: 'overflow',
      overlineposition: 'overlinePosition',
      'overline-position': 'overlinePosition',
      overlinethickness: 'overlineThickness',
      'overline-thickness': 'overlineThickness',
      paintorder: 'paintOrder',
      'paint-order': 'paintOrder',
      panose1: 'panose1',
      'panose-1': 'panose1',
      pathlength: 'pathLength',
      patterncontentunits: 'patternContentUnits',
      patterntransform: 'patternTransform',
      patternunits: 'patternUnits',
      pointerevents: 'pointerEvents',
      'pointer-events': 'pointerEvents',
      points: 'points',
      pointsatx: 'pointsAtX',
      pointsaty: 'pointsAtY',
      pointsatz: 'pointsAtZ',
      prefix: 'prefix',
      preservealpha: 'preserveAlpha',
      preserveaspectratio: 'preserveAspectRatio',
      primitiveunits: 'primitiveUnits',
      property: 'property',
      r: 'r',
      radius: 'radius',
      refx: 'refX',
      refy: 'refY',
      renderingintent: 'renderingIntent',
      'rendering-intent': 'renderingIntent',
      repeatcount: 'repeatCount',
      repeatdur: 'repeatDur',
      requiredextensions: 'requiredExtensions',
      requiredfeatures: 'requiredFeatures',
      resource: 'resource',
      restart: 'restart',
      result: 'result',
      results: 'results',
      rotate: 'rotate',
      rx: 'rx',
      ry: 'ry',
      scale: 'scale',
      security: 'security',
      seed: 'seed',
      shaperendering: 'shapeRendering',
      'shape-rendering': 'shapeRendering',
      slope: 'slope',
      spacing: 'spacing',
      specularconstant: 'specularConstant',
      specularexponent: 'specularExponent',
      speed: 'speed',
      spreadmethod: 'spreadMethod',
      startoffset: 'startOffset',
      stddeviation: 'stdDeviation',
      stemh: 'stemh',
      stemv: 'stemv',
      stitchtiles: 'stitchTiles',
      stopcolor: 'stopColor',
      'stop-color': 'stopColor',
      stopopacity: 'stopOpacity',
      'stop-opacity': 'stopOpacity',
      strikethroughposition: 'strikethroughPosition',
      'strikethrough-position': 'strikethroughPosition',
      strikethroughthickness: 'strikethroughThickness',
      'strikethrough-thickness': 'strikethroughThickness',
      string: 'string',
      stroke: 'stroke',
      strokedasharray: 'strokeDasharray',
      'stroke-dasharray': 'strokeDasharray',
      strokedashoffset: 'strokeDashoffset',
      'stroke-dashoffset': 'strokeDashoffset',
      strokelinecap: 'strokeLinecap',
      'stroke-linecap': 'strokeLinecap',
      strokelinejoin: 'strokeLinejoin',
      'stroke-linejoin': 'strokeLinejoin',
      strokemiterlimit: 'strokeMiterlimit',
      'stroke-miterlimit': 'strokeMiterlimit',
      strokewidth: 'strokeWidth',
      'stroke-width': 'strokeWidth',
      strokeopacity: 'strokeOpacity',
      'stroke-opacity': 'strokeOpacity',
      suppresscontenteditablewarning: 'suppressContentEditableWarning',
      suppresshydrationwarning: 'suppressHydrationWarning',
      surfacescale: 'surfaceScale',
      systemlanguage: 'systemLanguage',
      tablevalues: 'tableValues',
      targetx: 'targetX',
      targety: 'targetY',
      textanchor: 'textAnchor',
      'text-anchor': 'textAnchor',
      textdecoration: 'textDecoration',
      'text-decoration': 'textDecoration',
      textlength: 'textLength',
      textrendering: 'textRendering',
      'text-rendering': 'textRendering',
      to: 'to',
      transform: 'transform',
      typeof: 'typeof',
      u1: 'u1',
      u2: 'u2',
      underlineposition: 'underlinePosition',
      'underline-position': 'underlinePosition',
      underlinethickness: 'underlineThickness',
      'underline-thickness': 'underlineThickness',
      unicode: 'unicode',
      unicodebidi: 'unicodeBidi',
      'unicode-bidi': 'unicodeBidi',
      unicoderange: 'unicodeRange',
      'unicode-range': 'unicodeRange',
      unitsperem: 'unitsPerEm',
      'units-per-em': 'unitsPerEm',
      unselectable: 'unselectable',
      valphabetic: 'vAlphabetic',
      'v-alphabetic': 'vAlphabetic',
      values: 'values',
      vectoreffect: 'vectorEffect',
      'vector-effect': 'vectorEffect',
      version: 'version',
      vertadvy: 'vertAdvY',
      'vert-adv-y': 'vertAdvY',
      vertoriginx: 'vertOriginX',
      'vert-origin-x': 'vertOriginX',
      vertoriginy: 'vertOriginY',
      'vert-origin-y': 'vertOriginY',
      vhanging: 'vHanging',
      'v-hanging': 'vHanging',
      videographic: 'vIdeographic',
      'v-ideographic': 'vIdeographic',
      viewbox: 'viewBox',
      viewtarget: 'viewTarget',
      visibility: 'visibility',
      vmathematical: 'vMathematical',
      'v-mathematical': 'vMathematical',
      vocab: 'vocab',
      widths: 'widths',
      wordspacing: 'wordSpacing',
      'word-spacing': 'wordSpacing',
      writingmode: 'writingMode',
      'writing-mode': 'writingMode',
      x1: 'x1',
      x2: 'x2',
      x: 'x',
      xchannelselector: 'xChannelSelector',
      xheight: 'xHeight',
      'x-height': 'xHeight',
      xlinkactuate: 'xlinkActuate',
      'xlink:actuate': 'xlinkActuate',
      xlinkarcrole: 'xlinkArcrole',
      'xlink:arcrole': 'xlinkArcrole',
      xlinkhref: 'xlinkHref',
      'xlink:href': 'xlinkHref',
      xlinkrole: 'xlinkRole',
      'xlink:role': 'xlinkRole',
      xlinkshow: 'xlinkShow',
      'xlink:show': 'xlinkShow',
      xlinktitle: 'xlinkTitle',
      'xlink:title': 'xlinkTitle',
      xlinktype: 'xlinkType',
      'xlink:type': 'xlinkType',
      xmlbase: 'xmlBase',
      'xml:base': 'xmlBase',
      xmllang: 'xmlLang',
      'xml:lang': 'xmlLang',
      xmlns: 'xmlns',
      'xml:space': 'xmlSpace',
      xmlnsxlink: 'xmlnsXlink',
      'xmlns:xlink': 'xmlnsXlink',
      xmlspace: 'xmlSpace',
      y1: 'y1',
      y2: 'y2',
      y: 'y',
      ychannelselector: 'yChannelSelector',
      z: 'z',
      zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
      'aria-current': 0,
      // state
      'aria-details': 0,
      'aria-disabled': 0,
      // state
      'aria-hidden': 0,
      // state
      'aria-invalid': 0,
      // state
      'aria-keyshortcuts': 0,
      'aria-label': 0,
      'aria-roledescription': 0,
      // Widget Attributes
      'aria-autocomplete': 0,
      'aria-checked': 0,
      'aria-expanded': 0,
      'aria-haspopup': 0,
      'aria-level': 0,
      'aria-modal': 0,
      'aria-multiline': 0,
      'aria-multiselectable': 0,
      'aria-orientation': 0,
      'aria-placeholder': 0,
      'aria-pressed': 0,
      'aria-readonly': 0,
      'aria-required': 0,
      'aria-selected': 0,
      'aria-sort': 0,
      'aria-valuemax': 0,
      'aria-valuemin': 0,
      'aria-valuenow': 0,
      'aria-valuetext': 0,
      // Live Region Attributes
      'aria-atomic': 0,
      'aria-busy': 0,
      'aria-live': 0,
      'aria-relevant': 0,
      // Drag-and-Drop Attributes
      'aria-dropeffect': 0,
      'aria-grabbed': 0,
      // Relationship Attributes
      'aria-activedescendant': 0,
      'aria-colcount': 0,
      'aria-colindex': 0,
      'aria-colspan': 0,
      'aria-controls': 0,
      'aria-describedby': 0,
      'aria-errormessage': 0,
      'aria-flowto': 0,
      'aria-labelledby': 0,
      'aria-owns': 0,
      'aria-posinset': 0,
      'aria-rowcount': 0,
      'aria-rowindex': 0,
      'aria-rowspan': 0,
      'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

    function validateProperty(tagName, name) {
      if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
        return true;
      }

      if (rARIACamel.test(name)) {
        var ariaName = 'aria-' + name.slice(4).toLowerCase();
        var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.

        if (correctName == null) {
          warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
          warnedProperties[name] = true;
          return true;
        } // aria-* attributes should be lowercase; suggest the lowercase version.


        if (name !== correctName) {
          warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
          warnedProperties[name] = true;
          return true;
        }
      }

      if (rARIA.test(name)) {
        var lowerCasedName = name.toLowerCase();
        var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.

        if (standardName == null) {
          warnedProperties[name] = true;
          return false;
        } // aria-* attributes should be lowercase; suggest the lowercase version.


        if (name !== standardName) {
          warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
          warnedProperties[name] = true;
          return true;
        }
      }

      return true;
    }

    function warnInvalidARIAProps(type, props) {
      var invalidProps = [];

      for (var key in props) {
        var isValid = validateProperty(type, key);

        if (!isValid) {
          invalidProps.push(key);
        }
      }

      var unknownPropString = invalidProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (invalidProps.length === 1) {
        warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      } else if (invalidProps.length > 1) {
        warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      }
    }

    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }

      warnInvalidARIAProps(type, props);
    }

    var didWarnValueNull = false;

    function validateProperties$1(type, props) {
      if (type !== 'input' && type !== 'textarea' && type !== 'select') {
        return;
      }

      if (props != null && props.value === null && !didWarnValueNull) {
        didWarnValueNull = true;

        if (type === 'select' && props.multiple) {
          warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
        } else {
          warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
        }
      }
    }

    var validateProperty$1 = function () {};

    {
      var warnedProperties$1 = {};
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
      var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

      validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }

        var lowerCasedName = name.toLowerCase();

        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
          warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
          warnedProperties$1[name] = true;
          return true;
        } // We can't rely on the event system being injected on the server.


        if (canUseEventSystem) {
          if (registrationNameModules.hasOwnProperty(name)) {
            return true;
          }

          var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

          if (registrationName != null) {
            warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }

          if (EVENT_NAME_REGEX.test(name)) {
            warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          // If no event plugins have been injected, we are in a server environment.
          // So we can't tell if the event name is correct for sure, but we can filter
          // out known bad ones like `onclick`. We can't suggest a specific replacement though.
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
          }

          warnedProperties$1[name] = true;
          return true;
        } // Let the ARIA attribute hook validate ARIA attributes


        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }

        if (lowerCasedName === 'innerhtml') {
          warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'aria') {
          warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
          warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'number' && isNaN(value)) {
          warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
          warnedProperties$1[name] = true;
          return true;
        }

        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];

          if (standardName !== name) {
            warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          // Unknown attributes should have lowercase casing since that's how they
          // will be cased anyway with server rendering.
          warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }

          warnedProperties$1[name] = true;
          return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props


        if (isReserved) {
          return true;
        } // Warn when a known attribute is a bad type


        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop


        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }

        return true;
      };
    }

    var warnUnknownProperties = function (type, props, canUseEventSystem) {
      var unknownProps = [];

      for (var key in props) {
        var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

        if (!isValid) {
          unknownProps.push(key);
        }
      }

      var unknownPropString = unknownProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (unknownProps.length === 1) {
        warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      } else if (unknownProps.length > 1) {
        warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      }
    };

    function validateProperties$2(type, props, canUseEventSystem) {
      if (isCustomComponent(type, props)) {
        return;
      }

      warnUnknownProperties(type, props, canUseEventSystem);
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var didWarnInvalidHydration = false;
    var didWarnShadyDOM = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML = '__html';
    var HTML_NAMESPACE = Namespaces.html;
    var warnedUnknownTags = void 0;
    var suppressHydrationWarning = void 0;
    var validatePropertiesInDevelopment = void 0;
    var warnForTextDifference = void 0;
    var warnForPropDifference = void 0;
    var warnForExtraAttributes = void 0;
    var warnForInvalidEventListener = void 0;
    var canDiffStyleForHydrationWarning = void 0;
    var normalizeMarkupForTextOrAttribute = void 0;
    var normalizeHTML = void 0;
    {
      warnedUnknownTags = {
        // Chrome is the only major browser not shipping <time>. But as of July
        // 2017 it intends to ship it due to widespread usage. We intentionally
        // *don't* warn for <time> even if it's unrecognized by Chrome because
        // it soon will be, and many apps have been using it anyway.
        time: true,
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      };

      validatePropertiesInDevelopment = function (type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props,
        /* canUseEventSystem */
        true);
      }; // IE 11 parses & normalizes the style attribute as opposed to other
      // browsers. It adds spaces and sorts the properties in some
      // non-alphabetical order. Handling that would require sorting CSS
      // properties in the client & server versions or applying
      // `expectedStyle` to a temporary DOM node to read its `style` attribute
      // normalized. Since it only affects IE, we're skipping style warnings
      // in that browser completely in favor of doing all that work.
      // See https://github.com/facebook/react/issues/11807


      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
      // It also can turn \u0000 into \uFFFD inside attributes.
      // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
      // If we have a mismatch, it might be caused by that.
      // We will still patch up in this case but not fire the warning.

      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

      normalizeMarkupForTextOrAttribute = function (markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
      };

      warnForTextDifference = function (serverText, clientText) {
        if (didWarnInvalidHydration) {
          return;
        }

        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

        if (normalizedServerText === normalizedClientText) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      };

      warnForPropDifference = function (propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }

        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

        if (normalizedServerValue === normalizedClientValue) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };

      warnForExtraAttributes = function (attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function (name) {
          names.push(name);
        });
        warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
      };

      warnForInvalidEventListener = function (registrationName, listener) {
        if (listener === false) {
          warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
        } else {
          warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
        }
      }; // Parse the HTML and read it back to normalize the HTML string so that it
      // can be used for comparison.


      normalizeHTML = function (parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }

    function ensureListeningTo(rootContainerElement, registrationName) {
      var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
      var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
      listenTo(registrationName, doc);
    }

    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }

    function noop() {}

    function trapClickOnNonInteractiveElement(node) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
      // Just set it using the onclick property so that we don't have to manage any
      // bookkeeping for it. Not sure if we need to clear it when the listener is
      // removed.
      // TODO: Only do this for the relevant Safaris maybe?
      node.onclick = noop;
    }

    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }

        var nextProp = nextProps[propKey];

        if (propKey === STYLE) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          } // Relies on `updateStylesByID` not mutating `styleUpdates`.

          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;

          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === 'string') {
            // Avoid setting initial textContent when the text is empty. In IE11 setting
            // textContent on a <textarea> will cause the placeholder to not
            // show within the <textarea> until it has been focused and blurred again.
            // https://github.com/facebook/react/issues/6731#issuecomment-254874553
            var canSetTextContent = tag !== 'textarea' || nextProp !== '';

            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === 'number') {
            setTextContent(domElement, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (propKey === AUTOFOCUS) {// We polyfill it separately on the client during commit.
          // We could have excluded it in the property list instead of
          // adding a special case here, but then it wouldn't be emitted
          // on server rendering (but we *do* want to emit it in SSR).
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }

    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      // TODO: Handle wasCustomComponentTag
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];

        if (propKey === STYLE) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }

    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag = void 0; // We create tags in the namespace of their parent container, except HTML
      // tags get no namespace.

      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement = void 0;
      var namespaceURI = parentNamespace;

      if (namespaceURI === HTML_NAMESPACE) {
        namespaceURI = getIntrinsicNamespace(type);
      }

      if (namespaceURI === HTML_NAMESPACE) {
        {
          isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
          // allow <SVG> or <mATH>.

          !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
        }

        if (type === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
          // This is guaranteed to yield a script element.

          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === 'string') {
          // $FlowIssue `createElement` should be updated for Web Components
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        } else {
          // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
          // attribute on `select`s needs to be added before `option`s are inserted. This prevents
          // a bug where the `select` does not scroll to the correct option because singular
          // `select` elements automatically pick the first item.
          // See https://github.com/facebook/react/issues/13222

          if (type === 'select' && props.multiple) {
            var node = domElement;
            node.multiple = true;
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }

      {
        if (namespaceURI === HTML_NAMESPACE) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
          }
        }
      }
      return domElement;
    }

    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }

    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);

        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
          warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnShadyDOM = true;
        }
      } // TODO: Make sure that we check isMounted before firing any of these events.

      var props = void 0;

      switch (tag) {
        case 'iframe':
        case 'object':
          trapBubbledEvent(TOP_LOAD, domElement);
          props = rawProps;
          break;

        case 'video':
        case 'audio':
          // Create listener for each media event
          for (var i = 0; i < mediaEventTypes.length; i++) {
            trapBubbledEvent(mediaEventTypes[i], domElement);
          }

          props = rawProps;
          break;

        case 'source':
          trapBubbledEvent(TOP_ERROR, domElement);
          props = rawProps;
          break;

        case 'img':
        case 'image':
        case 'link':
          trapBubbledEvent(TOP_ERROR, domElement);
          trapBubbledEvent(TOP_LOAD, domElement);
          props = rawProps;
          break;

        case 'form':
          trapBubbledEvent(TOP_RESET, domElement);
          trapBubbledEvent(TOP_SUBMIT, domElement);
          props = rawProps;
          break;

        case 'details':
          trapBubbledEvent(TOP_TOGGLE, domElement);
          props = rawProps;
          break;

        case 'input':
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'option':
          validateProps(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          break;

        case 'select':
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$3(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        default:
          props = rawProps;
      }

      assertValidProps(tag, props);
      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;

        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement, rawProps);
          break;

        case 'option':
          postMountWrapper$1(domElement, rawProps);
          break;

        case 'select':
          postMountWrapper$2(domElement, rawProps);
          break;

        default:
          if (typeof props.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }
    } // Calculate the diff between the two objects.


    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }
      var updatePayload = null;
      var lastProps = void 0;
      var nextProps = void 0;

      switch (tag) {
        case 'input':
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'option':
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'select':
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'textarea':
          lastProps = getHostProps$3(domElement, lastRawProps);
          nextProps = getHostProps$3(domElement, nextRawProps);
          updatePayload = [];
          break;

        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;

          if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }

      assertValidProps(tag, nextProps);
      var propKey = void 0;
      var styleName = void 0;
      var styleUpdates = null;

      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }

        if (propKey === STYLE) {
          var lastStyle = lastProps[propKey];

          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }

              styleUpdates[styleName] = '';
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {// Noop. This is handled by the clear text mechanism.
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (propKey === AUTOFOCUS) {// Noop. It doesn't work on updates anyway.
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          // This is a special case. If any listener updates we need to ensure
          // that the "current" fiber pointer gets updated so we need a commit
          // to update this element.
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          // For all other deleted properties we add it to the queue. We use
          // the whitelist in the commit phase instead.
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }

      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : undefined;

        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }

        if (propKey === STYLE) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          }

          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }

                styleUpdates[styleName] = '';
              }
            } // Update styles that changed since `lastProp`.


            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }

                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }

              updatePayload.push(propKey, styleUpdates);
            }

            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;
          var lastHtml = lastProp ? lastProp[HTML] : undefined;

          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
            }
          } else {// TODO: It might be too late to clear this if we have children
            // inserted already.
          }
        } else if (propKey === CHILDREN) {
          if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
            (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            // We eagerly listen to this even though we haven't committed yet.
            if (true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }

          if (!updatePayload && lastProp !== nextProp) {
            // This is a special case. If any listener updates we need to ensure
            // that the "current" props pointer gets updated so we need a commit
            // to update this element.
            updatePayload = [];
          }
        } else {
          // For any other property we always add it to the queue and then we
          // filter it out using the whitelist during the commit.
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }

      if (styleUpdates) {
        (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
      }

      return updatePayload;
    } // Apply the diff.


    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      // Update checked *before* name.
      // In the middle of an update, it is possible to have multiple checked.
      // When a checked radio tries to change name, browser makes another radio's checked false.
      if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }

      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
      // changed.

      switch (tag) {
        case 'input':
          // Update the wrapper around inputs *after* updating props. This has to
          // happen after `updateDOMProperties`. Otherwise HTML5 input validations
          // raise warnings and prevent the new value from being assigned.
          updateWrapper(domElement, nextRawProps);
          break;

        case 'textarea':
          updateWrapper$1(domElement, nextRawProps);
          break;

        case 'select':
          // <select> value update needs to occur after <option> children
          // reconciliation
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }

    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();

        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }

        return possibleStandardNames[lowerCasedName] || null;
      }
      return null;
    }

    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
      var isCustomComponentTag = void 0;
      var extraAttributeNames = void 0;
      {
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);

        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
          warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnShadyDOM = true;
        }
      } // TODO: Make sure that we check isMounted before firing any of these events.

      switch (tag) {
        case 'iframe':
        case 'object':
          trapBubbledEvent(TOP_LOAD, domElement);
          break;

        case 'video':
        case 'audio':
          // Create listener for each media event
          for (var i = 0; i < mediaEventTypes.length; i++) {
            trapBubbledEvent(mediaEventTypes[i], domElement);
          }

          break;

        case 'source':
          trapBubbledEvent(TOP_ERROR, domElement);
          break;

        case 'img':
        case 'image':
        case 'link':
          trapBubbledEvent(TOP_ERROR, domElement);
          trapBubbledEvent(TOP_LOAD, domElement);
          break;

        case 'form':
          trapBubbledEvent(TOP_RESET, domElement);
          trapBubbledEvent(TOP_SUBMIT, domElement);
          break;

        case 'details':
          trapBubbledEvent(TOP_TOGGLE, domElement);
          break;

        case 'input':
          initWrapperState(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'option':
          validateProps(domElement, rawProps);
          break;

        case 'select':
          initWrapperState$1(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;
      }

      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;

        for (var _i = 0; _i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();

          switch (name) {
            // Built-in SSR attribute is whitelisted
            case 'data-reactroot':
              break;
            // Controlled attributes are not validated
            // TODO: Only ignore them on controlled tags.

            case 'value':
              break;

            case 'checked':
              break;

            case 'selected':
              break;

            default:
              // Intentionally use the original name.
              // See discussion in https://github.com/facebook/react/pull/10676.
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }
      var updatePayload = null;

      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }

        var nextProp = rawProps[propKey];

        if (propKey === CHILDREN) {
          // For text content children we compare against textContent. This
          // might match additional HTML that is hidden when we read it using
          // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
          // satisfies our requirement. Our requirement is not to produce perfect
          // HTML and attributes. Ideally we should preserve structure but it's
          // ok not to if the visible content is still enough to indicate what
          // even listeners these nodes might be wired up to.
          // TODO: Warn if there is more than a single textNode as a child.
          // TODO: Should we use domElement.firstChild.nodeValue to compare?
          if (typeof nextProp === 'string') {
            if (domElement.textContent !== nextProp) {
              if (true && !suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }

              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === 'number') {
            if (domElement.textContent !== '' + nextProp) {
              if (true && !suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }

              updatePayload = [CHILDREN, '' + nextProp];
            }
          }
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if (true && // Convince Flow we've calculated it (it's DEV-only in this method.)
        typeof isCustomComponentTag === 'boolean') {
          // Validate that the properties correspond to their expected values.
          var serverValue = void 0;
          var propertyInfo = getPropertyInfo(propKey);

          if (suppressHydrationWarning) {// Don't bother comparing. We're ignoring all these warnings.
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 || // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          propKey === 'value' || propKey === 'checked' || propKey === 'selected') {// Noop
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML] : undefined;
            var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

            if (expectedHTML !== serverHTML) {
              warnForPropDifference(propKey, serverHTML, expectedHTML);
            }
          } else if (propKey === STYLE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);

            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute('style');

              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);

            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;

            if (propertyInfo !== null) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;

              if (ownNamespace === HTML_NAMESPACE) {
                ownNamespace = getIntrinsicNamespace(tag);
              }

              if (ownNamespace === HTML_NAMESPACE) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);

                if (standardName !== null && standardName !== propKey) {
                  // If an SVG prop is supplied with bad casing, it will
                  // be successfully parsed from HTML, but will produce a mismatch
                  // (and would be incorrectly rendered on the client).
                  // However, we already warn about bad casing elsewhere.
                  // So we'll skip the misleading extra mismatch warning in this case.
                  isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

                  extraAttributeNames.delete(standardName);
                } // $FlowFixMe - Should be inferred as not undefined.


                extraAttributeNames.delete(propKey);
              }

              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }

            if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }

      {
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
          // $FlowFixMe - Should be inferred as not undefined.
          warnForExtraAttributes(extraAttributeNames);
        }
      }

      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;

        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement, rawProps);
          break;

        case 'select':
        case 'option':
          // For input and textarea we current always set the value property at
          // post mount to force it to diverge from attributes. However, for
          // option and select we don't quite do the same thing and select
          // is not resilient to the DOM state changing so we don't do that here.
          // TODO: Consider not doing this for input and textarea.
          break;

        default:
          if (typeof rawProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }

      return updatePayload;
    }

    function diffHydratedText(textNode, text) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }

    function warnForUnmatchedText(textNode, text) {
      {
        warnForTextDifference(textNode.nodeValue, text);
      }
    }

    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }

    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }

    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
      }
    }

    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === '') {
          // We expect to insert empty text nodes since they're not represented in
          // the HTML.
          // TODO: Remove this special case if we can just avoid inserting empty
          // text nodes.
          return;
        }

        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }

    function restoreControlledState$1(domElement, tag, props) {
      switch (tag) {
        case 'input':
          restoreControlledState(domElement, props);
          return;

        case 'textarea':
          restoreControlledState$3(domElement, props);
          return;

        case 'select':
          restoreControlledState$2(domElement, props);
          return;
      }
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var validateDOMNesting = function () {};

    var updatedAncestorInfo = function () {};

    {
      // This validation code was written based on the HTML5 parsing spec:
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      //
      // Note: this does not catch all invalid nesting, nor does it try to (as it's
      // not clear what practical benefit doing so provides); instead, we warn only
      // for cases where the parser will give a parse tree differing from what React
      // intended. For example, <b><div></div></b> is invalid but we don't warn
      // because it still parses correctly; we do warn for other cases like nested
      // <p> tags where the beginning of the second element implicitly closes the
      // first, causing a confusing mess.
      // https://html.spec.whatwg.org/multipage/syntax.html#special
      var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

      var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
      // TODO: Distinguish by namespace here -- for <title>, including it here
      // errs on the side of fewer warnings
      'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

      var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

      var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
      var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };

      updatedAncestorInfo = function (oldInfo, tag) {
        var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

        var info = {
          tag: tag
        };

        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }

        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        } // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }

        ancestorInfo.current = info;

        if (tag === 'form') {
          ancestorInfo.formTag = info;
        }

        if (tag === 'a') {
          ancestorInfo.aTagInScope = info;
        }

        if (tag === 'button') {
          ancestorInfo.buttonTagInScope = info;
        }

        if (tag === 'nobr') {
          ancestorInfo.nobrTagInScope = info;
        }

        if (tag === 'p') {
          ancestorInfo.pTagInButtonScope = info;
        }

        if (tag === 'li') {
          ancestorInfo.listItemTagAutoclosing = info;
        }

        if (tag === 'dd' || tag === 'dt') {
          ancestorInfo.dlItemTagAutoclosing = info;
        }

        return ancestorInfo;
      };
      /**
       * Returns whether
       */


      var isTagValidWithParent = function (tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch (parentTag) {
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
          case 'select':
            return tag === 'option' || tag === 'optgroup' || tag === '#text';

          case 'optgroup':
            return tag === 'option' || tag === '#text';
          // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
          // but

          case 'option':
            return tag === '#text';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
          // No special behavior since these rules fall back to "in body" mode for
          // all except special table nodes which cause bad parsing behavior anyway.
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

          case 'tr':
            return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

          case 'tbody':
          case 'thead':
          case 'tfoot':
            return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

          case 'colgroup':
            return tag === 'col' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

          case 'table':
            return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

          case 'head':
            return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

          case 'html':
            return tag === 'head' || tag === 'body';

          case '#document':
            return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


        switch (tag) {
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

          case 'rp':
          case 'rt':
            return impliedEndTags.indexOf(parentTag) === -1;

          case 'body':
          case 'caption':
          case 'col':
          case 'colgroup':
          case 'frame':
          case 'head':
          case 'html':
          case 'tbody':
          case 'td':
          case 'tfoot':
          case 'th':
          case 'thead':
          case 'tr':
            // These tags are only valid with a few parents that have special child
            // parsing rules -- if we're down here, then none of those matched and
            // so we allow it only if we don't know what the parent is, as all other
            // cases are invalid.
            return parentTag == null;
        }

        return true;
      };
      /**
       * Returns whether
       */


      var findInvalidAncestorForTag = function (tag, ancestorInfo) {
        switch (tag) {
          case 'address':
          case 'article':
          case 'aside':
          case 'blockquote':
          case 'center':
          case 'details':
          case 'dialog':
          case 'dir':
          case 'div':
          case 'dl':
          case 'fieldset':
          case 'figcaption':
          case 'figure':
          case 'footer':
          case 'header':
          case 'hgroup':
          case 'main':
          case 'menu':
          case 'nav':
          case 'ol':
          case 'p':
          case 'section':
          case 'summary':
          case 'ul':
          case 'pre':
          case 'listing':
          case 'table':
          case 'hr':
          case 'xmp':
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return ancestorInfo.pTagInButtonScope;

          case 'form':
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

          case 'li':
            return ancestorInfo.listItemTagAutoclosing;

          case 'dd':
          case 'dt':
            return ancestorInfo.dlItemTagAutoclosing;

          case 'button':
            return ancestorInfo.buttonTagInScope;

          case 'a':
            // Spec says something about storing a list of markers, but it sounds
            // equivalent to this check.
            return ancestorInfo.aTagInScope;

          case 'nobr':
            return ancestorInfo.nobrTagInScope;
        }

        return null;
      };

      var didWarn = {};

      validateDOMNesting = function (childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;

        if (childText != null) {
          !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
          childTag = '#text';
        }

        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;

        if (!invalidParentOrAncestor) {
          return;
        }

        var ancestorTag = invalidParentOrAncestor.tag;
        var addendum = getCurrentFiberStackInDev();
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

        if (didWarn[warnKey]) {
          return;
        }

        didWarn[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';

        if (childTag === '#text') {
          if (/\S/.test(childText)) {
            tagDisplayName = 'Text nodes';
          } else {
            tagDisplayName = 'Whitespace text nodes';
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
          }
        } else {
          tagDisplayName = '<' + childTag + '>';
        }

        if (invalidParent) {
          var info = '';

          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
          }

          warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
        } else {
          warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
        }
      };
    } // Renderers that don't support persistence
    // can re-export everything from this module.

    function shim() {
      invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
    } // Persistence (when unsupported)


    var supportsPersistence = false;
    var cloneInstance = shim;
    var createContainerChildSet = shim;
    var appendChildToContainerChildSet = shim;
    var finalizeContainerChildren = shim;
    var replaceContainerChildren = shim;
    var SUPPRESS_HYDRATION_WARNING = void 0;
    {
      SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    }
    var eventsEnabled = null;
    var selectionInformation = null;

    function shouldAutoFocusHostComponent(type, props) {
      switch (type) {
        case 'button':
        case 'input':
        case 'select':
        case 'textarea':
          return !!props.autoFocus;
      }

      return false;
    }

    function getRootHostContext(rootContainerInstance) {
      var type = void 0;
      var namespace = void 0;
      var nodeType = rootContainerInstance.nodeType;

      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          {
            type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
            var root = rootContainerInstance.documentElement;
            namespace = root ? root.namespaceURI : getChildNamespace(null, '');
            break;
          }

        default:
          {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
      }

      {
        var validatedTag = type.toLowerCase();

        var _ancestorInfo = updatedAncestorInfo(null, validatedTag);

        return {
          namespace: namespace,
          ancestorInfo: _ancestorInfo
        };
      }
      return namespace;
    }

    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;

        var _namespace = getChildNamespace(parentHostContextDev.namespace, type);

        var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);

        return {
          namespace: _namespace,
          ancestorInfo: _ancestorInfo2
        };
      }
      var parentNamespace = parentHostContext;
      return getChildNamespace(parentNamespace, type);
    }

    function getPublicInstance(instance) {
      return instance;
    }

    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      setEnabled(false);
    }

    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      selectionInformation = null;
      setEnabled(eventsEnabled);
      eventsEnabled = null;
    }

    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace = void 0;
      {
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);

        if (typeof props.children === 'string' || typeof props.children === 'number') {
          var string = '' + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }

        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }

    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }

    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      return shouldAutoFocusHostComponent(type, props);
    }

    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;

        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
          var string = '' + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
    }

    function shouldSetTextContent(type, props) {
      return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }

    function shouldDeprioritizeSubtree(type, props) {
      return !!props.hidden;
    }

    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }

    var isPrimaryRenderer = true;
    var scheduleTimeout = setTimeout;
    var cancelTimeout = clearTimeout;
    var noTimeout = -1; // -------------------
    //     Mutation
    // -------------------

    var supportsMutation = true;

    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      // Despite the naming that might imply otherwise, this method only
      // fires if there is an `Update` effect scheduled during mounting.
      // This happens if `finalizeInitialChildren` returns `true` (which it
      // does to implement the `autoFocus` attribute on the client). But
      // there are also other cases when this might happen (such as patching
      // up text content during hydration mismatch). So we'll check this again.
      if (shouldAutoFocusHostComponent(type, newProps)) {
        domElement.focus();
      }
    }

    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      // Update the props handle so that we know which props are the ones with
      // with current event handlers.
      updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

      updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }

    function resetTextContent(domElement) {
      setTextContent(domElement, '');
    }

    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }

    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }

    function appendChildToContainer(container, child) {
      var parentNode = void 0;

      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      } // This container might be used for a portal.
      // If something inside a portal is clicked, that click should bubble
      // through the React tree. However, on Mobile Safari the click would
      // never bubble through the *DOM* tree unless an ancestor with onclick
      // event exists. So we wouldn't see it and dispatch it.
      // This is why we ensure that containers have inline onclick defined.
      // https://github.com/facebook/react/issues/11918


      if (parentNode.onclick === null) {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
      }
    }

    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }

    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }

    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }

    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    } // -------------------
    //     Hydration
    // -------------------


    var supportsHydration = true;

    function canHydrateInstance(instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      } // This has now been refined to an element node.


      return instance;
    }

    function canHydrateTextInstance(instance, text) {
      if (text === '' || instance.nodeType !== TEXT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      } // This has now been refined to a text node.


      return instance;
    }

    function getNextHydratableSibling(instance) {
      var node = instance.nextSibling; // Skip non-hydratable nodes.

      while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
        node = node.nextSibling;
      }

      return node;
    }

    function getFirstHydratableChild(parentInstance) {
      var next = parentInstance.firstChild; // Skip non-hydratable nodes.

      while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
        next = next.nextSibling;
      }

      return next;
    }

    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
      // get attached.

      updateFiberProps(instance, props);
      var parentNamespace = void 0;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    }

    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    }

    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
      {
        warnForUnmatchedText(textInstance, text);
      }
    }

    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForUnmatchedText(textInstance, text);
      }
    }

    function didNotHydrateContainerInstance(parentContainer, instance) {
      {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    }

    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      }
    }

    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type, props);
      }
    }

    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }

    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedElement(parentInstance, type, props);
      }
    }

    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedText(parentInstance, text);
      }
    } // Prefix measurements so that it's possible to filter them.
    // Longer prefixes are hard to read in DevTools.


    var reactEmoji = '\u269B';
    var warningEmoji = '\u26D4';
    var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
    // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

    var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
    // Reusing `currentFiber` would be confusing for this because user code fiber
    // can change during commit phase too, but we don't need to unwind it (since
    // lifecycles in the commit phase don't resemble a tree).

    var currentPhase = null;
    var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
    // so we will keep track of it, and include it in the report.
    // Track commits caused by cascading updates.

    var isCommitting = false;
    var hasScheduledUpdateInCurrentCommit = false;
    var hasScheduledUpdateInCurrentPhase = false;
    var commitCountInCurrentWorkLoop = 0;
    var effectCountInCurrentCommit = 0;
    var isWaitingForCallback = false; // During commits, we only show a measurement once per method name
    // to avoid stretch the commit phase with measurement overhead.

    var labelsInCurrentCommit = new Set();

    var formatMarkName = function (markName) {
      return reactEmoji + ' ' + markName;
    };

    var formatLabel = function (label, warning) {
      var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
      var suffix = warning ? ' Warning: ' + warning : '';
      return '' + prefix + label + suffix;
    };

    var beginMark = function (markName) {
      performance.mark(formatMarkName(markName));
    };

    var clearMark = function (markName) {
      performance.clearMarks(formatMarkName(markName));
    };

    var endMark = function (label, markName, warning) {
      var formattedMarkName = formatMarkName(markName);
      var formattedLabel = formatLabel(label, warning);

      try {
        performance.measure(formattedLabel, formattedMarkName);
      } catch (err) {} // If previous mark was missing for some reason, this will throw.
      // This could only happen if React crashed in an unexpected place earlier.
      // Don't pile on with more errors.
      // Clear marks immediately to avoid growing buffer.


      performance.clearMarks(formattedMarkName);
      performance.clearMeasures(formattedLabel);
    };

    var getFiberMarkName = function (label, debugID) {
      return label + ' (#' + debugID + ')';
    };

    var getFiberLabel = function (componentName, isMounted, phase) {
      if (phase === null) {
        // These are composite component total time measurements.
        return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
      } else {
        // Composite component methods.
        return componentName + '.' + phase;
      }
    };

    var beginFiberMark = function (fiber, phase) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);

      if (isCommitting && labelsInCurrentCommit.has(label)) {
        // During the commit phase, we don't show duplicate labels because
        // there is a fixed overhead for every measurement, and we don't
        // want to stretch the commit phase beyond necessary.
        return false;
      }

      labelsInCurrentCommit.add(label);
      var markName = getFiberMarkName(label, debugID);
      beginMark(markName);
      return true;
    };

    var clearFiberMark = function (fiber, phase) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      clearMark(markName);
    };

    var endFiberMark = function (fiber, phase, warning) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      endMark(label, markName, warning);
    };

    var shouldIgnoreFiber = function (fiber) {
      // Host components should be skipped in the timeline.
      // We could check typeof fiber.type, but does this work with RN?
      switch (fiber.tag) {
        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case Fragment:
        case ContextProvider:
        case ContextConsumer:
        case Mode:
          return true;

        default:
          return false;
      }
    };

    var clearPendingPhaseMeasurement = function () {
      if (currentPhase !== null && currentPhaseFiber !== null) {
        clearFiberMark(currentPhaseFiber, currentPhase);
      }

      currentPhaseFiber = null;
      currentPhase = null;
      hasScheduledUpdateInCurrentPhase = false;
    };

    var pauseTimers = function () {
      // Stops all currently active measurements so that they can be resumed
      // if we continue in a later deferred loop from the same unit of work.
      var fiber = currentFiber;

      while (fiber) {
        if (fiber._debugIsCurrentlyTiming) {
          endFiberMark(fiber, null, null);
        }

        fiber = fiber.return;
      }
    };

    var resumeTimersRecursively = function (fiber) {
      if (fiber.return !== null) {
        resumeTimersRecursively(fiber.return);
      }

      if (fiber._debugIsCurrentlyTiming) {
        beginFiberMark(fiber, null);
      }
    };

    var resumeTimers = function () {
      // Resumes all measurements that were active during the last deferred loop.
      if (currentFiber !== null) {
        resumeTimersRecursively(currentFiber);
      }
    };

    function recordEffect() {
      if (enableUserTimingAPI) {
        effectCountInCurrentCommit++;
      }
    }

    function recordScheduleUpdate() {
      if (enableUserTimingAPI) {
        if (isCommitting) {
          hasScheduledUpdateInCurrentCommit = true;
        }

        if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
          hasScheduledUpdateInCurrentPhase = true;
        }
      }
    }

    function startRequestCallbackTimer() {
      if (enableUserTimingAPI) {
        if (supportsUserTiming && !isWaitingForCallback) {
          isWaitingForCallback = true;
          beginMark('(Waiting for async callback...)');
        }
      }
    }

    function stopRequestCallbackTimer(didExpire, expirationTime) {
      if (enableUserTimingAPI) {
        if (supportsUserTiming) {
          isWaitingForCallback = false;
          var warning = didExpire ? 'React was blocked by main thread' : null;
          endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
        }
      }
    }

    function startWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, this is the fiber to unwind from.


        currentFiber = fiber;

        if (!beginFiberMark(fiber, null)) {
          return;
        }

        fiber._debugIsCurrentlyTiming = true;
      }
    }

    function cancelWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // Remember we shouldn't complete measurement for this fiber.
        // Otherwise flamechart will be deep even for small updates.


        fiber._debugIsCurrentlyTiming = false;
        clearFiberMark(fiber, null);
      }
    }

    function stopWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, its parent is the fiber to unwind from.


        currentFiber = fiber.return;

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        endFiberMark(fiber, null, null);
      }
    }

    function stopFailedWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, its parent is the fiber to unwind from.


        currentFiber = fiber.return;

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        var warning = 'An error was thrown inside this error boundary';
        endFiberMark(fiber, null, warning);
      }
    }

    function startPhaseTimer(fiber, phase) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        clearPendingPhaseMeasurement();

        if (!beginFiberMark(fiber, phase)) {
          return;
        }

        currentPhaseFiber = fiber;
        currentPhase = phase;
      }
    }

    function stopPhaseTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        if (currentPhase !== null && currentPhaseFiber !== null) {
          var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
          endFiberMark(currentPhaseFiber, currentPhase, warning);
        }

        currentPhase = null;
        currentPhaseFiber = null;
      }
    }

    function startWorkLoopTimer(nextUnitOfWork) {
      if (enableUserTimingAPI) {
        currentFiber = nextUnitOfWork;

        if (!supportsUserTiming) {
          return;
        }

        commitCountInCurrentWorkLoop = 0; // This is top level call.
        // Any other measurements are performed within.

        beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

        resumeTimers();
      }
    }

    function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;

        if (interruptedBy !== null) {
          if (interruptedBy.tag === HostRoot) {
            warning = 'A top-level update interrupted the previous render';
          } else {
            var componentName = getComponentName(interruptedBy.type) || 'Unknown';
            warning = 'An update to ' + componentName + ' interrupted the previous render';
          }
        } else if (commitCountInCurrentWorkLoop > 1) {
          warning = 'There were cascading updates';
        }

        commitCountInCurrentWorkLoop = 0;
        var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

        pauseTimers();
        endMark(label, '(React Tree Reconciliation)', warning);
      }
    }

    function startCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        isCommitting = true;
        hasScheduledUpdateInCurrentCommit = false;
        labelsInCurrentCommit.clear();
        beginMark('(Committing Changes)');
      }
    }

    function stopCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;

        if (hasScheduledUpdateInCurrentCommit) {
          warning = 'Lifecycle hook scheduled a cascading update';
        } else if (commitCountInCurrentWorkLoop > 0) {
          warning = 'Caused by a cascading update in earlier commit';
        }

        hasScheduledUpdateInCurrentCommit = false;
        commitCountInCurrentWorkLoop++;
        isCommitting = false;
        labelsInCurrentCommit.clear();
        endMark('(Committing Changes)', '(Committing Changes)', warning);
      }
    }

    function startCommitSnapshotEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Committing Snapshot Effects)');
      }
    }

    function stopCommitSnapshotEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
      }
    }

    function startCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Committing Host Effects)');
      }
    }

    function stopCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
      }
    }

    function startCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Calling Lifecycle Methods)');
      }
    }

    function stopCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
      }
    }

    var valueStack = [];
    var fiberStack = void 0;
    {
      fiberStack = [];
    }
    var index = -1;

    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }

    function pop(cursor, fiber) {
      if (index < 0) {
        {
          warningWithoutStack$1(false, 'Unexpected pop.');
        }
        return;
      }

      {
        if (fiber !== fiberStack[index]) {
          warningWithoutStack$1(false, 'Unexpected Fiber popped.');
        }
      }
      cursor.current = valueStack[index];
      valueStack[index] = null;
      {
        fiberStack[index] = null;
      }
      index--;
    }

    function push(cursor, value, fiber) {
      index++;
      valueStack[index] = cursor.current;
      {
        fiberStack[index] = fiber;
      }
      cursor.current = value;
    }

    function checkThatStackIsEmpty() {
      {
        if (index !== -1) {
          warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
        }
      }
    }

    function resetStackAfterFatalErrorInDev() {
      {
        index = -1;
        valueStack.length = 0;
        fiberStack.length = 0;
      }
    }

    var warnedAboutMissingGetChildContext = void 0;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
    } // A cursor to the current merged context object on the stack.

    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.

    var previousContext = emptyContextObject;

    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
      if (didPushOwnContextIfProvider && isContextProvider(Component)) {
        // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
      }

      return contextStackCursor.current;
    }

    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      var instance = workInProgress.stateNode;
      instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }

    function getMaskedContext(workInProgress, unmaskedContext) {
      var type = workInProgress.type;
      var contextTypes = type.contextTypes;

      if (!contextTypes) {
        return emptyContextObject;
      } // Avoid recreating masked context unless unmasked context has changed.
      // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
      // This may trigger infinite loops if componentWillReceiveProps calls setState.


      var instance = workInProgress.stateNode;

      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
        return instance.__reactInternalMemoizedMaskedChildContext;
      }

      var context = {};

      for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
      } // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // Context is created before the class component is instantiated so check for instance.

      if (instance) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return context;
    }

    function hasContextChanged() {
      return didPerformWorkStackCursor.current;
    }

    function isContextProvider(type) {
      var childContextTypes = type.childContextTypes;
      return childContextTypes !== null && childContextTypes !== undefined;
    }

    function popContext(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function popTopLevelContextObject(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function pushTopLevelContextObject(fiber, context, didChange) {
      !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      push(contextStackCursor, context, fiber);
      push(didPerformWorkStackCursor, didChange, fiber);
    }

    function processChildContext(fiber, type, parentContext) {
      var instance = fiber.stateNode;
      var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
      // It has only been added in Fiber to match the (unintentional) behavior in Stack.

      if (typeof instance.getChildContext !== 'function') {
        {
          var componentName = getComponentName(type) || 'Unknown';

          if (!warnedAboutMissingGetChildContext[componentName]) {
            warnedAboutMissingGetChildContext[componentName] = true;
            warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
          }
        }
        return parentContext;
      }

      var childContext = void 0;
      {
        setCurrentPhase('getChildContext');
      }
      startPhaseTimer(fiber, 'getChildContext');
      childContext = instance.getChildContext();
      stopPhaseTimer();
      {
        setCurrentPhase(null);
      }

      for (var contextKey in childContext) {
        !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
        // somebody calls unstable_renderSubtreeIntoContainer() and we process
        // context from the parent component instance. The stack will be missing
        // because it's outside of the reconciliation, and so the pointer has not
        // been set. This is rare and doesn't matter. We'll also remove that API.
        getCurrentFiberStackInDev);
      }
      return _assign({}, parentContext, childContext);
    }

    function pushContextProvider(workInProgress) {
      var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
      // If the instance does not exist yet, we will push null at first,
      // and replace it on the stack later when invalidating the context.

      var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
      // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

      previousContext = contextStackCursor.current;
      push(contextStackCursor, memoizedMergedChildContext, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
      return true;
    }

    function invalidateContextProvider(workInProgress, type, didChange) {
      var instance = workInProgress.stateNode;
      !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      if (didChange) {
        // Merge parent and own context.
        // Skip this if we're not updating due to sCU.
        // This avoids unnecessarily recomputing memoized values.
        var mergedContext = processChildContext(workInProgress, type, previousContext);
        instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
        // It is important to unwind the context in the reverse order.

        pop(didPerformWorkStackCursor, workInProgress);
        pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

        push(contextStackCursor, mergedContext, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      } else {
        pop(didPerformWorkStackCursor, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      }
    }

    function findCurrentUnmaskedContext(fiber) {
      // Currently this is only used with renderSubtreeIntoContainer; not sure if it
      // makes sense elsewhere
      !(isFiberMounted(fiber) && (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy)) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var node = fiber;

      do {
        switch (node.tag) {
          case HostRoot:
            return node.stateNode.context;

          case ClassComponent:
            {
              var Component = node.type;

              if (isContextProvider(Component)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              }

              break;
            }

          case ClassComponentLazy:
            {
              var _Component = getResultFromResolvedThenable(node.type);

              if (isContextProvider(_Component)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              }

              break;
            }
        }

        node = node.return;
      } while (node !== null);

      invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
    }

    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;

    function catchErrors(fn) {
      return function (arg) {
        try {
          return fn(arg);
        } catch (err) {
          if (true && !hasLoggedError) {
            hasLoggedError = true;
            warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
          }
        }
      };
    }

    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // No DevTools
        return false;
      }

      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

      if (hook.isDisabled) {
        // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
      }

      if (!hook.supportsFiber) {
        {
          warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
        } // DevTools exists, even though it doesn't support Fiber.

        return true;
      }

      try {
        var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

        onCommitFiberRoot = catchErrors(function (root) {
          return hook.onCommitFiberRoot(rendererID, root);
        });
        onCommitFiberUnmount = catchErrors(function (fiber) {
          return hook.onCommitFiberUnmount(rendererID, fiber);
        });
      } catch (err) {
        // Catch all errors because it is unsafe to throw during initialization.
        {
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
        }
      } // DevTools exists


      return true;
    }

    function onCommitRoot(root) {
      if (typeof onCommitFiberRoot === 'function') {
        onCommitFiberRoot(root);
      }
    }

    function onCommitUnmount(fiber) {
      if (typeof onCommitFiberUnmount === 'function') {
        onCommitFiberUnmount(fiber);
      }
    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111


    var maxSigned31BitInt = 1073741823;
    var NoWork = 0;
    var Sync = 1;
    var Never = maxSigned31BitInt;
    var UNIT_SIZE = 10;
    var MAGIC_NUMBER_OFFSET = 2; // 1 unit of expiration time represents 10ms.

    function msToExpirationTime(ms) {
      // Always add an offset so that we don't clash with the magic number for NoWork.
      return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
    }

    function expirationTimeToMs(expirationTime) {
      return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
    }

    function ceiling(num, precision) {
      return ((num / precision | 0) + 1) * precision;
    }

    function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
      return MAGIC_NUMBER_OFFSET + ceiling(currentTime - MAGIC_NUMBER_OFFSET + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
    }

    var LOW_PRIORITY_EXPIRATION = 5000;
    var LOW_PRIORITY_BATCH_SIZE = 250;

    function computeAsyncExpiration(currentTime) {
      return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
    } // We intentionally set a higher expiration time for interactive updates in
    // dev than in production.
    //
    // If the main thread is being blocked so long that you hit the expiration,
    // it's a problem that could be solved with better scheduling.
    //
    // People will be more likely to notice this and fix it with the long
    // expiration time in development.
    //
    // In production we opt for better UX at the risk of masking scheduling
    // problems, by expiring fast.


    var HIGH_PRIORITY_EXPIRATION = 500;
    var HIGH_PRIORITY_BATCH_SIZE = 100;

    function computeInteractiveExpiration(currentTime) {
      return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
    }

    var NoContext = 0;
    var AsyncMode = 1;
    var StrictMode = 2;
    var ProfileMode = 4;
    var hasBadMapPolyfill = void 0;
    {
      hasBadMapPolyfill = false;

      try {
        var nonExtensibleObject = Object.preventExtensions({});
        var testMap = new Map([[nonExtensibleObject, null]]);
        var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
        // https://github.com/rollup/rollup/issues/1771
        // TODO: we can remove these if Rollup fixes the bug.

        testMap.set(0, 0);
        testSet.add(0);
      } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
      }
    } // A Fiber is work on a Component that needs to be done or was done. There can
    // be more than one per component.

    var debugCounter = void 0;
    {
      debugCounter = 1;
    }

    function FiberNode(tag, pendingProps, key, mode) {
      // Instance
      this.tag = tag;
      this.key = key;
      this.type = null;
      this.stateNode = null; // Fiber

      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.firstContextDependency = null;
      this.mode = mode; // Effects

      this.effectTag = NoEffect;
      this.nextEffect = null;
      this.firstEffect = null;
      this.lastEffect = null;
      this.expirationTime = NoWork;
      this.childExpirationTime = NoWork;
      this.alternate = null;

      if (enableProfilerTimer) {
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }

      {
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugIsCurrentlyTiming = false;

        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
          Object.preventExtensions(this);
        }
      }
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.


    var createFiber = function (tag, pendingProps, key, mode) {
      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
      return new FiberNode(tag, pendingProps, key, mode);
    };

    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }

    function resolveLazyComponentTag(fiber, Component) {
      if (typeof Component === 'function') {
        return shouldConstruct(Component) ? ClassComponentLazy : FunctionalComponentLazy;
      } else if (Component !== undefined && Component !== null && Component.$$typeof) {
        return ForwardRefLazy;
      }

      return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.


    function createWorkInProgress(current, pendingProps, expirationTime) {
      var workInProgress = current.alternate;

      if (workInProgress === null) {
        // We use a double buffering pooling technique because we know that we'll
        // only ever need at most two versions of a tree. We pool the "other" unused
        // node that we're free to reuse. This is lazily created to avoid allocating
        // extra objects for things that are never updated. It also allow us to
        // reclaim the extra memory if needed.
        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
        workInProgress.type = current.type;
        workInProgress.stateNode = current.stateNode;
        {
          // DEV-only fields
          workInProgress._debugID = current._debugID;
          workInProgress._debugSource = current._debugSource;
          workInProgress._debugOwner = current._debugOwner;
        }
        workInProgress.alternate = current;
        current.alternate = workInProgress;
      } else {
        workInProgress.pendingProps = pendingProps; // We already have an alternate.
        // Reset the effect tag.

        workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;

        if (enableProfilerTimer) {
          // We intentionally reset, rather than copy, actualDuration & actualStartTime.
          // This prevents time from endlessly accumulating in new commits.
          // This has the downside of resetting values for different priority renders,
          // But works for yielding (the common case) and should support resuming.
          workInProgress.actualDuration = 0;
          workInProgress.actualStartTime = -1;
        }
      } // Don't touching the subtree's expiration time, which has not changed.


      workInProgress.childExpirationTime = current.childExpirationTime;

      if (pendingProps !== current.pendingProps) {
        // This fiber has new props.
        workInProgress.expirationTime = expirationTime;
      } else {
        // This fiber's props have not changed.
        workInProgress.expirationTime = current.expirationTime;
      }

      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.firstContextDependency = current.firstContextDependency; // These will be overridden during the parent's reconciliation

      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;

      if (enableProfilerTimer) {
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
      }

      return workInProgress;
    }

    function createHostRootFiber(isAsync) {
      var mode = isAsync ? AsyncMode | StrictMode : NoContext;

      if (enableProfilerTimer && isDevToolsPresent) {
        // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
      }

      return createFiber(HostRoot, null, null, mode);
    }

    function createFiberFromElement(element, mode, expirationTime) {
      var owner = null;
      {
        owner = element._owner;
      }
      var fiber = void 0;
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiberTag = void 0;

      if (typeof type === 'function') {
        fiberTag = shouldConstruct(type) ? ClassComponent : IndeterminateComponent;
      } else if (typeof type === 'string') {
        fiberTag = HostComponent;
      } else {
        getTag: switch (type) {
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

          case REACT_ASYNC_MODE_TYPE:
            fiberTag = Mode;
            mode |= AsyncMode | StrictMode;
            break;

          case REACT_STRICT_MODE_TYPE:
            fiberTag = Mode;
            mode |= StrictMode;
            break;

          case REACT_PROFILER_TYPE:
            return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

          case REACT_PLACEHOLDER_TYPE:
            fiberTag = PlaceholderComponent;
            break;

          default:
            {
              if (typeof type === 'object' && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;

                  case REACT_CONTEXT_TYPE:
                    // This is a consumer
                    fiberTag = ContextConsumer;
                    break getTag;

                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    break getTag;

                  default:
                    {
                      if (typeof type.then === 'function') {
                        fiberTag = IndeterminateComponent;
                        break getTag;
                      }
                    }
                }
              }

              var info = '';
              {
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                  info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                }

                var ownerName = owner ? getComponentName(owner.type) : null;

                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.';
                }
              }
              invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
            }
        }
      }

      fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.type = type;
      fiber.expirationTime = expirationTime;
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }

    function createFiberFromFragment(elements, mode, expirationTime, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
      {
        if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
          warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
      fiber.type = REACT_PROFILER_TYPE;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromText(content, mode, expirationTime) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoContext);
      fiber.type = 'DELETED';
      return fiber;
    }

    function createFiberFromPortal(portal, mode, expirationTime) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.expirationTime = expirationTime;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.


    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoContext);
      } // This is intentionally written as a list of all properties.
      // We tried to use Object.assign() instead but this is called in
      // the hottest path, and Object.assign() was too slow:
      // https://github.com/facebook/react/issues/12502
      // This code is DEV-only so size is not a concern.


      target.tag = source.tag;
      target.key = source.key;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.firstContextDependency = source.firstContextDependency;
      target.mode = source.mode;
      target.effectTag = source.effectTag;
      target.nextEffect = source.nextEffect;
      target.firstEffect = source.firstEffect;
      target.lastEffect = source.lastEffect;
      target.expirationTime = source.expirationTime;
      target.childExpirationTime = source.childExpirationTime;
      target.alternate = source.alternate;

      if (enableProfilerTimer) {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }

      target._debugID = source._debugID;
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
      return target;
    }
    /* eslint-disable no-use-before-define */
    // TODO: This should be lifted into the renderer.
    // The following attributes are only used by interaction tracing builds.
    // They enable interactions to be associated with their async work,
    // And expose interaction metadata to the React DevTools Profiler plugin.
    // Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
    // Exported FiberRoot type includes all properties,
    // To avoid requiring potentially error-prone :any casts throughout the project.
    // Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
    // The types are defined separately within this file to ensure they stay in sync.
    // (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)

    /* eslint-enable no-use-before-define */


    function createFiberRoot(containerInfo, isAsync, hydrate) {
      // Cyclic construction. This cheats the type system right now because
      // stateNode is any.
      var uninitializedFiber = createHostRootFiber(isAsync);
      var root = void 0;

      if (enableSchedulerTracing) {
        root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          earliestPendingTime: NoWork,
          latestPendingTime: NoWork,
          earliestSuspendedTime: NoWork,
          latestSuspendedTime: NoWork,
          latestPingedTime: NoWork,
          didError: false,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          timeoutHandle: noTimeout,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          nextExpirationTimeToWorkOn: NoWork,
          expirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null,
          interactionThreadID: tracing.unstable_getThreadID(),
          memoizedInteractions: new Set(),
          pendingInteractionMap: new Map()
        };
      } else {
        root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          earliestPendingTime: NoWork,
          latestPendingTime: NoWork,
          earliestSuspendedTime: NoWork,
          latestSuspendedTime: NoWork,
          latestPingedTime: NoWork,
          didError: false,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          timeoutHandle: noTimeout,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          nextExpirationTimeToWorkOn: NoWork,
          expirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null
        };
      }

      uninitializedFiber.stateNode = root; // The reason for the way the Flow types are structured in this file,
      // Is to avoid needing :any casts everywhere interaction tracing fields are used.
      // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
      // $FlowFixMe Remove this :any cast and replace it with something better.

      return root;
    }
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    var ReactStrictModeWarnings = {
      discardPendingWarnings: function () {},
      flushPendingDeprecationWarnings: function () {},
      flushPendingUnsafeLifecycleWarnings: function () {},
      recordDeprecationWarnings: function (fiber, instance) {},
      recordUnsafeLifecycleWarnings: function (fiber, instance) {},
      recordLegacyContextWarning: function (fiber, instance) {},
      flushLegacyContextWarning: function () {}
    };
    {
      var LIFECYCLE_SUGGESTIONS = {
        UNSAFE_componentWillMount: 'componentDidMount',
        UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
        UNSAFE_componentWillUpdate: 'componentDidUpdate'
      };
      var pendingComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUnsafeLifecycleWarnings = new Map();
      var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

      var didWarnAboutDeprecatedLifecycles = new Set();
      var didWarnAboutUnsafeLifecycles = new Set();
      var didWarnAboutLegacyContext = new Set();

      var setToSortedString = function (set) {
        var array = [];
        set.forEach(function (value) {
          array.push(value);
        });
        return array.sort().join(', ');
      };

      ReactStrictModeWarnings.discardPendingWarnings = function () {
        pendingComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUnsafeLifecycleWarnings = new Map();
        pendingLegacyContextWarning = new Map();
      };

      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
        pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
          var lifecyclesWarningMesages = [];
          Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
            var lifecycleWarnings = lifecycleWarningsMap[lifecycle];

            if (lifecycleWarnings.length > 0) {
              var componentNames = new Set();
              lifecycleWarnings.forEach(function (fiber) {
                componentNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              var formatted = lifecycle.replace('UNSAFE_', '');
              var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
              var sortedComponentNames = setToSortedString(componentNames);
              lifecyclesWarningMesages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
            }
          });

          if (lifecyclesWarningMesages.length > 0) {
            var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
            warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMesages.join('\n\n'));
          }
        });
        pendingUnsafeLifecycleWarnings = new Map();
      };

      var findStrictRoot = function (fiber) {
        var maybeStrictRoot = null;
        var node = fiber;

        while (node !== null) {
          if (node.mode & StrictMode) {
            maybeStrictRoot = node;
          }

          node = node.return;
        }

        return maybeStrictRoot;
      };

      ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
        if (pendingComponentWillMountWarnings.length > 0) {
          var uniqueNames = new Set();
          pendingComponentWillMountWarnings.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);
          pendingComponentWillMountWarnings = [];
        }

        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          var _uniqueNames = new Set();

          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
            _uniqueNames.add(getComponentName(fiber.type) || 'Component');

            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var _sortedNames = setToSortedString(_uniqueNames);

          lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);
          pendingComponentWillReceivePropsWarnings = [];
        }

        if (pendingComponentWillUpdateWarnings.length > 0) {
          var _uniqueNames2 = new Set();

          pendingComponentWillUpdateWarnings.forEach(function (fiber) {
            _uniqueNames2.add(getComponentName(fiber.type) || 'Component');

            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var _sortedNames2 = setToSortedString(_uniqueNames2);

          lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);
          pendingComponentWillUpdateWarnings = [];
        }
      };

      ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
          return;
        } // Don't warn about react-lifecycles-compat polyfilled components.


        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }

        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }

        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
      };

      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);

        if (strictRoot === null) {
          warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        } // Dedup strategy: Warn once per component.
        // This is difficult to track any other way since component names
        // are often vague and are likely to collide between 3rd party libraries.
        // An expand property is probably okay to use here since it's DEV-only,
        // and will only be set in the event of serious warnings.


        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }

        var warningsForRoot = void 0;

        if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
          warningsForRoot = {
            UNSAFE_componentWillMount: [],
            UNSAFE_componentWillReceiveProps: [],
            UNSAFE_componentWillUpdate: []
          };
          pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
        } else {
          warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
        }

        var unsafeLifecycles = [];

        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillMount');
        }

        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
        }

        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillUpdate');
        }

        if (unsafeLifecycles.length > 0) {
          unsafeLifecycles.forEach(function (lifecycle) {
            warningsForRoot[lifecycle].push(fiber);
          });
        }
      };

      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);

        if (strictRoot === null) {
          warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        } // Dedup strategy: Warn once per component.


        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }

        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
          if (warningsForRoot === undefined) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }

          warningsForRoot.push(fiber);
        }
      };

      ReactStrictModeWarnings.flushLegacyContextWarning = function () {
        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
          var uniqueNames = new Set();
          fiberArray.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
          warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
        });
      };
    } // This lets us hook into Fiber to debug what it's doing.
    // See https://github.com/facebook/react/pull/8033.
    // This is not part of the public API, not even for React DevTools.
    // You may only inject a debugTool if you work on React Fiber itself.

    var ReactFiberInstrumentation = {
      debugTool: null
    };
    var ReactFiberInstrumentation_1 = ReactFiberInstrumentation; // TODO: Offscreen updates should never suspend. However, a promise that
    // suspended inside an offscreen subtree should be able to ping at the priority
    // of the outer render.

    function markPendingPriorityLevel(root, expirationTime) {
      // If there's a gap between completing a failed root and retrying it,
      // additional updates may be scheduled. Clear `didError`, in case the update
      // is sufficient to fix the error.
      root.didError = false; // Update the latest and earliest pending times

      var earliestPendingTime = root.earliestPendingTime;

      if (earliestPendingTime === NoWork) {
        // No other pending updates.
        root.earliestPendingTime = root.latestPendingTime = expirationTime;
      } else {
        if (earliestPendingTime > expirationTime) {
          // This is the earliest pending update.
          root.earliestPendingTime = expirationTime;
        } else {
          var latestPendingTime = root.latestPendingTime;

          if (latestPendingTime < expirationTime) {
            // This is the latest pending update
            root.latestPendingTime = expirationTime;
          }
        }
      }

      findNextExpirationTimeToWorkOn(expirationTime, root);
    }

    function markCommittedPriorityLevels(root, earliestRemainingTime) {
      root.didError = false;

      if (earliestRemainingTime === NoWork) {
        // Fast path. There's no remaining work. Clear everything.
        root.earliestPendingTime = NoWork;
        root.latestPendingTime = NoWork;
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork;
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      } // Let's see if the previous latest known pending level was just flushed.


      var latestPendingTime = root.latestPendingTime;

      if (latestPendingTime !== NoWork) {
        if (latestPendingTime < earliestRemainingTime) {
          // We've flushed all the known pending levels.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          var earliestPendingTime = root.earliestPendingTime;

          if (earliestPendingTime < earliestRemainingTime) {
            // We've flushed the earliest known pending level. Set this to the
            // latest pending time.
            root.earliestPendingTime = root.latestPendingTime;
          }
        }
      } // Now let's handle the earliest remaining level in the whole tree. We need to
      // decide whether to treat it as a pending level or as suspended. Check
      // it falls within the range of known suspended levels.


      var earliestSuspendedTime = root.earliestSuspendedTime;

      if (earliestSuspendedTime === NoWork) {
        // There's no suspended work. Treat the earliest remaining level as a
        // pending level.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      var latestSuspendedTime = root.latestSuspendedTime;

      if (earliestRemainingTime > latestSuspendedTime) {
        // The earliest remaining level is later than all the suspended work. That
        // means we've flushed all the suspended work.
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork; // There's no suspended work. Treat the earliest remaining level as a
        // pending level.

        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      if (earliestRemainingTime < earliestSuspendedTime) {
        // The earliest remaining time is earlier than all the suspended work.
        // Treat it as a pending update.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      } // The earliest remaining time falls within the range of known suspended
      // levels. We should treat this as suspended work.


      findNextExpirationTimeToWorkOn(NoWork, root);
    }

    function hasLowerPriorityWork(root, erroredExpirationTime) {
      var latestPendingTime = root.latestPendingTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      var latestPingedTime = root.latestPingedTime;
      return latestPendingTime !== NoWork && latestPendingTime > erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime > erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime > erroredExpirationTime;
    }

    function isPriorityLevelSuspended(root, expirationTime) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      return earliestSuspendedTime !== NoWork && expirationTime >= earliestSuspendedTime && expirationTime <= latestSuspendedTime;
    }

    function markSuspendedPriorityLevel(root, suspendedTime) {
      root.didError = false;
      clearPing(root, suspendedTime); // First, check the known pending levels and update them if needed.

      var earliestPendingTime = root.earliestPendingTime;
      var latestPendingTime = root.latestPendingTime;

      if (earliestPendingTime === suspendedTime) {
        if (latestPendingTime === suspendedTime) {
          // Both known pending levels were suspended. Clear them.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          // The earliest pending level was suspended. Clear by setting it to the
          // latest pending level.
          root.earliestPendingTime = latestPendingTime;
        }
      } else if (latestPendingTime === suspendedTime) {
        // The latest pending level was suspended. Clear by setting it to the
        // latest pending level.
        root.latestPendingTime = earliestPendingTime;
      } // Finally, update the known suspended levels.


      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;

      if (earliestSuspendedTime === NoWork) {
        // No other suspended levels.
        root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
      } else {
        if (earliestSuspendedTime > suspendedTime) {
          // This is the earliest suspended level.
          root.earliestSuspendedTime = suspendedTime;
        } else if (latestSuspendedTime < suspendedTime) {
          // This is the latest suspended level
          root.latestSuspendedTime = suspendedTime;
        }
      }

      findNextExpirationTimeToWorkOn(suspendedTime, root);
    }

    function markPingedPriorityLevel(root, pingedTime) {
      root.didError = false; // TODO: When we add back resuming, we need to ensure the progressed work
      // is thrown out and not reused during the restarted render. One way to
      // invalidate the progressed work is to restart at expirationTime + 1.

      var latestPingedTime = root.latestPingedTime;

      if (latestPingedTime === NoWork || latestPingedTime < pingedTime) {
        root.latestPingedTime = pingedTime;
      }

      findNextExpirationTimeToWorkOn(pingedTime, root);
    }

    function clearPing(root, completedTime) {
      // TODO: Track whether the root was pinged during the render phase. If so,
      // we need to make sure we don't lose track of it.
      var latestPingedTime = root.latestPingedTime;

      if (latestPingedTime !== NoWork && latestPingedTime <= completedTime) {
        root.latestPingedTime = NoWork;
      }
    }

    function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
      var earliestExpirationTime = renderExpirationTime;
      var earliestPendingTime = root.earliestPendingTime;
      var earliestSuspendedTime = root.earliestSuspendedTime;

      if (earliestExpirationTime === NoWork || earliestPendingTime !== NoWork && earliestPendingTime < earliestExpirationTime) {
        earliestExpirationTime = earliestPendingTime;
      }

      if (earliestExpirationTime === NoWork || earliestSuspendedTime !== NoWork && earliestSuspendedTime < earliestExpirationTime) {
        earliestExpirationTime = earliestSuspendedTime;
      }

      return earliestExpirationTime;
    }

    function didExpireAtExpirationTime(root, currentTime) {
      var expirationTime = root.expirationTime;

      if (expirationTime !== NoWork && currentTime >= expirationTime) {
        // The root has expired. Flush all work up to the current time.
        root.nextExpirationTimeToWorkOn = currentTime;
      }
    }

    function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      var earliestPendingTime = root.earliestPendingTime;
      var latestPingedTime = root.latestPingedTime; // Work on the earliest pending time. Failing that, work on the latest
      // pinged time.

      var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime; // If there is no pending or pinged work, check if there's suspended work
      // that's lower priority than what we just completed.

      if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime > completedExpirationTime)) {
        // The lowest priority suspended work is the work most likely to be
        // committed next. Let's start rendering it again, so that if it times out,
        // it's ready to commit.
        nextExpirationTimeToWorkOn = latestSuspendedTime;
      }

      var expirationTime = nextExpirationTimeToWorkOn;

      if (expirationTime !== NoWork && earliestSuspendedTime !== NoWork && earliestSuspendedTime < expirationTime) {
        // Expire using the earliest known expiration time.
        expirationTime = earliestSuspendedTime;
      }

      root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
      root.expirationTime = expirationTime;
    } // UpdateQueue is a linked list of prioritized updates.
    //
    // Like fibers, update queues come in pairs: a current queue, which represents
    // the visible state of the screen, and a work-in-progress queue, which is
    // can be mutated and processed asynchronously before it is committed — a form
    // of double buffering. If a work-in-progress render is discarded before
    // finishing, we create a new work-in-progress by cloning the current queue.
    //
    // Both queues share a persistent, singly-linked list structure. To schedule an
    // update, we append it to the end of both queues. Each queue maintains a
    // pointer to first update in the persistent list that hasn't been processed.
    // The work-in-progress pointer always has a position equal to or greater than
    // the current queue, since we always work on that one. The current queue's
    // pointer is only updated during the commit phase, when we swap in the
    // work-in-progress.
    //
    // For example:
    //
    //   Current pointer:           A - B - C - D - E - F
    //   Work-in-progress pointer:              D - E - F
    //                                          ^
    //                                          The work-in-progress queue has
    //                                          processed more updates than current.
    //
    // The reason we append to both queues is because otherwise we might drop
    // updates without ever processing them. For example, if we only add updates to
    // the work-in-progress queue, some updates could be lost whenever a work-in
    // -progress render restarts by cloning from current. Similarly, if we only add
    // updates to the current queue, the updates will be lost whenever an already
    // in-progress queue commits and swaps with the current queue. However, by
    // adding to both queues, we guarantee that the update will be part of the next
    // work-in-progress. (And because the work-in-progress queue becomes the
    // current queue once it commits, there's no danger of applying the same
    // update twice.)
    //
    // Prioritization
    // --------------
    //
    // Updates are not sorted by priority, but by insertion; new updates are always
    // appended to the end of the list.
    //
    // The priority is still important, though. When processing the update queue
    // during the render phase, only the updates with sufficient priority are
    // included in the result. If we skip an update because it has insufficient
    // priority, it remains in the queue to be processed later, during a lower
    // priority render. Crucially, all updates subsequent to a skipped update also
    // remain in the queue *regardless of their priority*. That means high priority
    // updates are sometimes processed twice, at two separate priorities. We also
    // keep track of a base state, that represents the state before the first
    // update in the queue is applied.
    //
    // For example:
    //
    //   Given a base state of '', and the following queue of updates
    //
    //     A1 - B2 - C1 - D2
    //
    //   where the number indicates the priority, and the update is applied to the
    //   previous state by appending a letter, React will process these updates as
    //   two separate renders, one per distinct priority level:
    //
    //   First render, at priority 1:
    //     Base state: ''
    //     Updates: [A1, C1]
    //     Result state: 'AC'
    //
    //   Second render, at priority 2:
    //     Base state: 'A'            <-  The base state does not include C1,
    //                                    because B2 was skipped.
    //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
    //     Result state: 'ABCD'
    //
    // Because we process updates in insertion order, and rebase high priority
    // updates when preceding updates are skipped, the final result is deterministic
    // regardless of priority. Intermediate state may vary according to system
    // resources, but the final state is always the same.


    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.

    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate = void 0;
    var currentlyProcessingQueue = void 0;
    var resetCurrentlyProcessingQueue = void 0;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;

      resetCurrentlyProcessingQueue = function () {
        currentlyProcessingQueue = null;
      };
    }

    function createUpdateQueue(baseState) {
      var queue = {
        baseState: baseState,
        firstUpdate: null,
        lastUpdate: null,
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function cloneUpdateQueue(currentQueue) {
      var queue = {
        baseState: currentQueue.baseState,
        firstUpdate: currentQueue.firstUpdate,
        lastUpdate: currentQueue.lastUpdate,
        // TODO: With resuming, if we bail out and resuse the child tree, we should
        // keep these effects.
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function createUpdate(expirationTime) {
      return {
        expirationTime: expirationTime,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null,
        nextEffect: null
      };
    }

    function appendUpdateToQueue(queue, update) {
      // Append the update to the end of the list.
      if (queue.lastUpdate === null) {
        // Queue is empty
        queue.firstUpdate = queue.lastUpdate = update;
      } else {
        queue.lastUpdate.next = update;
        queue.lastUpdate = update;
      }
    }

    function enqueueUpdate(fiber, update) {
      // Update queues are created lazily.
      var alternate = fiber.alternate;
      var queue1 = void 0;
      var queue2 = void 0;

      if (alternate === null) {
        // There's only one fiber.
        queue1 = fiber.updateQueue;
        queue2 = null;

        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        }
      } else {
        // There are two owners.
        queue1 = fiber.updateQueue;
        queue2 = alternate.updateQueue;

        if (queue1 === null) {
          if (queue2 === null) {
            // Neither fiber has an update queue. Create new ones.
            queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
            queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
          } else {
            // Only one fiber has an update queue. Clone to create a new one.
            queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
          }
        } else {
          if (queue2 === null) {
            // Only one fiber has an update queue. Clone to create a new one.
            queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
          } else {// Both owners have an update queue.
          }
        }
      }

      if (queue2 === null || queue1 === queue2) {
        // There's only a single queue.
        appendUpdateToQueue(queue1, update);
      } else {
        // There are two queues. We need to append the update to both queues,
        // while accounting for the persistent structure of the list — we don't
        // want the same update to be added multiple times.
        if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
          // One of the queues is not empty. We must add the update to both queues.
          appendUpdateToQueue(queue1, update);
          appendUpdateToQueue(queue2, update);
        } else {
          // Both queues are non-empty. The last update is the same in both lists,
          // because of structural sharing. So, only append to one of the lists.
          appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.

          queue2.lastUpdate = update;
        }
      }

      {
        if ((fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
          warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
          didWarnUpdateInsideUpdate = true;
        }
      }
    }

    function enqueueCapturedUpdate(workInProgress, update) {
      // Captured updates go into a separate list, and only on the work-in-
      // progress queue.
      var workInProgressQueue = workInProgress.updateQueue;

      if (workInProgressQueue === null) {
        workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
      } else {
        // TODO: I put this here rather than createWorkInProgress so that we don't
        // clone the queue unnecessarily. There's probably a better way to
        // structure this.
        workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
      } // Append the update to the end of the list.


      if (workInProgressQueue.lastCapturedUpdate === null) {
        // This is the first render phase update
        workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
      } else {
        workInProgressQueue.lastCapturedUpdate.next = update;
        workInProgressQueue.lastCapturedUpdate = update;
      }
    }

    function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
      var current = workInProgress.alternate;

      if (current !== null) {
        // If the work-in-progress queue is equal to the current queue,
        // we need to clone it first.
        if (queue === current.updateQueue) {
          queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
        }
      }

      return queue;
    }

    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState:
          {
            var _payload = update.payload;

            if (typeof _payload === 'function') {
              // Updater function
              {
                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                  _payload.call(instance, prevState, nextProps);
                }
              }
              return _payload.call(instance, prevState, nextProps);
            } // State object


            return _payload;
          }

        case CaptureUpdate:
          {
            workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
          }
        // Intentional fallthrough

        case UpdateState:
          {
            var _payload2 = update.payload;
            var partialState = void 0;

            if (typeof _payload2 === 'function') {
              // Updater function
              {
                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                  _payload2.call(instance, prevState, nextProps);
                }
              }
              partialState = _payload2.call(instance, prevState, nextProps);
            } else {
              // Partial state object
              partialState = _payload2;
            }

            if (partialState === null || partialState === undefined) {
              // Null and undefined are treated as no-ops.
              return prevState;
            } // Merge the partial state and the previous state.


            return _assign({}, prevState, partialState);
          }

        case ForceUpdate:
          {
            hasForceUpdate = true;
            return prevState;
          }
      }

      return prevState;
    }

    function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
      hasForceUpdate = false;
      queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);
      {
        currentlyProcessingQueue = queue;
      } // These values may change as we process the queue.

      var newBaseState = queue.baseState;
      var newFirstUpdate = null;
      var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.

      var update = queue.firstUpdate;
      var resultState = newBaseState;

      while (update !== null) {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime > renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          if (newFirstUpdate === null) {
            // This is the first skipped update. It will be the first update in
            // the new list.
            newFirstUpdate = update; // Since this is the first update that was skipped, the current result
            // is the new base state.

            newBaseState = resultState;
          } // Since this update will remain in the list, update the remaining
          // expiration time.


          if (newExpirationTime === NoWork || newExpirationTime > updateExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority. Process it and compute
          // a new result.
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback = update.callback;

          if (_callback !== null) {
            workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

            update.nextEffect = null;

            if (queue.lastEffect === null) {
              queue.firstEffect = queue.lastEffect = update;
            } else {
              queue.lastEffect.nextEffect = update;
              queue.lastEffect = update;
            }
          }
        } // Continue to the next update.


        update = update.next;
      } // Separately, iterate though the list of captured updates.


      var newFirstCapturedUpdate = null;
      update = queue.firstCapturedUpdate;

      while (update !== null) {
        var _updateExpirationTime = update.expirationTime;

        if (_updateExpirationTime > renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          if (newFirstCapturedUpdate === null) {
            // This is the first skipped captured update. It will be the first
            // update in the new list.
            newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is
            // the new base state.

            if (newFirstUpdate === null) {
              newBaseState = resultState;
            }
          } // Since this update will remain in the list, update the remaining
          // expiration time.


          if (newExpirationTime === NoWork || newExpirationTime > _updateExpirationTime) {
            newExpirationTime = _updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority. Process it and compute
          // a new result.
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback2 = update.callback;

          if (_callback2 !== null) {
            workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

            update.nextEffect = null;

            if (queue.lastCapturedEffect === null) {
              queue.firstCapturedEffect = queue.lastCapturedEffect = update;
            } else {
              queue.lastCapturedEffect.nextEffect = update;
              queue.lastCapturedEffect = update;
            }
          }
        }

        update = update.next;
      }

      if (newFirstUpdate === null) {
        queue.lastUpdate = null;
      }

      if (newFirstCapturedUpdate === null) {
        queue.lastCapturedUpdate = null;
      } else {
        workInProgress.effectTag |= Callback;
      }

      if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
        // We processed every update, without skipping. That means the new base
        // state is the same as the result state.
        newBaseState = resultState;
      }

      queue.baseState = newBaseState;
      queue.firstUpdate = newFirstUpdate;
      queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
      // This should be fine because the only two other things that contribute to
      // expiration time are props and context. We're already in the middle of the
      // begin phase by the time we start processing the queue, so we've already
      // dealt with the props. Context in components that specify
      // shouldComponentUpdate is tricky; but we'll have to account for
      // that regardless.

      workInProgress.expirationTime = newExpirationTime;
      workInProgress.memoizedState = resultState;
      {
        currentlyProcessingQueue = null;
      }
    }

    function callCallback(callback, context) {
      !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
      callback.call(context);
    }

    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }

    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }

    function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
      // If the finished render included captured updates, and there are still
      // lower priority updates left over, we need to keep the captured updates
      // in the queue so that they are rebased and not dropped once we process the
      // queue again at the lower priority.
      if (finishedQueue.firstCapturedUpdate !== null) {
        // Join the captured update list to the end of the normal list.
        if (finishedQueue.lastUpdate !== null) {
          finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
          finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
        } // Clear the list of captured updates.


        finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
      } // Commit the effects


      commitUpdateEffects(finishedQueue.firstEffect, instance);
      finishedQueue.firstEffect = finishedQueue.lastEffect = null;
      commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
      finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
    }

    function commitUpdateEffects(effect, instance) {
      while (effect !== null) {
        var _callback3 = effect.callback;

        if (_callback3 !== null) {
          effect.callback = null;
          callCallback(_callback3, instance);
        }

        effect = effect.nextEffect;
      }
    }

    function createCapturedValue(value, source) {
      // If the value is an error, call this function immediately after it is thrown
      // so the stack is accurate.
      return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }

    var valueCursor = createCursor(null);
    var rendererSigil = void 0;
    {
      // Use this to detect multiple renderers using the same context
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;

    function resetContextDependences() {
      // This is called right before React yields execution, to ensure `readContext`
      // cannot be called outside the render phase.
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
    }

    function pushProvider(providerFiber, nextValue) {
      var context = providerFiber.type._context;

      if (isPrimaryRenderer) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
          context._currentRenderer = rendererSigil;
        }
      } else {
        push(valueCursor, context._currentValue2, providerFiber);
        context._currentValue2 = nextValue;
        {
          !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
          context._currentRenderer2 = rendererSigil;
        }
      }
    }

    function popProvider(providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      var context = providerFiber.type._context;

      if (isPrimaryRenderer) {
        context._currentValue = currentValue;
      } else {
        context._currentValue2 = currentValue;
      }
    }

    function calculateChangedBits(context, newValue, oldValue) {
      // Use Object.is to compare the new context value to the old value. Inlined
      // Object.is polyfill.
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
      if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue // eslint-disable-line no-self-compare
      ) {
          // No change
          return 0;
        } else {
        var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;
        {
          !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
        }
        return changedBits | 0;
      }
    }

    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
      var fiber = workInProgress.child;

      if (fiber !== null) {
        // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
      }

      while (fiber !== null) {
        var nextFiber = void 0; // Visit this fiber.

        var dependency = fiber.firstContextDependency;

        if (dependency !== null) {
          do {
            // Check if the context matches.
            if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
              // Match! Schedule an update on this fiber.
              if (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) {
                // Schedule a force update on the work-in-progress.
                var update = createUpdate(renderExpirationTime);
                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                // update to the current fiber, too, which means it will persist even if
                // this render is thrown away. Since it's a race condition, not sure it's
                // worth fixing.

                enqueueUpdate(fiber, update);
              }

              if (fiber.expirationTime === NoWork || fiber.expirationTime > renderExpirationTime) {
                fiber.expirationTime = renderExpirationTime;
              }

              var alternate = fiber.alternate;

              if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
                alternate.expirationTime = renderExpirationTime;
              } // Update the child expiration time of all the ancestors, including
              // the alternates.


              var node = fiber.return;

              while (node !== null) {
                alternate = node.alternate;

                if (node.childExpirationTime === NoWork || node.childExpirationTime > renderExpirationTime) {
                  node.childExpirationTime = renderExpirationTime;

                  if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > renderExpirationTime)) {
                    alternate.childExpirationTime = renderExpirationTime;
                  }
                } else if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > renderExpirationTime)) {
                  alternate.childExpirationTime = renderExpirationTime;
                } else {
                  // Neither alternate was updated, which means the rest of the
                  // ancestor path already has sufficient priority.
                  break;
                }

                node = node.return;
              }
            }

            nextFiber = fiber.child;
            dependency = dependency.next;
          } while (dependency !== null);
        } else if (fiber.tag === ContextProvider) {
          // Don't scan deeper if this is a matching provider
          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
        } else {
          // Traverse down.
          nextFiber = fiber.child;
        }

        if (nextFiber !== null) {
          // Set the return pointer of the child to the work-in-progress fiber.
          nextFiber.return = fiber;
        } else {
          // No child. Traverse to next sibling.
          nextFiber = fiber;

          while (nextFiber !== null) {
            if (nextFiber === workInProgress) {
              // We're back to the root of this subtree. Exit.
              nextFiber = null;
              break;
            }

            var sibling = nextFiber.sibling;

            if (sibling !== null) {
              // Set the return pointer of the sibling to the work-in-progress fiber.
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            } // No more siblings. Traverse up.


            nextFiber = nextFiber.return;
          }
        }

        fiber = nextFiber;
      }
    }

    function prepareToReadContext(workInProgress, renderExpirationTime) {
      currentlyRenderingFiber = workInProgress;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null; // Reset the work-in-progress list

      workInProgress.firstContextDependency = null;
    }

    function readContext(context, observedBits) {
      if (lastContextWithAllBitsObserved === context) {// Nothing to do. We already observe everything in this context.
      } else if (observedBits === false || observedBits === 0) {// Do not observe any updates.
      } else {
        var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.

        if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
          // Observe all updates.
          lastContextWithAllBitsObserved = context;
          resolvedObservedBits = maxSigned31BitInt;
        } else {
          resolvedObservedBits = observedBits;
        }

        var contextItem = {
          context: context,
          observedBits: resolvedObservedBits,
          next: null
        };

        if (lastContextDependency === null) {
          !(currentlyRenderingFiber !== null) ? invariant(false, 'Context.unstable_read(): Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.') : void 0; // This is the first dependency in the list

          currentlyRenderingFiber.firstContextDependency = lastContextDependency = contextItem;
        } else {
          // Append a new context item.
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }

      return isPrimaryRenderer ? context._currentValue : context._currentValue2;
    }

    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);

    function requiredContext(c) {
      !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      return c;
    }

    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }

    function pushHostContainer(fiber, nextRootInstance) {
      // Push current root instance onto the stack;
      // This allows us to reset root when portals are popped.
      push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.

      push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
      // However, we can't just call getRootHostContext() and push it because
      // we'd have a different number of entries on the stack depending on
      // whether getRootHostContext() throws somewhere in renderer code or not.
      // So we push an empty value first. This lets us safely unwind on errors.

      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }

    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }

    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }

    function pushHostContext(fiber) {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

      if (context === nextContext) {
        return;
      } // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.


      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }

    function popHostContext(fiber) {
      // Do not pop unless this Fiber provided the current context.
      // pushHostContext() only pushes Fibers that provide unique contexts.
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }

      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }

    var commitTime = 0;
    var profilerStartTime = -1;

    function getCommitTime() {
      return commitTime;
    }

    function recordCommitTime() {
      if (!enableProfilerTimer) {
        return;
      }

      commitTime = schedule.unstable_now();
    }

    function startProfilerTimer(fiber) {
      if (!enableProfilerTimer) {
        return;
      }

      profilerStartTime = schedule.unstable_now();

      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = schedule.unstable_now();
      }
    }

    function stopProfilerTimerIfRunning(fiber) {
      if (!enableProfilerTimer) {
        return;
      }

      profilerStartTime = -1;
    }

    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (!enableProfilerTimer) {
        return;
      }

      if (profilerStartTime >= 0) {
        var elapsedTime = schedule.unstable_now() - profilerStartTime;
        fiber.actualDuration += elapsedTime;

        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }

        profilerStartTime = -1;
      }
    }

    var fakeInternalInstance = {};
    var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.

    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent = void 0;
    var didWarnAboutUninitializedState = void 0;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
    var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
    var didWarnAboutUndefinedDerivedState = void 0;
    var warnOnUndefinedDerivedState = void 0;
    var warnOnInvalidCallback$1 = void 0;
    var didWarnAboutDirectlyAssigningPropsToState = void 0;
    {
      didWarnAboutStateAssignmentForComponent = new Set();
      didWarnAboutUninitializedState = new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
      didWarnAboutDirectlyAssigningPropsToState = new Set();
      didWarnAboutUndefinedDerivedState = new Set();
      var didWarnOnInvalidCallback = new Set();

      warnOnInvalidCallback$1 = function (callback, callerName) {
        if (callback === null || typeof callback === 'function') {
          return;
        }

        var key = callerName + '_' + callback;

        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
        }
      };

      warnOnUndefinedDerivedState = function (type, partialState) {
        if (partialState === undefined) {
          var componentName = getComponentName(type) || 'Component';

          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
          }
        }
      }; // This is so gross but it's at least non-critical and can be removed if
      // it causes problems. This is meant to give a nicer error message for
      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
      // ...)) which otherwise throws a "_processChildContext is not a function"
      // exception.


      Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function () {
          invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
        }
      });
      Object.freeze(fakeInternalInstance);
    }

    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress.memoizedState;
      {
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          // Invoke the function an extra time to help detect side-effects.
          getDerivedStateFromProps(nextProps, prevState);
        }
      }
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        warnOnUndefinedDerivedState(ctor, partialState);
      } // Merge the partial state and the previous state.

      var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
      workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
      // base state.

      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
        updateQueue.baseState = memoizedState;
      }
    }

    var classComponentUpdater = {
      isMounted: isMounted,
      enqueueSetState: function (inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'setState');
          }
          update.callback = callback;
        }

        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueReplaceState: function (inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.tag = ReplaceState;
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'replaceState');
          }
          update.callback = callback;
        }

        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueForceUpdate: function (inst, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.tag = ForceUpdate;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'forceUpdate');
          }
          update.callback = callback;
        }

        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      }
    };

    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext) {
      var instance = workInProgress.stateNode;

      if (typeof instance.shouldComponentUpdate === 'function') {
        startPhaseTimer(workInProgress, 'shouldComponentUpdate');
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextLegacyContext);
        stopPhaseTimer();
        {
          !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
        }
        return shouldUpdate;
      }

      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }

      return true;
    }

    function checkClassInstance(workInProgress, ctor, newProps) {
      var instance = workInProgress.stateNode;
      {
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;

        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === 'function') {
            warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
          } else {
            warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
          }
        }

        var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
        !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
        var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
        !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
        var noInstancePropTypes = !instance.propTypes;
        !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
        var noInstanceContextTypes = !instance.contextTypes;
        !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;
        var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
        !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;

        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
          warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
        }

        var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
        !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
        var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
        !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
        var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
        !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
        var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
        !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
        var hasMutatedProps = instance.props !== newProps;
        !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
        var noInstanceDefaultProps = !instance.defaultProps;
        !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
        }

        var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
        !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
        var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromCatch !== 'function';
        !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromCatch() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
        var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
        !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
        var _state = instance.state;

        if (_state && (typeof _state !== 'object' || isArray(_state))) {
          warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
        }

        if (typeof instance.getChildContext === 'function') {
          !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
        }
      }
    }

    function adoptClassInstance(workInProgress, instance) {
      instance.updater = classComponentUpdater;
      workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

      set(instance, workInProgress);
      {
        instance._reactInternalInstance = fakeInternalInstance;
      }
    }

    function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
      var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      var contextTypes = ctor.contextTypes;
      var isContextConsumer = contextTypes !== null && contextTypes !== undefined;
      var context = isContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject; // Instantiate twice to help detect side-effects.

      {
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          new ctor(props, context); // eslint-disable-line no-new
        }
      }
      var instance = new ctor(props, context);
      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
      adoptClassInstance(workInProgress, instance);
      {
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
          var componentName = getComponentName(ctor) || 'Component';

          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
          }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.


        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;

          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = 'componentWillMount';
          } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
            foundWillMountName = 'UNSAFE_componentWillMount';
          }

          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = 'componentWillReceiveProps';
          } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
          }

          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = 'componentWillUpdate';
          } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            foundWillUpdateName = 'UNSAFE_componentWillUpdate';
          }

          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentName(ctor) || 'Component';

            var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
            }
          }
        }
      } // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // ReactFiberContext usually updates this cache but can't for newly-created instances.

      if (isContextConsumer) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return instance;
    }

    function callComponentWillMount(workInProgress, instance) {
      startPhaseTimer(workInProgress, 'componentWillMount');
      var oldState = instance.state;

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();

      if (oldState !== instance.state) {
        {
          warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }

    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext) {
      var oldState = instance.state;
      startPhaseTimer(workInProgress, 'componentWillReceiveProps');

      if (typeof instance.componentWillReceiveProps === 'function') {
        instance.componentWillReceiveProps(newProps, nextLegacyContext);
      }

      if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        instance.UNSAFE_componentWillReceiveProps(newProps, nextLegacyContext);
      }

      stopPhaseTimer();

      if (instance.state !== oldState) {
        {
          var componentName = getComponentName(workInProgress.type) || 'Component';

          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    } // Invokes the mount life-cycles on a previously never rendered instance.


    function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      {
        checkClassInstance(workInProgress, ctor, newProps);
      }
      var instance = workInProgress.stateNode;
      var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;
      instance.context = getMaskedContext(workInProgress, unmaskedContext);
      {
        if (instance.state === newProps) {
          var componentName = getComponentName(ctor) || 'Component';

          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        }

        if (warnAboutDeprecatedLifecycles) {
          ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
        }
      }
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        instance.state = workInProgress.memoizedState;
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        instance.state = workInProgress.memoizedState;
      } // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.


      if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
        callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
        // process them now.

        updateQueue = workInProgress.updateQueue;

        if (updateQueue !== null) {
          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
          instance.state = workInProgress.memoizedState;
        }
      }

      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
    }

    function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context;
      var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      var nextLegacyContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.

      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextLegacyContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }

        return false;
      }

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext);

      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
          startPhaseTimer(workInProgress, 'componentWillMount');

          if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
          }

          if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
          }

          stopPhaseTimer();
        }

        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        } // If shouldComponentUpdate returned false, we should still update the
        // memoized state to indicate that this work can be reused.


        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      } // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.


      instance.props = newProps;
      instance.state = newState;
      instance.context = nextLegacyContext;
      return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.


    function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context;
      var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      var nextLegacyContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.

      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextLegacyContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        }

        return false;
      }

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext);

      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
          startPhaseTimer(workInProgress, 'componentWillUpdate');

          if (typeof instance.componentWillUpdate === 'function') {
            instance.componentWillUpdate(newProps, newState, nextLegacyContext);
          }

          if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextLegacyContext);
          }

          stopPhaseTimer();
        }

        if (typeof instance.componentDidUpdate === 'function') {
          workInProgress.effectTag |= Update;
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          workInProgress.effectTag |= Snapshot;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        } // If shouldComponentUpdate returned false, we should still update the
        // memoized props/state to indicate that this work can be reused.


        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      } // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.


      instance.props = newProps;
      instance.state = newState;
      instance.context = nextLegacyContext;
      return shouldUpdate;
    }

    var didWarnAboutMaps = void 0;
    var didWarnAboutGenerators = void 0;
    var didWarnAboutStringRefInStrictMode = void 0;
    var ownerHasKeyUseWarning = void 0;
    var ownerHasFunctionTypeWarning = void 0;

    var warnForMissingKey = function (child) {};

    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefInStrictMode = {};
      /**
       * Warn if there's no key explicitly set on dynamic arrays of children or
       * object keys are not valid. This allows us to keep track of children between
       * updates.
       */

      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};

      warnForMissingKey = function (child) {
        if (child === null || typeof child !== 'object') {
          return;
        }

        if (!child._store || child._store.validated || child.key != null) {
          return;
        }

        !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        child._store.validated = true;
        var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        warning$1(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
      };
    }
    var isArray$1 = Array.isArray;

    function coerceRef(returnFiber, current$$1, element) {
      var mixedRef = element.ref;

      if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
        {
          if (returnFiber.mode & StrictMode) {
            var componentName = getComponentName(returnFiber.type) || 'Component';

            if (!didWarnAboutStringRefInStrictMode[componentName]) {
              warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
              didWarnAboutStringRefInStrictMode[componentName] = true;
            }
          }
        }

        if (element._owner) {
          var owner = element._owner;
          var inst = void 0;

          if (owner) {
            var ownerFiber = owner;
            !(ownerFiber.tag === ClassComponent || ownerFiber.tag === ClassComponentLazy) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
            inst = ownerFiber.stateNode;
          }

          !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
          var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

          if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
            return current$$1.ref;
          }

          var ref = function (value) {
            var refs = inst.refs;

            if (refs === emptyRefsObject) {
              // This is a lazy pooled frozen object, so we need to initialize.
              refs = inst.refs = {};
            }

            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };

          ref._stringRef = stringRef;
          return ref;
        } else {
          !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
          !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
        }
      }

      return mixedRef;
    }

    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (returnFiber.type !== 'textarea') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
        }
        invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
      }
    }

    function warnOnFunctionType() {
      var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

      if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
      warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.


    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return;
        } // Deletions are added in reversed order so we add it to the front.
        // At this point, the return fiber's effect list is empty except for
        // deletions, so we can just append the deletion to the list. The remaining
        // effects aren't added until the complete phase. Once we implement
        // resuming, this may not be true.


        var last = returnFiber.lastEffect;

        if (last !== null) {
          last.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }

        childToDelete.nextEffect = null;
        childToDelete.effectTag = Deletion;
      }

      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return null;
        } // TODO: For the shouldClone case, this could be micro-optimized a bit by
        // assuming that after the first child we've already added everything.


        var childToDelete = currentFirstChild;

        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }

        return null;
      }

      function mapRemainingChildren(returnFiber, currentFirstChild) {
        // Add the remaining children to a temporary map so that we can find them by
        // keys quickly. Implicit (null) keys get added to this set with their index
        var existingChildren = new Map();
        var existingChild = currentFirstChild;

        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }

          existingChild = existingChild.sibling;
        }

        return existingChildren;
      }

      function useFiber(fiber, pendingProps, expirationTime) {
        // We currently set sibling to null and index to 0 here because it is easy
        // to forget to do before returning it. E.g. for the single child case.
        var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }

      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;

        if (!shouldTrackSideEffects) {
          // Noop.
          return lastPlacedIndex;
        }

        var current$$1 = newFiber.alternate;

        if (current$$1 !== null) {
          var oldIndex = current$$1.index;

          if (oldIndex < lastPlacedIndex) {
            // This is a move.
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          } else {
            // This item can stay in place.
            return oldIndex;
          }
        } else {
          // This is an insertion.
          newFiber.effectTag = Placement;
          return lastPlacedIndex;
        }
      }

      function placeSingleChild(newFiber) {
        // This is simpler for the single child case. We only need to do a
        // placement for inserting new children.
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.effectTag = Placement;
        }

        return newFiber;
      }

      function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostText) {
          // Insert
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, textContent, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function updateElement(returnFiber, current$$1, element, expirationTime) {
        if (current$$1 !== null && current$$1.type === element.type) {
          // Move based on index
          var existing = useFiber(current$$1, element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, current$$1, element);
          existing.return = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          // Insert
          var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
          created.ref = coerceRef(returnFiber, current$$1, element);
          created.return = returnFiber;
          return created;
        }
      }

      function updatePortal(returnFiber, current$$1, portal, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
          // Insert
          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
        if (current$$1 === null || current$$1.tag !== Fragment) {
          // Insert
          var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, fragment, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function createChild(returnFiber, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }

            case REACT_PORTAL_TYPE:
              {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

                _created2.return = returnFiber;
                return _created2;
              }
          }

          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

            _created3.return = returnFiber;
            return _created3;
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
        // Update the fiber if the keys match, otherwise return null.
        var key = oldFiber !== null ? oldFiber.key : null;

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          if (key !== null) {
            return null;
          }

          return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                  }

                  return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }

            case REACT_PORTAL_TYPE:
              {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
          }

          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }

            return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys, so we neither have to check the old nor
          // new node for the key. If both are text nodes, they match.
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                }

                return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
              }

            case REACT_PORTAL_TYPE:
              {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
              }
          }

          if (isArray$1(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;

            return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }
      /**
       * Warns if there is a duplicate or missing key
       */


      function warnOnInvalidKey(child, knownKeys) {
        {
          if (typeof child !== 'object' || child === null) {
            return knownKeys;
          }

          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child);
              var key = child.key;

              if (typeof key !== 'string') {
                break;
              }

              if (knownKeys === null) {
                knownKeys = new Set();
                knownKeys.add(key);
                break;
              }

              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }

              warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
              break;

            default:
              break;
          }
        }
        return knownKeys;
      }

      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
        // This algorithm can't optimize by searching from boths ends since we
        // don't have backpointers on fibers. I'm trying to see how far we can get
        // with that model. If it ends up not being worth the tradeoffs, we can
        // add it later.
        // Even with a two ended optimization, we'd want to optimize for the case
        // where there are few changes and brute force the comparison instead of
        // going for the Map. It'd like to explore hitting that path first in
        // forward-only mode and only go for the Map once we notice that we need
        // lots of look ahead. This doesn't handle reversal as well as two ended
        // search but that's unusual. Besides, for the two ended optimization to
        // work on Iterables, we'd need to copy the whole set.
        // In this first iteration, we'll just live with hitting the bad case
        // (adding everything to a Map) in for every insert/move.
        // If you change this code, also update reconcileChildrenIterator() which
        // uses the same algorithm.
        {
          // First, validate keys.
          var knownKeys = null;

          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;

        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (newIdx === newChildren.length) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

            if (!_newFiber) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }

            previousNewFiber = _newFiber;
          }

          return resultingFirstChild;
        } // Add all children to a key map for quick lookups.


        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

          if (_newFiber2) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }

            previousNewFiber = _newFiber2;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
        // This is the same implementation as reconcileChildrenArray(),
        // but using the iterator instead.
        var iteratorFn = getIteratorFn(newChildrenIterable);
        !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        {
          // We don't support rendering Generators because it's a mutation.
          // See https://github.com/facebook/react/issues/12995
          if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
          newChildrenIterable[Symbol.toStringTag] === 'Generator') {
            !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
            didWarnAboutGenerators = true;
          } // Warn about using Maps as children


          if (newChildrenIterable.entries === iteratorFn) {
            !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
            didWarnAboutMaps = true;
          } // First, validate keys.
          // We'll get a different iterator later for the main pass.


          var _newChildren = iteratorFn.call(newChildrenIterable);

          if (_newChildren) {
            var knownKeys = null;

            var _step = _newChildren.next();

            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();

        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (!oldFiber) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (step.done) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

            if (_newFiber3 === null) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }

            previousNewFiber = _newFiber3;
          }

          return resultingFirstChild;
        } // Add all children to a key map for quick lookups.


        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }

            previousNewFiber = _newFiber4;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
        // There's no need to check for keys on text nodes since we don't have a
        // way to define them.
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          // We already have an existing node so let's just update it and delete
          // the rest.
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent, expirationTime);
          existing.return = returnFiber;
          return existing;
        } // The existing first child is not a text node so we need to create one
        // and delete the existing ones.


        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      }

      function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
        var key = element.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
              existing.ref = coerceRef(returnFiber, child, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }

      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
        var key = portal.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || [], expirationTime);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      } // This API will tag the children with the side-effect of the reconciliation
      // itself. They will be added to the side-effect list as we pass through the
      // children and the parent.


      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
        // This function is not recursive.
        // If the top level item is an array, we treat it as a set of children,
        // not as a fragment. Nested arrays on the other hand will be treated as
        // fragment nodes. Recursion happens at the normal flow.
        // Handle top level unkeyed fragments as if they were arrays.
        // This leads to an ambiguity between <>{[...]}</> and <>...</>.
        // We treat the ambiguous cases above the same.
        var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        } // Handle object types


        var isObject = typeof newChild === 'object' && newChild !== null;

        if (isObject) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
          }
        }

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
        }

        if (isArray$1(newChild)) {
          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (getIteratorFn(newChild)) {
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (isObject) {
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
          // If the new child is undefined, and the return fiber is a composite
          // component, throw an error. If Fiber return types are disabled,
          // we already threw above.
          switch (returnFiber.tag) {
            case ClassComponent:
            case ClassComponentLazy:
              {
                {
                  var instance = returnFiber.stateNode;

                  if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                    break;
                  }
                }
              }
            // Intentionally fall through to the next case, which handles both
            // functions and classes
            // eslint-disable-next-lined no-fallthrough

            case FunctionalComponent:
              {
                var Component = returnFiber.type;
                invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
              }
          }
        } // Remaining cases are all treated as empty.


        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }

      return reconcileChildFibers;
    }

    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);

    function cloneChildFibers(current$$1, workInProgress) {
      !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

      if (workInProgress.child === null) {
        return;
      }

      var currentChild = workInProgress.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
      workInProgress.child = newChild;
      newChild.return = workInProgress;

      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        newChild.return = workInProgress;
      }

      newChild.sibling = null;
    } // The deepest Fiber on the stack involved in a hydration context.
    // This may have been an insertion or a hydration.


    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;

    function enterHydrationState(fiber) {
      if (!supportsHydration) {
        return false;
      }

      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChild(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      return true;
    }

    function deleteHydratableInstance(returnFiber, instance) {
      {
        switch (returnFiber.tag) {
          case HostRoot:
            didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
            break;

          case HostComponent:
            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
            break;
        }
      }
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance;
      childToDelete.return = returnFiber;
      childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
      // these children are not part of the reconciliation list of children.
      // Even if we abort and rereconcile the children, that will try to hydrate
      // again and the nodes are still in the host tree so these will be
      // recreated.

      if (returnFiber.lastEffect !== null) {
        returnFiber.lastEffect.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }
    }

    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.effectTag |= Placement;
      {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;

              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type, props);
                  break;

                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;
              }

              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;

              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                  break;

                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;
              }

              break;
            }

          default:
            return;
        }
      }
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent:
          {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type, props);

            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }

            return false;
          }

        case HostText:
          {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);

            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }

            return false;
          }

        default:
          return false;
      }
    }

    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }

      var nextInstance = nextHydratableInstance;

      if (!nextInstance) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }

      var firstAttemptedInstance = nextInstance;

      if (!tryHydrate(fiber, nextInstance)) {
        // If we can't hydrate this instance let's try the next one.
        // We use this as a heuristic. It's based on intuition and not data so it
        // might be flawed or unnecessary.
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);

        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          // Nothing to hydrate. Make it an insertion.
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        } // We matched the next one, we'll now assume that the first one was
        // superfluous and we'll delete it. Since we can't eagerly delete it
        // we'll have to schedule a deletion. To do that, this node needs a dummy
        // fiber associated with it.


        deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
      }

      hydrationParentFiber = fiber;
      nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }

    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      if (!supportsHydration) {
        invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var instance = fiber.stateNode;
      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

      fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
      // is a new ref we mark this as an update.

      if (updatePayload !== null) {
        return true;
      }

      return false;
    }

    function prepareToHydrateHostTextInstance(fiber) {
      if (!supportsHydration) {
        invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      {
        if (shouldUpdate) {
          // We assume that prepareToHydrateHostTextInstance is called in a context where the
          // hydration parent is the parent host component of this host text.
          var returnFiber = hydrationParentFiber;

          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
            }
          }
        }
      }
      return shouldUpdate;
    }

    function popToNextHostParent(fiber) {
      var parent = fiber.return;

      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
        parent = parent.return;
      }

      hydrationParentFiber = parent;
    }

    function popHydrationState(fiber) {
      if (!supportsHydration) {
        return false;
      }

      if (fiber !== hydrationParentFiber) {
        // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
      }

      if (!isHydrating) {
        // If we're not currently hydrating but we're in a hydration context, then
        // we were an insertion and now need to pop up reenter hydration of our
        // siblings.
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }

      var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
      // We only do this deeper than head and body since they tend to have random
      // other nodes in them. We also ignore components with pure text content in
      // side of them.
      // TODO: Better heuristic.

      if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
        var nextInstance = nextHydratableInstance;

        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }

      popToNextHostParent(fiber);
      nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      return true;
    }

    function resetHydrationState() {
      if (!supportsHydration) {
        return;
      }

      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
    }

    function readLazyComponentType(thenable) {
      var status = thenable._reactStatus;

      switch (status) {
        case Resolved:
          var Component = thenable._reactResult;
          return Component;

        case Rejected:
          throw thenable._reactResult;

        case Pending:
          throw thenable;

        default:
          {
            thenable._reactStatus = Pending;
            thenable.then(function (resolvedValue) {
              if (thenable._reactStatus === Pending) {
                thenable._reactStatus = Resolved;

                if (typeof resolvedValue === 'object' && resolvedValue !== null) {
                  // If the `default` property is not empty, assume it's the result
                  // of an async import() and use that. Otherwise, use the
                  // resolved value itself.
                  var defaultExport = resolvedValue.default;
                  resolvedValue = defaultExport !== undefined && defaultExport !== null ? defaultExport : resolvedValue;
                } else {
                  resolvedValue = resolvedValue;
                }

                thenable._reactResult = resolvedValue;
              }
            }, function (error) {
              if (thenable._reactStatus === Pending) {
                thenable._reactStatus = Rejected;
                thenable._reactResult = error;
              }
            });
            throw thenable;
          }
      }
    }

    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var didWarnAboutBadClass = void 0;
    var didWarnAboutGetDerivedStateOnFunctionalComponent = void 0;
    var didWarnAboutStatelessRefs = void 0;
    {
      didWarnAboutBadClass = {};
      didWarnAboutGetDerivedStateOnFunctionalComponent = {};
      didWarnAboutStatelessRefs = {};
    }

    function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      if (current$$1 === null) {
        // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
      }
    }

    function updateForwardRef(current$$1, workInProgress, type, nextProps, renderExpirationTime) {
      var render = type.render;
      var ref = workInProgress.ref;

      if (hasContextChanged()) {// Normally we can bail out on props equality but if context has changed
        // we don't do the bailout and we have to reuse existing props instead.
      } else if (workInProgress.memoizedProps === nextProps) {
        var currentRef = current$$1 !== null ? current$$1.ref : null;

        if (ref === currentRef) {
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }

      var nextChildren = void 0;
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = render(nextProps, ref);
        setCurrentPhase(null);
      }
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      memoizeProps(workInProgress, nextProps);
      return workInProgress.child;
    }

    function updateFragment(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      memoizeProps(workInProgress, nextChildren);
      return workInProgress.child;
    }

    function updateMode(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      memoizeProps(workInProgress, nextChildren);
      return workInProgress.child;
    }

    function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
      if (enableProfilerTimer) {
        workInProgress.effectTag |= Update;
      }

      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      memoizeProps(workInProgress, nextProps);
      return workInProgress.child;
    }

    function markRef(current$$1, workInProgress) {
      var ref = workInProgress.ref;

      if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
        // Schedule a Ref effect
        workInProgress.effectTag |= Ref;
      }
    }

    function updateFunctionalComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
      var context = getMaskedContext(workInProgress, unmaskedContext);
      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = Component(nextProps, context);
        setCurrentPhase(null);
      } // React DevTools reads this flag.

      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      memoizeProps(workInProgress, nextProps);
      return workInProgress.child;
    }

    function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext = void 0;

      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      var shouldUpdate = void 0;

      if (current$$1 === null) {
        if (workInProgress.stateNode === null) {
          // In the initial pass we might need to construct the instance.
          constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
          mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
          shouldUpdate = true;
        } else {
          // In a resume, we'll already have an instance we can reuse.
          shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        }
      } else {
        shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
      }

      return finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
    }

    function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
      // Refs should update even if shouldComponentUpdate returns false
      markRef(current$$1, workInProgress);
      var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

      if (!shouldUpdate && !didCaptureError) {
        // Context providers should defer to sCU for rendering
        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, false);
        }

        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var instance = workInProgress.stateNode; // Rerender

      ReactCurrentOwner$3.current = workInProgress;
      var nextChildren = void 0;

      if (didCaptureError && (!enableGetDerivedStateFromCatch || typeof Component.getDerivedStateFromCatch !== 'function')) {
        // If we captured an error, but getDerivedStateFrom catch is not defined,
        // unmount all the children. componentDidCatch will schedule an update to
        // re-render a fallback. This is temporary until we migrate everyone to
        // the new API.
        // TODO: Warn in a future release.
        nextChildren = null;

        if (enableProfilerTimer) {
          stopProfilerTimerIfRunning(workInProgress);
        }
      } else {
        {
          setCurrentPhase('render');
          nextChildren = instance.render();

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            instance.render();
          }

          setCurrentPhase(null);
        }
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;

      if (current$$1 !== null && didCaptureError) {
        // If we're recovering from an error, reconcile twice: first to delete
        // all the existing children.
        reconcileChildren(current$$1, workInProgress, null, renderExpirationTime);
        workInProgress.child = null; // Now we can continue reconciling like normal. This has the effect of
        // remounting all children regardless of whether their their
        // identity matches.
      }

      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime); // Memoize props and state using the values we just used to render.
      // TODO: Restructure so we never read values from the instance.

      memoizeState(workInProgress, instance.state);
      memoizeProps(workInProgress, instance.props); // The context might have changed so we need to recalculate it.

      if (hasContext) {
        invalidateContextProvider(workInProgress, Component, true);
      }

      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;

      if (root.pendingContext) {
        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
      } else if (root.context) {
        // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
      }

      pushHostContainer(workInProgress, root.containerInfo);
    }

    function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
      pushHostRootContext(workInProgress);
      var updateQueue = workInProgress.updateQueue;
      !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var nextProps = workInProgress.pendingProps;
      var prevState = workInProgress.memoizedState;
      var prevChildren = prevState !== null ? prevState.element : null;
      processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
      var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
      // being called "element".

      var nextChildren = nextState.element;

      if (nextChildren === prevChildren) {
        // If the state is the same as before, that's a bailout because we had
        // no work that expires at this time.
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var root = workInProgress.stateNode;

      if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.
        // This is a bit of a hack. We track the host root as a placement to
        // know that we're currently in a mounting state. That way isMounted
        // works as expected. We must reset this before committing.
        // TODO: Delete this when we delete isMounted and findDOMNode.
        workInProgress.effectTag |= Placement; // Ensure that children mount into this root without tracking
        // side-effects. This ensures that we don't store Placement effects on
        // nodes that will be hydrated.

        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        resetHydrationState();
      }

      return workInProgress.child;
    }

    function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContext(workInProgress);

      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }

      var type = workInProgress.type;
      var nextProps = workInProgress.pendingProps;
      var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);

      if (isDirectTextChild) {
        // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also have access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.effectTag |= ContentReset;
      }

      markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.

      if (renderExpirationTime !== Never && workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps)) {
        // Schedule this fiber to re-render at offscreen priority. Then bailout.
        workInProgress.expirationTime = Never;
        workInProgress.memoizedProps = nextProps;
        return null;
      }

      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      memoizeProps(workInProgress, nextProps);
      return workInProgress.child;
    }

    function updateHostText(current$$1, workInProgress) {
      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }

      var nextProps = workInProgress.pendingProps;
      memoizeProps(workInProgress, nextProps); // Nothing to do here. This is terminal. We'll do the completion step
      // immediately after.

      return null;
    }

    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        // Resolve default props. Taken from ReactElement
        var props = _assign({}, baseProps);

        var defaultProps = Component.defaultProps;

        for (var propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }

        return props;
      }

      return baseProps;
    }

    function mountIndeterminateComponent(current$$1, workInProgress, Component, renderExpirationTime) {
      !(current$$1 === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var props = workInProgress.pendingProps;

      if (typeof Component === 'object' && Component !== null && typeof Component.then === 'function') {
        Component = readLazyComponentType(Component);
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(workInProgress, Component);
        var resolvedProps = resolveDefaultProps(Component, props);

        switch (resolvedTag) {
          case FunctionalComponentLazy:
            {
              return updateFunctionalComponent(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);
            }

          case ClassComponentLazy:
            {
              return updateClassComponent(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);
            }

          case ForwardRefLazy:
            {
              return updateForwardRef(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);
            }

          default:
            {
              // This message intentionally doesn't metion ForwardRef because the
              // fact that it's a separate type of work is an implementation detail.
              invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.', Component);
            }
        }
      }

      var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
      var context = getMaskedContext(workInProgress, unmaskedContext);
      prepareToReadContext(workInProgress, renderExpirationTime);
      var value = void 0;
      {
        if (Component.prototype && typeof Component.prototype.render === 'function') {
          var componentName = getComponentName(Component) || 'Unknown';

          if (!didWarnAboutBadClass[componentName]) {
            warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        }

        ReactCurrentOwner$3.current = workInProgress;
        value = Component(props, context);
      } // React DevTools reads this flag.

      workInProgress.effectTag |= PerformedWork;

      if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
        // Proceed under the assumption that this is a class instance
        workInProgress.tag = ClassComponent; // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.

        var hasContext = false;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;

        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
        }

        adoptClassInstance(workInProgress, value);
        mountClassInstance(workInProgress, Component, props, renderExpirationTime);
        return finishClassComponent(current$$1, workInProgress, Component, true, hasContext, renderExpirationTime);
      } else {
        // Proceed under the assumption that this is a functional component
        workInProgress.tag = FunctionalComponent;
        {
          if (Component) {
            !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
          }

          if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }

            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;

            if (debugSource) {
              warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            }

            if (!didWarnAboutStatelessRefs[warningKey]) {
              didWarnAboutStatelessRefs[warningKey] = true;
              warning$1(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s', info);
            }
          }

          if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName = getComponentName(Component) || 'Unknown';

            if (!didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName]) {
              warningWithoutStack$1(false, '%s: Stateless functional components do not support getDerivedStateFromProps.', _componentName);
              didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName] = true;
            }
          }
        }
        reconcileChildren(current$$1, workInProgress, value, renderExpirationTime);
        memoizeProps(workInProgress, props);
        return workInProgress.child;
      }
    }

    function updatePlaceholderComponent(current$$1, workInProgress, renderExpirationTime) {
      if (enableSuspense) {
        var nextProps = workInProgress.pendingProps; // Check if we already attempted to render the normal state. If we did,
        // and we timed out, render the placeholder state.

        var alreadyCaptured = (workInProgress.effectTag & DidCapture) === NoEffect;
        var nextDidTimeout = void 0;

        if (current$$1 !== null && workInProgress.updateQueue !== null) {
          // We're outside strict mode. Something inside this Placeholder boundary
          // suspended during the last commit. Switch to the placholder.
          workInProgress.updateQueue = null;
          nextDidTimeout = true; // If we're recovering from an error, reconcile twice: first to delete
          // all the existing children.

          reconcileChildren(current$$1, workInProgress, null, renderExpirationTime);
          current$$1.child = null; // Now we can continue reconciling like normal. This has the effect of
          // remounting all children regardless of whether their their
          // identity matches.
        } else {
          nextDidTimeout = !alreadyCaptured;
        }

        if ((workInProgress.mode & StrictMode) !== NoEffect) {
          if (nextDidTimeout) {
            // If the timed-out view commits, schedule an update effect to record
            // the committed time.
            workInProgress.effectTag |= Update;
          } else {
            // The state node points to the time at which placeholder timed out.
            // We can clear it once we switch back to the normal children.
            workInProgress.stateNode = null;
          }
        } // If the `children` prop is a function, treat it like a render prop.
        // TODO: This is temporary until we finalize a lower level API.


        var children = nextProps.children;
        var nextChildren = void 0;

        if (typeof children === 'function') {
          nextChildren = children(nextDidTimeout);
        } else {
          nextChildren = nextDidTimeout ? nextProps.fallback : children;
        }

        workInProgress.memoizedProps = nextProps;
        workInProgress.memoizedState = nextDidTimeout;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
      } else {
        return null;
      }
    }

    function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      var nextChildren = workInProgress.pendingProps;

      if (current$$1 === null) {
        // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        memoizeProps(workInProgress, nextChildren);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        memoizeProps(workInProgress, nextChildren);
      }

      return workInProgress.child;
    }

    function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
      var providerType = workInProgress.type;
      var context = providerType._context;
      var newProps = workInProgress.pendingProps;
      var oldProps = workInProgress.memoizedProps;
      var newValue = newProps.value;
      workInProgress.memoizedProps = newProps;
      {
        var providerPropTypes = workInProgress.type.propTypes;

        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
        }
      }
      pushProvider(workInProgress, newValue);

      if (oldProps !== null) {
        var oldValue = oldProps.value;
        var changedBits = calculateChangedBits(context, newValue, oldValue);

        if (changedBits === 0) {
          // No change. Bailout early if children are the same.
          if (oldProps.children === newProps.children && !hasContextChanged()) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        } else {
          // The context value changed. Search for matching consumers and schedule
          // them to update.
          propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
        }
      }

      var newChildren = newProps.children;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
      var context = workInProgress.type;
      var newProps = workInProgress.pendingProps;
      var render = newProps.children;
      {
        !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
      }
      prepareToReadContext(workInProgress, renderExpirationTime);
      var newValue = readContext(context, newProps.unstable_observedBits);
      var newChildren = void 0;
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        newChildren = render(newValue);
        setCurrentPhase(null);
      } // React DevTools reads this flag.

      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      workInProgress.memoizedProps = newProps;
      return workInProgress.child;
    }
    /*
      function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
        let child = firstChild;
        do {
          // Ensure that the first and last effect of the parent corresponds
          // to the children's first and last effect.
          if (!returnFiber.firstEffect) {
            returnFiber.firstEffect = child.firstEffect;
          }
          if (child.lastEffect) {
            if (returnFiber.lastEffect) {
              returnFiber.lastEffect.nextEffect = child.firstEffect;
            }
            returnFiber.lastEffect = child.lastEffect;
          }
        } while (child = child.sibling);
      }
      */


    function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
      cancelWorkTimer(workInProgress);

      if (current$$1 !== null) {
        // Reuse previous context list
        workInProgress.firstContextDependency = current$$1.firstContextDependency;
      }

      if (enableProfilerTimer) {
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning(workInProgress);
      } // Check if the children have any pending work.


      var childExpirationTime = workInProgress.childExpirationTime;

      if (childExpirationTime === NoWork || childExpirationTime > renderExpirationTime) {
        // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
      } else {
        // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current$$1, workInProgress);
        return workInProgress.child;
      }
    } // TODO: Delete memoizeProps/State and move to reconcile/bailout instead


    function memoizeProps(workInProgress, nextProps) {
      workInProgress.memoizedProps = nextProps;
    }

    function memoizeState(workInProgress, nextState) {
      workInProgress.memoizedState = nextState; // Don't reset the updateQueue, in case there are pending updates. Resetting
      // is handled by processUpdateQueue.
    }

    function beginWork(current$$1, workInProgress, renderExpirationTime) {
      var updateExpirationTime = workInProgress.expirationTime;

      if (!hasContextChanged() && (updateExpirationTime === NoWork || updateExpirationTime > renderExpirationTime)) {
        // This fiber does not have any pending work. Bailout without entering
        // the begin phase. There's still some bookkeeping we that needs to be done
        // in this optimized path, mostly pushing stuff onto the stack.
        switch (workInProgress.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress);
            resetHydrationState();
            break;

          case HostComponent:
            pushHostContext(workInProgress);
            break;

          case ClassComponent:
            {
              var Component = workInProgress.type;

              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress);
              }

              break;
            }

          case ClassComponentLazy:
            {
              var thenable = workInProgress.type;

              var _Component = getResultFromResolvedThenable(thenable);

              if (isContextProvider(_Component)) {
                pushContextProvider(workInProgress);
              }

              break;
            }

          case HostPortal:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            break;

          case ContextProvider:
            {
              var newValue = workInProgress.memoizedProps.value;
              pushProvider(workInProgress, newValue);
              break;
            }

          case Profiler:
            if (enableProfilerTimer) {
              workInProgress.effectTag |= Update;
            }

            break;
        }

        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      } // Before entering the begin phase, clear the expiration time.


      workInProgress.expirationTime = NoWork;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          {
            var _Component3 = workInProgress.type;
            return mountIndeterminateComponent(current$$1, workInProgress, _Component3, renderExpirationTime);
          }

        case FunctionalComponent:
          {
            var _Component4 = workInProgress.type;
            var _unresolvedProps = workInProgress.pendingProps;
            return updateFunctionalComponent(current$$1, workInProgress, _Component4, _unresolvedProps, renderExpirationTime);
          }

        case FunctionalComponentLazy:
          {
            var _thenable2 = workInProgress.type;

            var _Component5 = getResultFromResolvedThenable(_thenable2);

            var _unresolvedProps2 = workInProgress.pendingProps;

            var _child = updateFunctionalComponent(current$$1, workInProgress, _Component5, resolveDefaultProps(_Component5, _unresolvedProps2), renderExpirationTime);

            workInProgress.memoizedProps = _unresolvedProps2;
            return _child;
          }

        case ClassComponent:
          {
            var _Component6 = workInProgress.type;
            var _unresolvedProps3 = workInProgress.pendingProps;
            return updateClassComponent(current$$1, workInProgress, _Component6, _unresolvedProps3, renderExpirationTime);
          }

        case ClassComponentLazy:
          {
            var _thenable3 = workInProgress.type;

            var _Component7 = getResultFromResolvedThenable(_thenable3);

            var _unresolvedProps4 = workInProgress.pendingProps;

            var _child2 = updateClassComponent(current$$1, workInProgress, _Component7, resolveDefaultProps(_Component7, _unresolvedProps4), renderExpirationTime);

            workInProgress.memoizedProps = _unresolvedProps4;
            return _child2;
          }

        case HostRoot:
          return updateHostRoot(current$$1, workInProgress, renderExpirationTime);

        case HostComponent:
          return updateHostComponent(current$$1, workInProgress, renderExpirationTime);

        case HostText:
          return updateHostText(current$$1, workInProgress);

        case PlaceholderComponent:
          return updatePlaceholderComponent(current$$1, workInProgress, renderExpirationTime);

        case HostPortal:
          return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);

        case ForwardRef:
          {
            var type = workInProgress.type;
            return updateForwardRef(current$$1, workInProgress, type, workInProgress.pendingProps, renderExpirationTime);
          }

        case ForwardRefLazy:
          var _thenable = workInProgress.type;

          var _Component2 = getResultFromResolvedThenable(_thenable);

          var unresolvedProps = workInProgress.pendingProps;
          var child = updateForwardRef(current$$1, workInProgress, _Component2, resolveDefaultProps(_Component2, unresolvedProps), renderExpirationTime);
          workInProgress.memoizedProps = unresolvedProps;
          return child;

        case Fragment:
          return updateFragment(current$$1, workInProgress, renderExpirationTime);

        case Mode:
          return updateMode(current$$1, workInProgress, renderExpirationTime);

        case Profiler:
          return updateProfiler(current$$1, workInProgress, renderExpirationTime);

        case ContextProvider:
          return updateContextProvider(current$$1, workInProgress, renderExpirationTime);

        case ContextConsumer:
          return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);

        default:
          invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
      }
    }

    function markUpdate(workInProgress) {
      // Tag the fiber with an update effect. This turns a Placement into
      // a PlacementAndUpdate.
      workInProgress.effectTag |= Update;
    }

    function markRef$1(workInProgress) {
      workInProgress.effectTag |= Ref;
    }

    function appendAllChildren(parent, workInProgress) {
      // We only have the top Fiber that was created but we need recurse down its
      // children to find all the terminal nodes.
      var node = workInProgress.child;

      while (node !== null) {
        if (node.tag === HostComponent || node.tag === HostText) {
          appendInitialChild(parent, node.stateNode);
        } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
          // down its children. Instead, we'll get insertions from each child in
          // the portal directly.
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === workInProgress) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === workInProgress) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    var updateHostContainer = void 0;
    var updateHostComponent$1 = void 0;
    var updateHostText$1 = void 0;

    if (supportsMutation) {
      // Mutation mode
      updateHostContainer = function (workInProgress) {// Noop
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;

        if (oldProps === newProps) {
          // In mutation mode, this is sufficient for a bailout because
          // we won't touch this node even if children changed.
          return;
        } // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.


        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.

        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.

        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    } else if (supportsPersistence) {
      // Persistent host tree mode
      // An unfortunate fork of appendAllChildren because we have two different parent types.
      var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendChildToContainerChildSet(containerChildSet, node.stateNode);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      };

      updateHostContainer = function (workInProgress) {
        var portalOrRoot = workInProgress.stateNode;
        var childrenUnchanged = workInProgress.firstEffect === null;

        if (childrenUnchanged) {// No changes, just reuse the existing instance.
        } else {
          var container = portalOrRoot.containerInfo;
          var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

          appendAllChildrenToContainer(newChildSet, workInProgress);
          portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

          markUpdate(workInProgress);
          finalizeContainerChildren(container, newChildSet);
        }
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        var currentInstance = current.stateNode;
        var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
        // This guarantees that we can reuse all of them.

        var childrenUnchanged = workInProgress.firstEffect === null;

        if (childrenUnchanged && oldProps === newProps) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
          return;
        }

        var recyclableInstance = workInProgress.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = null;

        if (oldProps !== newProps) {
          updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        }

        if (childrenUnchanged && updatePayload === null) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
          return;
        }

        var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

        if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
          markUpdate(workInProgress);
        }

        workInProgress.stateNode = newInstance;

        if (childrenUnchanged) {
          // If there are no other effects in this tree, we need to flag this node as having one.
          // Even though we're not going to use it for anything.
          // Otherwise parents won't know that there are new children to propagate upwards.
          markUpdate(workInProgress);
        } else {
          // If children might have changed, we have to add them all to the set.
          appendAllChildren(newInstance, workInProgress);
        }
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        if (oldText !== newText) {
          // If the text content differs, we'll create a new text instance for it.
          var rootContainerInstance = getRootHostContainer();
          var currentHostContext = getHostContext();
          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
          // This lets the parents know that at least one of their children has changed.

          markUpdate(workInProgress);
        }
      };
    } else {
      // No host operations
      updateHostContainer = function (workInProgress) {// Noop
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop
      };
    }

    function completeWork(current, workInProgress, renderExpirationTime) {
      var newProps = workInProgress.pendingProps;

      switch (workInProgress.tag) {
        case FunctionalComponent:
        case FunctionalComponentLazy:
          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }

            break;
          }

        case ClassComponentLazy:
          {
            var _Component = getResultFromResolvedThenable(workInProgress.type);

            if (isContextProvider(_Component)) {
              popContext(workInProgress);
            }

            break;
          }

        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var fiberRoot = workInProgress.stateNode;

            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }

            if (current === null || current.child === null) {
              // If we hydrated, pop so that we can delete any remaining children
              // that weren't hydrated.
              popHydrationState(workInProgress); // This resets the hacky state to fix isMounted before committing.
              // TODO: Delete this when we delete isMounted and findDOMNode.

              workInProgress.effectTag &= ~Placement;
            }

            updateHostContainer(workInProgress);
            break;
          }

        case HostComponent:
          {
            popHostContext(workInProgress);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress.type;

            if (current !== null && workInProgress.stateNode != null) {
              updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

              if (current.ref !== workInProgress.ref) {
                markRef$1(workInProgress);
              }
            } else {
              if (!newProps) {
                !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.

                break;
              }

              var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
              // "stack" as the parent. Then append children as we go in beginWork
              // or completeWork depending on we want to add then top->down or
              // bottom->up. Top->down is faster in IE11.

              var wasHydrated = popHydrationState(workInProgress);

              if (wasHydrated) {
                // TODO: Move this and createInstance step into the beginPhase
                // to consolidate.
                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                  // If changes to the hydrated node needs to be applied at the
                  // commit-phase we mark this as such.
                  markUpdate(workInProgress);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                appendAllChildren(instance, workInProgress); // Certain renderers require commit-time effects for initial mount.
                // (eg DOM renderer supports auto-focus for certain elements).
                // Make sure such renderers get scheduled for later work.

                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = instance;
              }

              if (workInProgress.ref !== null) {
                // If there is a ref on a host node we need to schedule a callback
                markRef$1(workInProgress);
              }
            }

            break;
          }

        case HostText:
          {
            var newText = newProps;

            if (current && workInProgress.stateNode != null) {
              var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
              // to schedule a side-effect to do the updates.

              updateHostText$1(current, workInProgress, oldText, newText);
            } else {
              if (typeof newText !== 'string') {
                !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.
              }

              var _rootContainerInstance = getRootHostContainer();

              var _currentHostContext = getHostContext();

              var _wasHydrated = popHydrationState(workInProgress);

              if (_wasHydrated) {
                if (prepareToHydrateHostTextInstance(workInProgress)) {
                  markUpdate(workInProgress);
                }
              } else {
                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
              }
            }

            break;
          }

        case ForwardRef:
        case ForwardRefLazy:
          break;

        case PlaceholderComponent:
          break;

        case Fragment:
          break;

        case Mode:
          break;

        case Profiler:
          break;

        case HostPortal:
          popHostContainer(workInProgress);
          updateHostContainer(workInProgress);
          break;

        case ContextProvider:
          // Pop provider fiber
          popProvider(workInProgress);
          break;

        case ContextConsumer:
          break;
        // Error cases

        case IndeterminateComponent:
          invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
        // eslint-disable-next-line no-fallthrough

        default:
          invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
      }

      return null;
    } // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.


    function showErrorDialog(capturedError) {
      return true;
    }

    function logCapturedError(capturedError) {
      var logError = showErrorDialog(capturedError); // Allow injected showErrorDialog() to prevent default console.error logging.
      // This enables renderers like ReactNative to better manage redbox behavior.

      if (logError === false) {
        return;
      }

      var error = capturedError.error;
      {
        var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
        // `preventDefault()` in window `error` handler.
        // We record this information as an expando on the error.

        if (error != null && error._suppressLogging) {
          if (errorBoundaryFound && willRetry) {
            // The error is recoverable and was silenced.
            // Ignore it and don't print the stack addendum.
            // This is handy for testing error boundaries without noise.
            return;
          } // The error is fatal. Since the silencing might have
          // been accidental, we'll surface it anyway.
          // However, the browser would have silenced the original error
          // so we'll print it first, and then print the stack addendum.


          console.error(error); // For a more detailed description of this block, see:
          // https://github.com/facebook/react/pull/13384
        }

        var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';
        var errorBoundaryMessage = void 0; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

        if (errorBoundaryFound && errorBoundaryName) {
          if (willRetry) {
            errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
          } else {
            errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
          }
        } else {
          errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
        }

        var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
        // We don't include the original error message and JS stack because the browser
        // has already printed it. Even if the application swallows the error, it is still
        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

        console.error(combinedMessage);
      }
    }

    var emptyObject = {};
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    }

    function logError(boundary, errorInfo) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;

      if (stack === null && source !== null) {
        stack = getStackByFiberInDevAndProd(source);
      }

      var capturedError = {
        componentName: source !== null ? getComponentName(source.type) : null,
        componentStack: stack !== null ? stack : '',
        error: errorInfo.value,
        errorBoundary: null,
        errorBoundaryName: null,
        errorBoundaryFound: false,
        willRetry: false
      };

      if (boundary !== null && boundary.tag === ClassComponent) {
        capturedError.errorBoundary = boundary.stateNode;
        capturedError.errorBoundaryName = getComponentName(boundary.type);
        capturedError.errorBoundaryFound = true;
        capturedError.willRetry = true;
      }

      try {
        logCapturedError(capturedError);
      } catch (e) {
        // This method must not throw, or React internal state will get messed up.
        // If console.error is overridden, or logCapturedError() shows a dialog that throws,
        // we want to report this error outside of the normal stack as a last resort.
        // https://github.com/facebook/react/issues/13188
        setTimeout(function () {
          throw e;
        });
      }
    }

    var callComponentWillUnmountWithTimer = function (current$$1, instance) {
      startPhaseTimer(current$$1, 'componentWillUnmount');
      instance.props = current$$1.memoizedProps;
      instance.state = current$$1.memoizedState;
      instance.componentWillUnmount();
      stopPhaseTimer();
    }; // Capture errors so they don't interrupt unmounting.


    function safelyCallComponentWillUnmount(current$$1, instance) {
      {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);

        if (hasCaughtError()) {
          var unmountError = clearCaughtError();
          captureCommitPhaseError(current$$1, unmountError);
        }
      }
    }

    function safelyDetachRef(current$$1) {
      var ref = current$$1.ref;

      if (ref !== null) {
        if (typeof ref === 'function') {
          {
            invokeGuardedCallback(null, ref, null, null);

            if (hasCaughtError()) {
              var refError = clearCaughtError();
              captureCommitPhaseError(current$$1, refError);
            }
          }
        } else {
          ref.current = null;
        }
      }
    }

    function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
      switch (finishedWork.tag) {
        case ClassComponent:
        case ClassComponentLazy:
          {
            if (finishedWork.effectTag & Snapshot) {
              if (current$$1 !== null) {
                var prevProps = current$$1.memoizedProps;
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                var instance = finishedWork.stateNode;
                instance.props = finishedWork.memoizedProps;
                instance.state = finishedWork.memoizedState;
                var snapshot = instance.getSnapshotBeforeUpdate(prevProps, prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                stopPhaseTimer();
              }
            }

            return;
          }

        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
          // Nothing to do for these component types
          return;

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
      switch (finishedWork.tag) {
        case ClassComponent:
        case ClassComponentLazy:
          {
            var instance = finishedWork.stateNode;

            if (finishedWork.effectTag & Update) {
              if (current$$1 === null) {
                startPhaseTimer(finishedWork, 'componentDidMount');
                instance.props = finishedWork.memoizedProps;
                instance.state = finishedWork.memoizedState;
                instance.componentDidMount();
                stopPhaseTimer();
              } else {
                var prevProps = current$$1.memoizedProps;
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'componentDidUpdate');
                instance.props = finishedWork.memoizedProps;
                instance.state = finishedWork.memoizedState;
                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                stopPhaseTimer();
              }
            }

            var updateQueue = finishedWork.updateQueue;

            if (updateQueue !== null) {
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
            }

            return;
          }

        case HostRoot:
          {
            var _updateQueue = finishedWork.updateQueue;

            if (_updateQueue !== null) {
              var _instance = null;

              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;

                  case ClassComponent:
                  case ClassComponentLazy:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }

              commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
            }

            return;
          }

        case HostComponent:
          {
            var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
            // (eg DOM renderer may schedule auto-focus for inputs and form controls).
            // These effects should only be committed when components are first mounted,
            // aka when there is no current/alternate.

            if (current$$1 === null && finishedWork.effectTag & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props, finishedWork);
            }

            return;
          }

        case HostText:
          {
            // We have no life-cycles associated with text.
            return;
          }

        case HostPortal:
          {
            // We have no life-cycles associated with portals.
            return;
          }

        case Profiler:
          {
            if (enableProfilerTimer) {
              var onRender = finishedWork.memoizedProps.onRender;

              if (enableSchedulerTracing) {
                onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
              } else {
                onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
              }
            }

            return;
          }

        case PlaceholderComponent:
          {
            if (enableSuspense) {
              if ((finishedWork.mode & StrictMode) === NoEffect) {
                // In loose mode, a placeholder times out by scheduling a synchronous
                // update in the commit phase. Use `updateQueue` field to signal that
                // the Timeout needs to switch to the placeholder. We don't need an
                // entire queue. Any non-null value works.
                // $FlowFixMe - Intentionally using a value other than an UpdateQueue.
                finishedWork.updateQueue = emptyObject;
                scheduleWork(finishedWork, Sync);
              } else {
                // In strict mode, the Update effect is used to record the time at
                // which the placeholder timed out.
                var currentTime = requestCurrentTime();
                finishedWork.stateNode = {
                  timedOutAt: currentTime
                };
              }
            }

            return;
          }

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;

      if (ref !== null) {
        var instance = finishedWork.stateNode;
        var instanceToUse = void 0;

        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;

          default:
            instanceToUse = instance;
        }

        if (typeof ref === 'function') {
          ref(instanceToUse);
        } else {
          {
            if (!ref.hasOwnProperty('current')) {
              warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }

    function commitDetachRef(current$$1) {
      var currentRef = current$$1.ref;

      if (currentRef !== null) {
        if (typeof currentRef === 'function') {
          currentRef(null);
        } else {
          currentRef.current = null;
        }
      }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay


    function commitUnmount(current$$1) {
      onCommitUnmount(current$$1);

      switch (current$$1.tag) {
        case ClassComponent:
        case ClassComponentLazy:
          {
            safelyDetachRef(current$$1);
            var instance = current$$1.stateNode;

            if (typeof instance.componentWillUnmount === 'function') {
              safelyCallComponentWillUnmount(current$$1, instance);
            }

            return;
          }

        case HostComponent:
          {
            safelyDetachRef(current$$1);
            return;
          }

        case HostPortal:
          {
            // TODO: this is recursive.
            // We are also not using this parent because
            // the portal will get pushed immediately.
            if (supportsMutation) {
              unmountHostComponents(current$$1);
            } else if (supportsPersistence) {
              emptyPortalContainer(current$$1);
            }

            return;
          }
      }
    }

    function commitNestedUnmounts(root) {
      // While we're inside a removed host node we don't want to call
      // removeChild on the inner nodes because they're removed by the top
      // call anyway. We also want to call componentWillUnmount on all
      // composites before this host node is removed from the tree. Therefore
      var node = root;

      while (true) {
        commitUnmount(node); // Visit children because they may contain more composite or host nodes.
        // Skip portals because commitUnmount() currently visits them recursively.

        if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        !supportsMutation || node.tag !== HostPortal)) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === root) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === root) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function detachFiber(current$$1) {
      // Cut off the return pointers to disconnect it from the tree. Ideally, we
      // should clear the child pointer of the parent alternate to let this
      // get GC:ed but we don't know which for sure which parent is the current
      // one so we'll settle for GC:ing the subtree of this child. This child
      // itself will be GC:ed when the parent updates the next time.
      current$$1.return = null;
      current$$1.child = null;

      if (current$$1.alternate) {
        current$$1.alternate.child = null;
        current$$1.alternate.return = null;
      }
    }

    function emptyPortalContainer(current$$1) {
      if (!supportsPersistence) {
        return;
      }

      var portal = current$$1.stateNode;
      var containerInfo = portal.containerInfo;
      var emptyChildSet = createContainerChildSet(containerInfo);
      replaceContainerChildren(containerInfo, emptyChildSet);
    }

    function commitContainer(finishedWork) {
      if (!supportsPersistence) {
        return;
      }

      switch (finishedWork.tag) {
        case ClassComponent:
        case ClassComponentLazy:
          {
            return;
          }

        case HostComponent:
          {
            return;
          }

        case HostText:
          {
            return;
          }

        case HostRoot:
        case HostPortal:
          {
            var portalOrRoot = finishedWork.stateNode;
            var containerInfo = portalOrRoot.containerInfo,
                _pendingChildren = portalOrRoot.pendingChildren;
            replaceContainerChildren(containerInfo, _pendingChildren);
            return;
          }

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function getHostParentFiber(fiber) {
      var parent = fiber.return;

      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }

        parent = parent.return;
      }

      invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
    }

    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }

    function getHostSibling(fiber) {
      // We're going to search forward into the tree until we find a sibling host
      // node. Unfortunately, if multiple insertions are done in a row we have to
      // search past them. This leads to exponential search for the next sibling.
      var node = fiber;

      siblings: while (true) {
        // If we didn't find anything, let's try the next sibling.
        while (node.sibling === null) {
          if (node.return === null || isHostParent(node.return)) {
            // If we pop out of the root or hit the parent the fiber we are the
            // last sibling.
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;

        while (node.tag !== HostComponent && node.tag !== HostText) {
          // If it is not host node and, we might have a host node inside it.
          // Try to search down until we find one.
          if (node.effectTag & Placement) {
            // If we don't have a child, try the siblings instead.
            continue siblings;
          } // If we don't have a child, try the siblings instead.
          // We also skip portals because they are not part of this host tree.


          if (node.child === null || node.tag === HostPortal) {
            continue siblings;
          } else {
            node.child.return = node;
            node = node.child;
          }
        } // Check if this host node is stable or about to be placed.


        if (!(node.effectTag & Placement)) {
          // Found it!
          return node.stateNode;
        }
      }
    }

    function commitPlacement(finishedWork) {
      if (!supportsMutation) {
        return;
      } // Recursively insert all host nodes into the parent.


      var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

      var parent = void 0;
      var isContainer = void 0;

      switch (parentFiber.tag) {
        case HostComponent:
          parent = parentFiber.stateNode;
          isContainer = false;
          break;

        case HostRoot:
          parent = parentFiber.stateNode.containerInfo;
          isContainer = true;
          break;

        case HostPortal:
          parent = parentFiber.stateNode.containerInfo;
          isContainer = true;
          break;

        default:
          invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
      }

      if (parentFiber.effectTag & ContentReset) {
        // Reset the text content of the parent before doing any insertions
        resetTextContent(parent); // Clear ContentReset from the effect tag

        parentFiber.effectTag &= ~ContentReset;
      }

      var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need recurse down its
      // children to find all the terminal nodes.

      var node = finishedWork;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          if (before) {
            if (isContainer) {
              insertInContainerBefore(parent, node.stateNode, before);
            } else {
              insertBefore(parent, node.stateNode, before);
            }
          } else {
            if (isContainer) {
              appendChildToContainer(parent, node.stateNode);
            } else {
              appendChild(parent, node.stateNode);
            }
          }
        } else if (node.tag === HostPortal) {// If the insertion itself is a portal, then we don't want to traverse
          // down its children. Instead, we'll get insertions from each child in
          // the portal directly.
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === finishedWork) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === finishedWork) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function unmountHostComponents(current$$1) {
      // We only have the top Fiber that was deleted but we need recurse down its
      var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not
      // currentParentIsValid.

      var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

      var currentParent = void 0;
      var currentParentIsContainer = void 0;

      while (true) {
        if (!currentParentIsValid) {
          var parent = node.return;

          findParent: while (true) {
            !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;

            switch (parent.tag) {
              case HostComponent:
                currentParent = parent.stateNode;
                currentParentIsContainer = false;
                break findParent;

              case HostRoot:
                currentParent = parent.stateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;

              case HostPortal:
                currentParent = parent.stateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;
            }

            parent = parent.return;
          }

          currentParentIsValid = true;
        }

        if (node.tag === HostComponent || node.tag === HostText) {
          commitNestedUnmounts(node); // After all the children have unmounted, it is now safe to remove the
          // node from the tree.

          if (currentParentIsContainer) {
            removeChildFromContainer(currentParent, node.stateNode);
          } else {
            removeChild(currentParent, node.stateNode);
          } // Don't visit children because we already visited them.

        } else if (node.tag === HostPortal) {
          // When we go into a portal, it becomes the parent to remove from.
          // We will reassign it back when we pop the portal on the way up.
          currentParent = node.stateNode.containerInfo;
          currentParentIsContainer = true; // Visit children because portals might contain host components.

          if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
        } else {
          commitUnmount(node); // Visit children because we may find more host components below.

          if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
        }

        if (node === current$$1) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === current$$1) {
            return;
          }

          node = node.return;

          if (node.tag === HostPortal) {
            // When we go out of the portal, we need to restore the parent.
            // Since we don't keep a stack of them, we will search for it.
            currentParentIsValid = false;
          }
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function commitDeletion(current$$1) {
      if (supportsMutation) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(current$$1);
      } else {
        // Detach refs and call componentWillUnmount() on the whole subtree.
        commitNestedUnmounts(current$$1);
      }

      detachFiber(current$$1);
    }

    function commitWork(current$$1, finishedWork) {
      if (!supportsMutation) {
        commitContainer(finishedWork);
        return;
      }

      switch (finishedWork.tag) {
        case ClassComponent:
        case ClassComponentLazy:
          {
            return;
          }

        case HostComponent:
          {
            var instance = finishedWork.stateNode;

            if (instance != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.

              var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;

              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
              }
            }

            return;
          }

        case HostText:
          {
            !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.

            var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }

        case HostRoot:
          {
            return;
          }

        case Profiler:
          {
            return;
          }

        case PlaceholderComponent:
          {
            return;
          }

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitResetTextContent(current$$1) {
      if (!supportsMutation) {
        return;
      }

      resetTextContent(current$$1.stateNode);
    }

    function NoopComponent() {
      return null;
    }

    function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime); // Unmount the root by rendering null.

      update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
      // being called "element".

      update.payload = {
        element: null
      };
      var error = errorInfo.value;

      update.callback = function () {
        onUncaughtError(error);
        logError(fiber, errorInfo);
      };

      return update;
    }

    function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime);
      update.tag = CaptureUpdate;
      var getDerivedStateFromCatch = fiber.type.getDerivedStateFromCatch;

      if (enableGetDerivedStateFromCatch && typeof getDerivedStateFromCatch === 'function') {
        var error = errorInfo.value;

        update.payload = function () {
          return getDerivedStateFromCatch(error);
        };
      }

      var inst = fiber.stateNode;

      if (inst !== null && typeof inst.componentDidCatch === 'function') {
        update.callback = function callback() {
          if (!enableGetDerivedStateFromCatch || getDerivedStateFromCatch !== 'function') {
            // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromCatch is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
          }

          var error = errorInfo.value;
          var stack = errorInfo.stack;
          logError(fiber, errorInfo);
          this.componentDidCatch(error, {
            componentStack: stack !== null ? stack : ''
          });
        };
      }

      return update;
    }

    function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
      // The source fiber did not complete.
      sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

      sourceFiber.firstEffect = sourceFiber.lastEffect = null;

      if (enableSuspense && value !== null && typeof value === 'object' && typeof value.then === 'function') {
        // This is a thenable.
        var thenable = value; // Find the earliest timeout threshold of all the placeholders in the
        // ancestor path. We could avoid this traversal by storing the thresholds on
        // the stack, but we choose not to because we only hit this path if we're
        // IO-bound (i.e. if something suspends). Whereas the stack is used even in
        // the non-IO- bound case.

        var _workInProgress = returnFiber;
        var earliestTimeoutMs = -1;
        var startTimeMs = -1;

        do {
          if (_workInProgress.tag === PlaceholderComponent) {
            var current = _workInProgress.alternate;

            if (current !== null && current.memoizedState === true && current.stateNode !== null) {
              // Reached a placeholder that already timed out. Each timed out
              // placeholder acts as the root of a new suspense boundary.
              // Use the time at which the placeholder timed out as the start time
              // for the current render.
              var timedOutAt = current.stateNode.timedOutAt;
              startTimeMs = expirationTimeToMs(timedOutAt); // Do not search any further.

              break;
            }

            var timeoutPropMs = _workInProgress.pendingProps.delayMs;

            if (typeof timeoutPropMs === 'number') {
              if (timeoutPropMs <= 0) {
                earliestTimeoutMs = 0;
              } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
                earliestTimeoutMs = timeoutPropMs;
              }
            }
          }

          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null); // Schedule the nearest Placeholder to re-render the timed out view.


        _workInProgress = returnFiber;

        do {
          if (_workInProgress.tag === PlaceholderComponent) {
            var didTimeout = _workInProgress.memoizedState;

            if (!didTimeout) {
              // Found the nearest boundary.
              // If the boundary is not in async mode, we should not suspend, and
              // likewise, when the promise resolves, we should ping synchronously.
              var pingTime = (_workInProgress.mode & AsyncMode) === NoEffect ? Sync : renderExpirationTime; // Attach a listener to the promise to "ping" the root and retry.

              var onResolveOrReject = retrySuspendedRoot.bind(null, root, _workInProgress, pingTime);
              thenable.then(onResolveOrReject, onResolveOrReject); // If the boundary is outside of strict mode, we should *not* suspend
              // the commit. Pretend as if the suspended component rendered null and
              // keep rendering. In the commit phase, we'll schedule a subsequent
              // synchronous update to re-render the Placeholder.
              //
              // Note: It doesn't matter whether the component that suspended was
              // inside a strict mode tree. If the Placeholder is outside of it, we
              // should *not* suspend the commit.

              if ((_workInProgress.mode & StrictMode) === NoEffect) {
                _workInProgress.effectTag |= Update; // Unmount the source fiber's children

                var nextChildren = null;
                reconcileChildren(sourceFiber.alternate, sourceFiber, nextChildren, renderExpirationTime);
                sourceFiber.effectTag &= ~Incomplete;

                if (sourceFiber.tag === IndeterminateComponent) {
                  // Let's just assume it's a functional component. This fiber will
                  // be unmounted in the immediate next commit, anyway.
                  sourceFiber.tag = FunctionalComponent;
                }

                if (sourceFiber.tag === ClassComponent || sourceFiber.tag === ClassComponentLazy) {
                  // We're going to commit this fiber even though it didn't
                  // complete. But we shouldn't call any lifecycle methods or
                  // callbacks. Remove all lifecycle effect tags.
                  sourceFiber.effectTag &= ~LifecycleEffectMask;

                  if (sourceFiber.alternate === null) {
                    // We're about to mount a class component that doesn't have an
                    // instance. Turn this into a dummy functional component instead,
                    // to prevent type errors. This is a bit weird but it's an edge
                    // case and we're about to synchronously delete this
                    // component, anyway.
                    sourceFiber.tag = FunctionalComponent;
                    sourceFiber.type = NoopComponent;
                  }
                } // Exit without suspending.


                return;
              } // Confirmed that the boundary is in a strict mode tree. Continue with
              // the normal suspend path.


              var absoluteTimeoutMs = void 0;

              if (earliestTimeoutMs === -1) {
                // If no explicit threshold is given, default to an abitrarily large
                // value. The actual size doesn't matter because the threshold for the
                // whole tree will be clamped to the expiration time.
                absoluteTimeoutMs = maxSigned31BitInt;
              } else {
                if (startTimeMs === -1) {
                  // This suspend happened outside of any already timed-out
                  // placeholders. We don't know exactly when the update was scheduled,
                  // but we can infer an approximate start time from the expiration
                  // time. First, find the earliest uncommitted expiration time in the
                  // tree, including work that is suspended. Then subtract the offset
                  // used to compute an async update's expiration time. This will cause
                  // high priority (interactive) work to expire earlier than necessary,
                  // but we can account for this by adjusting for the Just Noticeable
                  // Difference.
                  var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
                  var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
                  startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
                }

                absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
              } // Mark the earliest timeout in the suspended fiber's ancestor path.
              // After completing the root, we'll take the largest of all the
              // suspended fiber's timeouts and use it to compute a timeout for the
              // whole tree.


              renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);
              _workInProgress.effectTag |= ShouldCapture;
              _workInProgress.expirationTime = renderExpirationTime;
              return;
            } // This boundary already captured during this render. Continue to the
            // next boundary.

          }

          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.


        value = new Error('An update was suspended, but no placeholder UI was provided.');
      } // We didn't find a boundary that could handle this type of exception. Start
      // over and traverse parent path again, this time treating the exception
      // as an error.


      renderDidError();
      value = createCapturedValue(value, sourceFiber);
      var workInProgress = returnFiber;

      do {
        switch (workInProgress.tag) {
          case HostRoot:
            {
              var _errorInfo = value;
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime;
              var update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
              enqueueCapturedUpdate(workInProgress, update);
              return;
            }

          case ClassComponent:
          case ClassComponentLazy:
            // Capture and retry
            var errorInfo = value;
            var ctor = workInProgress.type;
            var instance = workInProgress.stateNode;

            if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromCatch === 'function' && enableGetDerivedStateFromCatch || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

              var _update = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

              enqueueCapturedUpdate(workInProgress, _update);
              return;
            }

            break;

          default:
            break;
        }

        workInProgress = workInProgress.return;
      } while (workInProgress !== null);
    }

    function unwindWork(workInProgress, renderExpirationTime) {
      switch (workInProgress.tag) {
        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }

            var effectTag = workInProgress.effectTag;

            if (effectTag & ShouldCapture) {
              workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

            return null;
          }

        case ClassComponentLazy:
          {
            var _Component = workInProgress.type._reactResult;

            if (isContextProvider(_Component)) {
              popContext(workInProgress);
            }

            var _effectTag = workInProgress.effectTag;

            if (_effectTag & ShouldCapture) {
              workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

            return null;
          }

        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var _effectTag2 = workInProgress.effectTag;
            !((_effectTag2 & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
            workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
            return workInProgress;
          }

        case HostComponent:
          {
            popHostContext(workInProgress);
            return null;
          }

        case PlaceholderComponent:
          {
            var _effectTag3 = workInProgress.effectTag;

            if (_effectTag3 & ShouldCapture) {
              workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

            return null;
          }

        case HostPortal:
          popHostContainer(workInProgress);
          return null;

        case ContextProvider:
          popProvider(workInProgress);
          return null;

        default:
          return null;
      }
    }

    function unwindInterruptedWork(interruptedWork) {
      switch (interruptedWork.tag) {
        case ClassComponent:
          {
            var childContextTypes = interruptedWork.type.childContextTypes;

            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }

            break;
          }

        case ClassComponentLazy:
          {
            var _childContextTypes = interruptedWork.type._reactResult.childContextTypes;

            if (_childContextTypes !== null && _childContextTypes !== undefined) {
              popContext(interruptedWork);
            }

            break;
          }

        case HostRoot:
          {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            break;
          }

        case HostComponent:
          {
            popHostContext(interruptedWork);
            break;
          }

        case HostPortal:
          popHostContainer(interruptedWork);
          break;

        case ContextProvider:
          popProvider(interruptedWork);
          break;

        default:
          break;
      }
    }

    var Dispatcher = {
      readContext: readContext
    };
    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
    var didWarnAboutStateTransition = void 0;
    var didWarnSetStateChildContext = void 0;
    var warnAboutUpdateOnUnmounted = void 0;
    var warnAboutInvalidUpdates = void 0;

    if (enableSchedulerTracing) {
      // Provide explicit error message when production+profiling bundle of e.g. react-dom
      // is used with production (non-profiling) bundle of schedule/tracing
      !(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `schedule/tracing` module with `schedule/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
    }

    {
      didWarnAboutStateTransition = false;
      didWarnSetStateChildContext = false;
      var didWarnStateUpdateForUnmountedComponent = {};

      warnAboutUpdateOnUnmounted = function (fiber) {
        // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactClass';

        if (didWarnStateUpdateForUnmountedComponent[componentName]) {
          return;
        }

        warningWithoutStack$1(false, "Can't call setState (or forceUpdate) on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in the ' + 'componentWillUnmount method.%s', getStackByFiberInDevAndProd(fiber));
        didWarnStateUpdateForUnmountedComponent[componentName] = true;
      };

      warnAboutInvalidUpdates = function (instance) {
        switch (phase) {
          case 'getChildContext':
            if (didWarnSetStateChildContext) {
              return;
            }

            warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
            didWarnSetStateChildContext = true;
            break;

          case 'render':
            if (didWarnAboutStateTransition) {
              return;
            }

            warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
            didWarnAboutStateTransition = true;
            break;
        }
      };
    } // Used to ensure computeUniqueAsyncExpiration is monotonically increasing.

    var lastUniqueAsyncExpiration = 0; // Represents the expiration time that incoming updates should use. (If this
    // is NoWork, use the default strategy: async updates in async mode, sync
    // updates in sync mode.)

    var expirationContext = NoWork;
    var isWorking = false; // The next work in progress fiber that we're currently working on.

    var nextUnitOfWork = null;
    var nextRoot = null; // The time at which we're currently rendering work.

    var nextRenderExpirationTime = NoWork;
    var nextLatestAbsoluteTimeoutMs = -1;
    var nextRenderDidError = false; // The next fiber with an effect that we're currently committing.

    var nextEffect = null;
    var isCommitting$1 = false;
    var legacyErrorBoundariesThatAlreadyFailed = null; // Used for performance tracking.

    var interruptedBy = null; // Do not decrement interaction counts in the event of suspense timeouts.
    // This would lead to prematurely calling the interaction-complete hook.

    var suspenseDidTimeout = false;
    var stashedWorkInProgressProperties = void 0;
    var replayUnitOfWork = void 0;
    var isReplayingFailedUnitOfWork = void 0;
    var originalReplayError = void 0;
    var rethrowOriginalError = void 0;

    if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
      stashedWorkInProgressProperties = null;
      isReplayingFailedUnitOfWork = false;
      originalReplayError = null;

      replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
          // Don't replay promises. Treat everything else like an error.
          // TODO: Need to figure out a different strategy if/when we add
          // support for catching other types.
          return;
        } // Restore the original state of the work-in-progress


        if (stashedWorkInProgressProperties === null) {
          // This should never happen. Don't throw because this code is DEV-only.
          warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
          return;
        }

        assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

        switch (failedUnitOfWork.tag) {
          case HostRoot:
            popHostContainer(failedUnitOfWork);
            popTopLevelContextObject(failedUnitOfWork);
            break;

          case HostComponent:
            popHostContext(failedUnitOfWork);
            break;

          case ClassComponent:
            {
              var Component = failedUnitOfWork.type;

              if (isContextProvider(Component)) {
                popContext(failedUnitOfWork);
              }

              break;
            }

          case ClassComponentLazy:
            {
              var _Component = getResultFromResolvedThenable(failedUnitOfWork.type);

              if (isContextProvider(_Component)) {
                popContext(failedUnitOfWork);
              }

              break;
            }

          case HostPortal:
            popHostContainer(failedUnitOfWork);
            break;

          case ContextProvider:
            popProvider(failedUnitOfWork);
            break;
        } // Replay the begin phase.


        isReplayingFailedUnitOfWork = true;
        originalReplayError = thrownValue;
        invokeGuardedCallback(null, workLoop, null, isYieldy);
        isReplayingFailedUnitOfWork = false;
        originalReplayError = null;

        if (hasCaughtError()) {
          var replayError = clearCaughtError();

          if (replayError != null && thrownValue != null) {
            try {
              // Reading the expando property is intentionally
              // inside `try` because it might be a getter or Proxy.
              if (replayError._suppressLogging) {
                // Also suppress logging for the original error.
                thrownValue._suppressLogging = true;
              }
            } catch (inner) {// Ignore.
            }
          }
        } else {
          // If the begin phase did not fail the second time, set this pointer
          // back to the original value.
          nextUnitOfWork = failedUnitOfWork;
        }
      };

      rethrowOriginalError = function () {
        throw originalReplayError;
      };
    }

    function resetStack() {
      if (nextUnitOfWork !== null) {
        var interruptedWork = nextUnitOfWork.return;

        while (interruptedWork !== null) {
          unwindInterruptedWork(interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }

      {
        ReactStrictModeWarnings.discardPendingWarnings();
        checkThatStackIsEmpty();
      }
      nextRoot = null;
      nextRenderExpirationTime = NoWork;
      nextLatestAbsoluteTimeoutMs = -1;
      nextRenderDidError = false;
      nextUnitOfWork = null;
    }

    function commitAllHostEffects() {
      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        recordEffect();
        var effectTag = nextEffect.effectTag;

        if (effectTag & ContentReset) {
          commitResetTextContent(nextEffect);
        }

        if (effectTag & Ref) {
          var current$$1 = nextEffect.alternate;

          if (current$$1 !== null) {
            commitDetachRef(current$$1);
          }
        } // The following switch statement is only concerned about placement,
        // updates, and deletions. To avoid needing to add a case for every
        // possible bitmap value, we remove the secondary effects from the
        // effect tag and switch on that value.


        var primaryEffectTag = effectTag & (Placement | Update | Deletion);

        switch (primaryEffectTag) {
          case Placement:
            {
              commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
              // any life-cycles like componentDidMount gets called.
              // TODO: findDOMNode doesn't rely on this any more but isMounted
              // does and isMounted is deprecated anyway so we should be able
              // to kill this.

              nextEffect.effectTag &= ~Placement;
              break;
            }

          case PlacementAndUpdate:
            {
              // Placement
              commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
              // any life-cycles like componentDidMount gets called.

              nextEffect.effectTag &= ~Placement; // Update

              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }

          case Update:
            {
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }

          case Deletion:
            {
              commitDeletion(nextEffect);
              break;
            }
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitBeforeMutationLifecycles() {
      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        var effectTag = nextEffect.effectTag;

        if (effectTag & Snapshot) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitBeforeMutationLifeCycles(current$$1, nextEffect);
        } // Don't cleanup effects yet;
        // This will be done by commitAllLifeCycles()


        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
      {
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();

        if (warnAboutDeprecatedLifecycles) {
          ReactStrictModeWarnings.flushPendingDeprecationWarnings();
        }

        if (warnAboutLegacyContextAPI) {
          ReactStrictModeWarnings.flushLegacyContextWarning();
        }
      }

      while (nextEffect !== null) {
        var effectTag = nextEffect.effectTag;

        if (effectTag & (Update | Callback)) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
        }

        if (effectTag & Ref) {
          recordEffect();
          commitAttachRef(nextEffect);
        }

        var next = nextEffect.nextEffect; // Ensure that we clean these up so that we don't accidentally keep them.
        // I'm not actually sure this matters because we can't reset firstEffect
        // and lastEffect since they're on every node, not just the effectful
        // ones. So we have to clean everything as we reuse nodes anyway.

        nextEffect.nextEffect = null; // Ensure that we reset the effectTag here so that we can rely on effect
        // tags to reason about the current life-cycle.

        nextEffect = next;
      }
    }

    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }

    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
    }

    function commitRoot(root, finishedWork) {
      isWorking = true;
      isCommitting$1 = true;
      startCommitTimer();
      !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var committedExpirationTime = root.pendingCommitExpirationTime;
      !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      root.pendingCommitExpirationTime = NoWork; // Update the pending priority levels to account for the work that we are
      // about to commit. This needs to happen before calling the lifecycles, since
      // they may schedule additional updates.

      var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
      var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
      var earliestRemainingTimeBeforeCommit = updateExpirationTimeBeforeCommit === NoWork || childExpirationTimeBeforeCommit !== NoWork && childExpirationTimeBeforeCommit < updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
      markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);
      var prevInteractions = null;
      var committedInteractions = enableSchedulerTracing ? [] : null;

      if (enableSchedulerTracing) {
        // Restore any pending interactions at this point,
        // So that cascading work triggered during the render phase will be accounted for.
        prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions; // We are potentially finished with the current batch of interactions.
        // So we should clear them out of the pending interaction map.
        // We do this at the start of commit in case cascading work is scheduled by commit phase lifecycles.
        // In that event, interaction data may be added back into the pending map for a future commit.
        // We also store the interactions we are about to commit so that we can notify subscribers after we're done.
        // These are stored as an Array rather than a Set,
        // Because the same interaction may be pending for multiple expiration times,
        // In which case it's important that we decrement the count the right number of times after finishing.

        root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
          if (scheduledExpirationTime <= committedExpirationTime) {
            committedInteractions.push.apply(committedInteractions, Array.from(scheduledInteractions));
            root.pendingInteractionMap.delete(scheduledExpirationTime);
          }
        });
      } // Reset this to null before calling lifecycles


      ReactCurrentOwner$2.current = null;
      var firstEffect = void 0;

      if (finishedWork.effectTag > PerformedWork) {
        // A fiber's effect list consists only of its children, not itself. So if
        // the root has an effect, we need to add it to the end of the list. The
        // resulting list is the set that would belong to the root's parent, if
        // it had one; that is, all the effects in the tree including the root.
        if (finishedWork.lastEffect !== null) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          firstEffect = finishedWork.firstEffect;
        } else {
          firstEffect = finishedWork;
        }
      } else {
        // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
      }

      prepareForCommit(root.containerInfo); // Invoke instances of getSnapshotBeforeUpdate before mutation.

      nextEffect = firstEffect;
      startCommitSnapshotEffectsTimer();

      while (nextEffect !== null) {
        var didError = false;
        var error = void 0;
        {
          invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);

          if (hasCaughtError()) {
            didError = true;
            error = clearCaughtError();
          }
        }

        if (didError) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, error); // Clean-up

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      stopCommitSnapshotEffectsTimer();

      if (enableProfilerTimer) {
        // Mark the current commit time to be shared by all Profilers in this batch.
        // This enables them to be grouped later.
        recordCommitTime();
      } // Commit all the side-effects within a tree. We'll do this in two passes.
      // The first pass performs all the host insertions, updates, deletions and
      // ref unmounts.


      nextEffect = firstEffect;
      startCommitHostEffectsTimer();

      while (nextEffect !== null) {
        var _didError = false;

        var _error = void 0;

        {
          invokeGuardedCallback(null, commitAllHostEffects, null);

          if (hasCaughtError()) {
            _didError = true;
            _error = clearCaughtError();
          }
        }

        if (_didError) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, _error); // Clean-up

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      stopCommitHostEffectsTimer();
      resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
      // the first pass of the commit phase, so that the previous tree is still
      // current during componentWillUnmount, but before the second pass, so that
      // the finished work is current during componentDidMount/Update.

      root.current = finishedWork; // In the second pass we'll perform all life-cycles and ref callbacks.
      // Life-cycles happen as a separate pass so that all placements, updates,
      // and deletions in the entire tree have already been invoked.
      // This pass also triggers any renderer-specific initial effects.

      nextEffect = firstEffect;
      startCommitLifeCyclesTimer();

      while (nextEffect !== null) {
        var _didError2 = false;

        var _error2 = void 0;

        {
          invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);

          if (hasCaughtError()) {
            _didError2 = true;
            _error2 = clearCaughtError();
          }
        }

        if (_didError2) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, _error2);

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      isCommitting$1 = false;
      isWorking = false;
      stopCommitLifeCyclesTimer();
      stopCommitTimer();
      onCommitRoot(finishedWork.stateNode);

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
      }

      var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
      var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
      var earliestRemainingTimeAfterCommit = updateExpirationTimeAfterCommit === NoWork || childExpirationTimeAfterCommit !== NoWork && childExpirationTimeAfterCommit < updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;

      if (earliestRemainingTimeAfterCommit === NoWork) {
        // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
      }

      onCommit(root, earliestRemainingTimeAfterCommit);

      if (enableSchedulerTracing) {
        tracing.__interactionsRef.current = prevInteractions;
        var subscriber = void 0;

        try {
          subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          // It's not safe for commitRoot() to throw.
          // Store the error for now and we'll re-throw in finishRendering().
          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        } finally {
          // Don't update interaction counts if we're frozen due to suspense.
          // In this case, we can skip the completed-work check entirely.
          if (!suspenseDidTimeout) {
            // Now that we're done, check the completed batch of interactions.
            // If no more work is outstanding for a given interaction,
            // We need to notify the subscribers that it's finished.
            committedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber !== null && interaction.__count === 0) {
                try {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                } catch (error) {
                  // It's not safe for commitRoot() to throw.
                  // Store the error for now and we'll re-throw in finishRendering().
                  if (!hasUnhandledError) {
                    hasUnhandledError = true;
                    unhandledError = error;
                  }
                }
              }
            });
          }
        }
      }
    }

    function resetChildExpirationTime(workInProgress, renderTime) {
      if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
        // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
      }

      var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // We're in profiling mode.
        // Let's use this same traversal to update the render durations.
        var actualDuration = workInProgress.actualDuration;
        var treeBaseDuration = workInProgress.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0.
        // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
        // When work is done, it should bubble to the parent's actualDuration.
        // If the fiber has not been cloned though, (meaning no work was done),
        // Then this value will reflect the amount of time spent working on a previous render.
        // In that case it should not bubble.
        // We determine whether it was cloned by comparing the child pointer.

        var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;
        var child = workInProgress.child;

        while (child !== null) {
          var childUpdateExpirationTime = child.expirationTime;
          var childChildExpirationTime = child.childExpirationTime;

          if (newChildExpirationTime === NoWork || childUpdateExpirationTime !== NoWork && childUpdateExpirationTime < newChildExpirationTime) {
            newChildExpirationTime = childUpdateExpirationTime;
          }

          if (newChildExpirationTime === NoWork || childChildExpirationTime !== NoWork && childChildExpirationTime < newChildExpirationTime) {
            newChildExpirationTime = childChildExpirationTime;
          }

          if (shouldBubbleActualDurations) {
            actualDuration += child.actualDuration;
          }

          treeBaseDuration += child.treeBaseDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
        workInProgress.treeBaseDuration = treeBaseDuration;
      } else {
        var _child = workInProgress.child;

        while (_child !== null) {
          var _childUpdateExpirationTime = _child.expirationTime;
          var _childChildExpirationTime = _child.childExpirationTime;

          if (newChildExpirationTime === NoWork || _childUpdateExpirationTime !== NoWork && _childUpdateExpirationTime < newChildExpirationTime) {
            newChildExpirationTime = _childUpdateExpirationTime;
          }

          if (newChildExpirationTime === NoWork || _childChildExpirationTime !== NoWork && _childChildExpirationTime < newChildExpirationTime) {
            newChildExpirationTime = _childChildExpirationTime;
          }

          _child = _child.sibling;
        }
      }

      workInProgress.childExpirationTime = newChildExpirationTime;
    }

    function completeUnitOfWork(workInProgress) {
      // Attempt to complete the current unit of work, then move to the
      // next sibling. If there are no more siblings, return to the
      // parent fiber.
      while (true) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current$$1 = workInProgress.alternate;
        {
          setCurrentFiber(workInProgress);
        }
        var returnFiber = workInProgress.return;
        var siblingFiber = workInProgress.sibling;

        if ((workInProgress.effectTag & Incomplete) === NoEffect) {
          // This fiber completed.
          if (enableProfilerTimer) {
            if (workInProgress.mode & ProfileMode) {
              startProfilerTimer(workInProgress);
            }

            nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);

            if (workInProgress.mode & ProfileMode) {
              // Update render duration assuming we didn't error.
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
            }
          } else {
            nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
          }

          var next = nextUnitOfWork;
          stopWorkTimer(workInProgress);
          resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
          {
            resetCurrentFiber();
          }

          if (next !== null) {
            stopWorkTimer(workInProgress);

            if (true && ReactFiberInstrumentation_1.debugTool) {
              ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
            } // If completing this work spawned new work, do that next. We'll come
            // back here again.


            return next;
          }

          if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
          (returnFiber.effectTag & Incomplete) === NoEffect) {
            // Append all the effects of the subtree and this fiber onto the effect
            // list of the parent. The completion order of the children affects the
            // side-effect order.
            if (returnFiber.firstEffect === null) {
              returnFiber.firstEffect = workInProgress.firstEffect;
            }

            if (workInProgress.lastEffect !== null) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
              }

              returnFiber.lastEffect = workInProgress.lastEffect;
            } // If this fiber had side-effects, we append it AFTER the children's
            // side-effects. We can perform certain side-effects earlier if
            // needed, by doing multiple passes over the effect list. We don't want
            // to schedule our own side-effect on our own list because if end up
            // reusing children we'll schedule this effect onto itself since we're
            // at the end.


            var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect list.
            // PerformedWork effect is read by React DevTools but shouldn't be committed.

            if (effectTag > PerformedWork) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress;
              } else {
                returnFiber.firstEffect = workInProgress;
              }

              returnFiber.lastEffect = workInProgress;
            }
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            // We've reached the root.
            return null;
          }
        } else {
          if (workInProgress.mode & ProfileMode) {
            // Record the render duration for the fiber that errored.
            stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
          } // This fiber did not complete because something threw. Pop values off
          // the stack without entering the complete phase. If this is a boundary,
          // capture values if possible.


          var _next = unwindWork(workInProgress, nextRenderExpirationTime); // Because this fiber did not complete, don't reset its expiration time.


          if (workInProgress.effectTag & DidCapture) {
            // Restarting an error boundary
            stopFailedWorkTimer(workInProgress);
          } else {
            stopWorkTimer(workInProgress);
          }

          {
            resetCurrentFiber();
          }

          if (_next !== null) {
            stopWorkTimer(workInProgress);

            if (true && ReactFiberInstrumentation_1.debugTool) {
              ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
            }

            if (enableProfilerTimer) {
              // Include the time spent working on failed children before continuing.
              if (_next.mode & ProfileMode) {
                var actualDuration = _next.actualDuration;
                var child = _next.child;

                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }

                _next.actualDuration = actualDuration;
              }
            } // If completing this work spawned new work, do that next. We'll come
            // back here again.
            // Since we're restarting, remove anything that is not a host effect
            // from the effect tag.


            _next.effectTag &= HostEffectMask;
            return _next;
          }

          if (returnFiber !== null) {
            // Mark the parent fiber as incomplete and clear its effect list.
            returnFiber.firstEffect = returnFiber.lastEffect = null;
            returnFiber.effectTag |= Incomplete;
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            return null;
          }
        }
      } // Without this explicit null return Flow complains of invalid return type
      // TODO Remove the above while(true) loop
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function performUnitOfWork(workInProgress) {
      // The current, flushed, state of this fiber is the alternate.
      // Ideally nothing should rely on this, but relying on it here
      // means that we don't need an additional field on the work in
      // progress.
      var current$$1 = workInProgress.alternate; // See if beginning this work spawns more work.

      startWorkTimer(workInProgress);
      {
        setCurrentFiber(workInProgress);
      }

      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
        stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
      }

      var next = void 0;

      if (enableProfilerTimer) {
        if (workInProgress.mode & ProfileMode) {
          startProfilerTimer(workInProgress);
        }

        next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);

        if (workInProgress.mode & ProfileMode) {
          // Record the render duration assuming we didn't bailout (or error).
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
        }
      } else {
        next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
      }

      {
        resetCurrentFiber();

        if (isReplayingFailedUnitOfWork) {
          // Currently replaying a failed unit of work. This should be unreachable,
          // because the render phase is meant to be idempotent, and it should
          // have thrown again. Since it didn't, rethrow the original error, so
          // React's internal stack is not misaligned.
          rethrowOriginalError();
        }
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
      }

      if (next === null) {
        // If this doesn't spawn new work, complete the current work.
        next = completeUnitOfWork(workInProgress);
      }

      ReactCurrentOwner$2.current = null;
      return next;
    }

    function workLoop(isYieldy) {
      if (!isYieldy) {
        // Flush work without yielding
        while (nextUnitOfWork !== null) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      } else {
        // Flush asynchronous work until the deadline runs out of time.
        while (nextUnitOfWork !== null && !shouldYield()) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    }

    function renderRoot(root, isYieldy, isExpired) {
      !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      isWorking = true;
      ReactCurrentOwner$2.currentDispatcher = Dispatcher;
      var expirationTime = root.nextExpirationTimeToWorkOn;
      var prevInteractions = null;

      if (enableSchedulerTracing) {
        // We're about to start new traced work.
        // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
        prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
      } // Check if we're starting from a fresh stack, or if we're resuming from
      // previously yielded work.


      if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
        // Reset the stack and start working from the root.
        resetStack();
        nextRoot = root;
        nextRenderExpirationTime = expirationTime;
        nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
        root.pendingCommitExpirationTime = NoWork;

        if (enableSchedulerTracing) {
          // Determine which interactions this batch of work currently includes,
          // So that we can accurately attribute time spent working on it,
          var interactions = new Set();
          root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime <= expirationTime) {
              scheduledInteractions.forEach(function (interaction) {
                return interactions.add(interaction);
              });
            }
          }); // Store the current set of interactions on the FiberRoot for a few reasons:
          // We can re-use it in hot functions like renderRoot() without having to recalculate it.
          // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
          // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.

          root.memoizedInteractions = interactions;

          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              var threadID = computeThreadID(expirationTime, root.interactionThreadID);

              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                // Work thrown by an interaction tracing subscriber should be rethrown,
                // But only once it's safe (to avoid leaveing the scheduler in an invalid state).
                // Store the error for now and we'll re-throw in finishRendering().
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          }
        }
      }

      var didFatal = false;
      startWorkLoopTimer(nextUnitOfWork);

      do {
        try {
          workLoop(isYieldy);
        } catch (thrownValue) {
          if (nextUnitOfWork === null) {
            // This is a fatal error.
            didFatal = true;
            onUncaughtError(thrownValue);
          } else {
            {
              // Reset global debug state
              // We assume this is defined in DEV
              resetCurrentlyProcessingQueue();
            }
            var failedUnitOfWork = nextUnitOfWork;

            if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
              replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
            } // TODO: we already know this isn't true in some cases.
            // At least this shows a nicer error message until we figure out the cause.
            // https://github.com/facebook/react/issues/12449#issuecomment-386727431


            !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;
            var sourceFiber = nextUnitOfWork;
            var returnFiber = sourceFiber.return;

            if (returnFiber === null) {
              // This is the root. The root could capture its own errors. However,
              // we don't know if it errors before or after we pushed the host
              // context. This information is needed to avoid a stack mismatch.
              // Because we're not sure, treat this as a fatal error. We could track
              // which phase it fails in, but doesn't seem worth it. At least
              // for now.
              didFatal = true;
              onUncaughtError(thrownValue);
            } else {
              throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
              nextUnitOfWork = completeUnitOfWork(sourceFiber);
              continue;
            }
          }
        }

        break;
      } while (true);

      if (enableSchedulerTracing) {
        // Traced work is done for now; restore the previous interactions.
        tracing.__interactionsRef.current = prevInteractions;
      } // We're done performing work. Time to clean up.


      isWorking = false;
      ReactCurrentOwner$2.currentDispatcher = null;
      resetContextDependences(); // Yield back to main thread.

      if (didFatal) {
        var _didCompleteRoot = false;
        stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
        interruptedBy = null; // There was a fatal error.

        {
          resetStackAfterFatalErrorInDev();
        } // `nextRoot` points to the in-progress root. A non-null value indicates
        // that we're in the middle of an async render. Set it to null to indicate
        // there's no more work to be done in the current batch.

        nextRoot = null;
        onFatal(root);
        return;
      }

      if (nextUnitOfWork !== null) {
        // There's still remaining async work in this tree, but we ran out of time
        // in the current frame. Yield back to the renderer. Unless we're
        // interrupted by a higher priority update, we'll continue later from where
        // we left off.
        var _didCompleteRoot2 = false;
        stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
        interruptedBy = null;
        onYield(root);
        return;
      } // We completed the whole tree.


      var didCompleteRoot = true;
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      var rootWorkInProgress = root.current.alternate;
      !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0; // `nextRoot` points to the in-progress root. A non-null value indicates
      // that we're in the middle of an async render. Set it to null to indicate
      // there's no more work to be done in the current batch.

      nextRoot = null;
      interruptedBy = null;

      if (nextRenderDidError) {
        // There was an error
        if (hasLowerPriorityWork(root, expirationTime)) {
          // There's lower priority work. If so, it may have the effect of fixing
          // the exception that was just thrown. Exit without committing. This is
          // similar to a suspend, but without a timeout because we're not waiting
          // for a promise to resolve. React will restart at the lower
          // priority level.
          markSuspendedPriorityLevel(root, expirationTime);
          var suspendedExpirationTime = expirationTime;
          var rootExpirationTime = root.expirationTime;
          onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
          );
          return;
        } else if ( // There's no lower priority work, but we're rendering asynchronously.
        // Synchronsouly attempt to render the same level one more time. This is
        // similar to a suspend, but without a timeout because we're not waiting
        // for a promise to resolve.
        !root.didError && !isExpired) {
          root.didError = true;

          var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;

          var _rootExpirationTime = root.expirationTime = Sync;

          onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
          );
          return;
        }
      }

      if (enableSuspense && !isExpired && nextLatestAbsoluteTimeoutMs !== -1) {
        // The tree was suspended.
        var _suspendedExpirationTime2 = expirationTime;
        markSuspendedPriorityLevel(root, _suspendedExpirationTime2); // Find the earliest uncommitted expiration time in the tree, including
        // work that is suspended. The timeout threshold cannot be longer than
        // the overall expiration.

        var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
        var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);

        if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
          nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
        } // Subtract the current time from the absolute timeout to get the number
        // of milliseconds until the timeout. In other words, convert an absolute
        // timestamp to a relative time. This is the value that is passed
        // to `setTimeout`.


        var currentTimeMs = expirationTimeToMs(requestCurrentTime());
        var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
        msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout; // TODO: Account for the Just Noticeable Difference

        var _rootExpirationTime2 = root.expirationTime;
        onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
        return;
      } // Ready to commit.


      onComplete(root, rootWorkInProgress, expirationTime);
    }

    function dispatch(sourceFiber, value, expirationTime) {
      !(!isWorking || isCommitting$1) ? invariant(false, 'dispatch: Cannot dispatch during the render phase.') : void 0;
      var fiber = sourceFiber.return;

      while (fiber !== null) {
        switch (fiber.tag) {
          case ClassComponent:
          case ClassComponentLazy:
            var ctor = fiber.type;
            var instance = fiber.stateNode;

            if (typeof ctor.getDerivedStateFromCatch === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(value, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
              return;
            }

            break;

          case HostRoot:
            {
              var _errorInfo = createCapturedValue(value, sourceFiber);

              var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);

              enqueueUpdate(fiber, _update);
              scheduleWork(fiber, expirationTime);
              return;
            }
        }

        fiber = fiber.return;
      }

      if (sourceFiber.tag === HostRoot) {
        // Error was thrown at the root. There is no parent, so the root
        // itself should capture it.
        var rootFiber = sourceFiber;

        var _errorInfo2 = createCapturedValue(value, rootFiber);

        var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);

        enqueueUpdate(rootFiber, _update2);
        scheduleWork(rootFiber, expirationTime);
      }
    }

    function captureCommitPhaseError(fiber, error) {
      return dispatch(fiber, error, Sync);
    }

    function computeThreadID(expirationTime, interactionThreadID) {
      // Interaction threads are unique per root and expiration time.
      return expirationTime * 1000 + interactionThreadID;
    } // Creates a unique async expiration time.


    function computeUniqueAsyncExpiration() {
      var currentTime = requestCurrentTime();
      var result = computeAsyncExpiration(currentTime);

      if (result <= lastUniqueAsyncExpiration) {
        // Since we assume the current time monotonically increases, we only hit
        // this branch when computeUniqueAsyncExpiration is fired multiple times
        // within a 200ms window (or whatever the async bucket size is).
        result = lastUniqueAsyncExpiration + 1;
      }

      lastUniqueAsyncExpiration = result;
      return lastUniqueAsyncExpiration;
    }

    function computeExpirationForFiber(currentTime, fiber) {
      var expirationTime = void 0;

      if (expirationContext !== NoWork) {
        // An explicit expiration context was set;
        expirationTime = expirationContext;
      } else if (isWorking) {
        if (isCommitting$1) {
          // Updates that occur during the commit phase should have sync priority
          // by default.
          expirationTime = Sync;
        } else {
          // Updates during the render phase should expire at the same time as
          // the work that is being rendered.
          expirationTime = nextRenderExpirationTime;
        }
      } else {
        // No explicit expiration context was set, and we're not currently
        // performing work. Calculate a new expiration time.
        if (fiber.mode & AsyncMode) {
          if (isBatchingInteractiveUpdates) {
            // This is an interactive update
            expirationTime = computeInteractiveExpiration(currentTime);
          } else {
            // This is an async update
            expirationTime = computeAsyncExpiration(currentTime);
          } // If we're in the middle of rendering a tree, do not update at the same
          // expiration time that is already rendering.


          if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
            expirationTime += 1;
          }
        } else {
          // This is a sync update
          expirationTime = Sync;
        }
      }

      if (isBatchingInteractiveUpdates) {
        // This is an interactive update. Keep track of the lowest pending
        // interactive expiration time. This allows us to synchronously flush
        // all interactive updates when needed.
        if (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime > lowestPriorityPendingInteractiveExpirationTime) {
          lowestPriorityPendingInteractiveExpirationTime = expirationTime;
        }
      }

      return expirationTime;
    }

    function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
      // Schedule the timeout.
      if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
        nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
      }
    }

    function renderDidError() {
      nextRenderDidError = true;
    }

    function retrySuspendedRoot(root, fiber, suspendedTime) {
      if (enableSuspense) {
        var retryTime = void 0;

        if (isPriorityLevelSuspended(root, suspendedTime)) {
          // Ping at the original level
          retryTime = suspendedTime;
          markPingedPriorityLevel(root, retryTime);
        } else {
          // Placeholder already timed out. Compute a new expiration time
          var currentTime = requestCurrentTime();
          retryTime = computeExpirationForFiber(currentTime, fiber);
          markPendingPriorityLevel(root, retryTime);
        }

        scheduleWorkToRoot(fiber, retryTime);
        var rootExpirationTime = root.expirationTime;

        if (rootExpirationTime !== NoWork) {
          if (enableSchedulerTracing) {
            // Restore previous interactions so that new work is associated with them.
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root.memoizedInteractions; // Because suspense timeouts do not decrement the interaction count,
            // Continued suspense work should also not increment the count.

            storeInteractionsForExpirationTime(root, rootExpirationTime, false);
            requestWork(root, rootExpirationTime);
            tracing.__interactionsRef.current = prevInteractions;
          } else {
            requestWork(root, rootExpirationTime);
          }
        }
      }
    }

    function scheduleWorkToRoot(fiber, expirationTime) {
      // Update the source fiber's expiration time
      if (fiber.expirationTime === NoWork || fiber.expirationTime > expirationTime) {
        fiber.expirationTime = expirationTime;
      }

      var alternate = fiber.alternate;

      if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > expirationTime)) {
        alternate.expirationTime = expirationTime;
      } // Walk the parent path to the root and update the child expiration time.


      var node = fiber.return;

      if (node === null && fiber.tag === HostRoot) {
        return fiber.stateNode;
      }

      while (node !== null) {
        alternate = node.alternate;

        if (node.childExpirationTime === NoWork || node.childExpirationTime > expirationTime) {
          node.childExpirationTime = expirationTime;

          if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > expirationTime)) {
            alternate.childExpirationTime = expirationTime;
          }
        } else if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > expirationTime)) {
          alternate.childExpirationTime = expirationTime;
        }

        if (node.return === null && node.tag === HostRoot) {
          return node.stateNode;
        }

        node = node.return;
      }

      return null;
    }

    function storeInteractionsForExpirationTime(root, expirationTime, updateInteractionCounts) {
      if (!enableSchedulerTracing) {
        return;
      }

      var interactions = tracing.__interactionsRef.current;

      if (interactions.size > 0) {
        var pendingInteractions = root.pendingInteractionMap.get(expirationTime);

        if (pendingInteractions != null) {
          interactions.forEach(function (interaction) {
            if (updateInteractionCounts && !pendingInteractions.has(interaction)) {
              // Update the pending async work count for previously unscheduled interaction.
              interaction.__count++;
            }

            pendingInteractions.add(interaction);
          });
        } else {
          root.pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

          if (updateInteractionCounts) {
            interactions.forEach(function (interaction) {
              interaction.__count++;
            });
          }
        }

        var subscriber = tracing.__subscriberRef.current;

        if (subscriber !== null) {
          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
          subscriber.onWorkScheduled(interactions, threadID);
        }
      }
    }

    function scheduleWork(fiber, expirationTime) {
      recordScheduleUpdate();
      {
        if (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) {
          var instance = fiber.stateNode;
          warnAboutInvalidUpdates(instance);
        }
      }
      var root = scheduleWorkToRoot(fiber, expirationTime);

      if (root === null) {
        if (true && (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy)) {
          warnAboutUpdateOnUnmounted(fiber);
        }

        return;
      }

      if (enableSchedulerTracing) {
        storeInteractionsForExpirationTime(root, expirationTime, true);
      }

      if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime < nextRenderExpirationTime) {
        // This is an interruption. (Used for performance tracking.)
        interruptedBy = fiber;
        resetStack();
      }

      markPendingPriorityLevel(root, expirationTime);

      if ( // If we're in the render phase, we don't need to schedule this root
      // for an update, because we'll do it before we exit...
      !isWorking || isCommitting$1 || // ...unless this is a different root than the one we're rendering.
      nextRoot !== root) {
        var rootExpirationTime = root.expirationTime;
        requestWork(root, rootExpirationTime);
      }

      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        // Reset this back to zero so subsequent updates don't throw.
        nestedUpdateCount = 0;
        invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
      }
    }

    function syncUpdates(fn, a, b, c, d) {
      var previousExpirationContext = expirationContext;
      expirationContext = Sync;

      try {
        return fn(a, b, c, d);
      } finally {
        expirationContext = previousExpirationContext;
      }
    } // TODO: Everything below this is written as if it has been lifted to the
    // renderers. I'll do this in a follow-up.
    // Linked-list of roots


    var firstScheduledRoot = null;
    var lastScheduledRoot = null;
    var callbackExpirationTime = NoWork;
    var callbackID = void 0;
    var isRendering = false;
    var nextFlushedRoot = null;
    var nextFlushedExpirationTime = NoWork;
    var lowestPriorityPendingInteractiveExpirationTime = NoWork;
    var deadlineDidExpire = false;
    var hasUnhandledError = false;
    var unhandledError = null;
    var deadline = null;
    var isBatchingUpdates = false;
    var isUnbatchingUpdates = false;
    var isBatchingInteractiveUpdates = false;
    var completedBatches = null;
    var originalStartTimeMs = schedule.unstable_now();
    var currentRendererTime = msToExpirationTime(originalStartTimeMs);
    var currentSchedulerTime = currentRendererTime; // Use these to prevent an infinite loop of nested updates

    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var lastCommittedRootDuringThisBatch = null;
    var timeHeuristicForUnitOfWork = 1;

    function recomputeCurrentRendererTime() {
      var currentTimeMs = schedule.unstable_now() - originalStartTimeMs;
      currentRendererTime = msToExpirationTime(currentTimeMs);
    }

    function scheduleCallbackWithExpirationTime(root, expirationTime) {
      if (callbackExpirationTime !== NoWork) {
        // A callback is already scheduled. Check its expiration time (timeout).
        if (expirationTime > callbackExpirationTime) {
          // Existing callback has sufficient timeout. Exit.
          return;
        } else {
          if (callbackID !== null) {
            // Existing callback has insufficient timeout. Cancel and schedule a
            // new one.
            schedule.unstable_cancelScheduledWork(callbackID);
          }
        } // The request callback timer is already running. Don't start a new one.

      } else {
        startRequestCallbackTimer();
      }

      callbackExpirationTime = expirationTime;
      var currentMs = schedule.unstable_now() - originalStartTimeMs;
      var expirationTimeMs = expirationTimeToMs(expirationTime);
      var timeout = expirationTimeMs - currentMs;
      callbackID = schedule.unstable_scheduleWork(performAsyncWork, {
        timeout: timeout
      });
    } // For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
    // onYield is called upon exiting. We use these in lieu of returning a tuple.
    // I've also chosen not to inline them into renderRoot because these will
    // eventually be lifted into the renderer.


    function onFatal(root) {
      root.finishedWork = null;
    }

    function onComplete(root, finishedWork, expirationTime) {
      root.pendingCommitExpirationTime = expirationTime;
      root.finishedWork = finishedWork;
    }

    function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
      root.expirationTime = rootExpirationTime;

      if (enableSuspense && msUntilTimeout === 0 && !shouldYield()) {
        // Don't wait an additional tick. Commit the tree immediately.
        root.pendingCommitExpirationTime = suspendedExpirationTime;
        root.finishedWork = finishedWork;
      } else if (msUntilTimeout > 0) {
        // Wait `msUntilTimeout` milliseconds before committing.
        root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
      }
    }

    function onYield(root) {
      root.finishedWork = null;
    }

    function onTimeout(root, finishedWork, suspendedExpirationTime) {
      if (enableSuspense) {
        // The root timed out. Commit it.
        root.pendingCommitExpirationTime = suspendedExpirationTime;
        root.finishedWork = finishedWork; // Read the current time before entering the commit phase. We can be
        // certain this won't cause tearing related to batching of event updates
        // because we're at the top of a timer event.

        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;

        if (enableSchedulerTracing) {
          // Don't update pending interaction counts for suspense timeouts,
          // Because we know we still need to do more work in this case.
          suspenseDidTimeout = true;
          flushRoot(root, suspendedExpirationTime);
          suspenseDidTimeout = false;
        } else {
          flushRoot(root, suspendedExpirationTime);
        }
      }
    }

    function onCommit(root, expirationTime) {
      root.expirationTime = expirationTime;
      root.finishedWork = null;
    }

    function requestCurrentTime() {
      // requestCurrentTime is called by the scheduler to compute an expiration
      // time.
      //
      // Expiration times are computed by adding to the current time (the start
      // time). However, if two updates are scheduled within the same event, we
      // should treat their start times as simultaneous, even if the actual clock
      // time has advanced between the first and second call.
      // In other words, because expiration times determine how updates are batched,
      // we want all updates of like priority that occur within the same event to
      // receive the same expiration time. Otherwise we get tearing.
      //
      // We keep track of two separate times: the current "renderer" time and the
      // current "scheduler" time. The renderer time can be updated whenever; it
      // only exists to minimize the calls performance.now.
      //
      // But the scheduler time can only be updated if there's no pending work, or
      // if we know for certain that we're not in the middle of an event.
      if (isRendering) {
        // We're already rendering. Return the most recently read time.
        return currentSchedulerTime;
      } // Check if there's pending work.


      findHighestPriorityRoot();

      if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
        // If there's no pending work, or if the pending work is offscreen, we can
        // read the current time without risk of tearing.
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;
        return currentSchedulerTime;
      } // There's already pending work. We might be in the middle of a browser
      // event. If we were to read the current time, it could cause multiple updates
      // within the same event to receive different expiration times, leading to
      // tearing. Return the last read time. During the next idle callback, the
      // time will be updated.


      return currentSchedulerTime;
    } // requestWork is called by the scheduler whenever a root receives an update.
    // It's up to the renderer to call renderRoot at some point in the future.


    function requestWork(root, expirationTime) {
      addRootToSchedule(root, expirationTime);

      if (isRendering) {
        // Prevent reentrancy. Remaining work will be scheduled at the end of
        // the currently rendering batch.
        return;
      }

      if (isBatchingUpdates) {
        // Flush work at the end of the batch.
        if (isUnbatchingUpdates) {
          // ...unless we're inside unbatchedUpdates, in which case we should
          // flush it now.
          nextFlushedRoot = root;
          nextFlushedExpirationTime = Sync;
          performWorkOnRoot(root, Sync, true);
        }

        return;
      } // TODO: Get rid of Sync and use current time?


      if (expirationTime === Sync) {
        performSyncWork();
      } else {
        scheduleCallbackWithExpirationTime(root, expirationTime);
      }
    }

    function addRootToSchedule(root, expirationTime) {
      // Add the root to the schedule.
      // Check if this root is already part of the schedule.
      if (root.nextScheduledRoot === null) {
        // This root is not already scheduled. Add it.
        root.expirationTime = expirationTime;

        if (lastScheduledRoot === null) {
          firstScheduledRoot = lastScheduledRoot = root;
          root.nextScheduledRoot = root;
        } else {
          lastScheduledRoot.nextScheduledRoot = root;
          lastScheduledRoot = root;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
        }
      } else {
        // This root is already scheduled, but its priority may have increased.
        var remainingExpirationTime = root.expirationTime;

        if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
          // Update the priority.
          root.expirationTime = expirationTime;
        }
      }
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = NoWork;
      var highestPriorityRoot = null;

      if (lastScheduledRoot !== null) {
        var previousScheduledRoot = lastScheduledRoot;
        var root = firstScheduledRoot;

        while (root !== null) {
          var remainingExpirationTime = root.expirationTime;

          if (remainingExpirationTime === NoWork) {
            // This root no longer has work. Remove it from the scheduler.
            // TODO: This check is redudant, but Flow is confused by the branch
            // below where we set lastScheduledRoot to null, even though we break
            // from the loop right after.
            !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;

            if (root === root.nextScheduledRoot) {
              // This is the only root in the list.
              root.nextScheduledRoot = null;
              firstScheduledRoot = lastScheduledRoot = null;
              break;
            } else if (root === firstScheduledRoot) {
              // This is the first root in the list.
              var next = root.nextScheduledRoot;
              firstScheduledRoot = next;
              lastScheduledRoot.nextScheduledRoot = next;
              root.nextScheduledRoot = null;
            } else if (root === lastScheduledRoot) {
              // This is the last root in the list.
              lastScheduledRoot = previousScheduledRoot;
              lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
              root.nextScheduledRoot = null;
              break;
            } else {
              previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
              root.nextScheduledRoot = null;
            }

            root = previousScheduledRoot.nextScheduledRoot;
          } else {
            if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
              // Update the priority, if it's higher
              highestPriorityWork = remainingExpirationTime;
              highestPriorityRoot = root;
            }

            if (root === lastScheduledRoot) {
              break;
            }

            if (highestPriorityWork === Sync) {
              // Sync is highest priority by definition so
              // we can stop searching.
              break;
            }

            previousScheduledRoot = root;
            root = root.nextScheduledRoot;
          }
        }
      }

      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    }

    function performAsyncWork(dl) {
      if (dl.didTimeout) {
        // The callback timed out. That means at least one update has expired.
        // Iterate through the root schedule. If they contain expired work, set
        // the next render expiration time to the current time. This has the effect
        // of flushing all expired work in a single batch, instead of flushing each
        // level one at a time.
        if (firstScheduledRoot !== null) {
          recomputeCurrentRendererTime();
          var root = firstScheduledRoot;

          do {
            didExpireAtExpirationTime(root, currentRendererTime); // The root schedule is circular, so this is never null.

            root = root.nextScheduledRoot;
          } while (root !== firstScheduledRoot);
        }
      }

      performWork(NoWork, dl);
    }

    function performSyncWork() {
      performWork(Sync, null);
    }

    function performWork(minExpirationTime, dl) {
      deadline = dl; // Keep working on roots until there's no more work, or until we reach
      // the deadline.

      findHighestPriorityRoot();

      if (deadline !== null) {
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;

        if (enableUserTimingAPI) {
          var didExpire = nextFlushedExpirationTime < currentRendererTime;
          var timeout = expirationTimeToMs(nextFlushedExpirationTime);
          stopRequestCallbackTimer(didExpire, timeout);
        }

        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || currentRendererTime >= nextFlushedExpirationTime)) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime >= nextFlushedExpirationTime);
          findHighestPriorityRoot();
          recomputeCurrentRendererTime();
          currentSchedulerTime = currentRendererTime;
        }
      } else {
        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime)) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, true);
          findHighestPriorityRoot();
        }
      } // We're done flushing work. Either we ran out of time in this callback,
      // or there's no more work left with sufficient priority.
      // If we're inside a callback, set this to false since we just completed it.


      if (deadline !== null) {
        callbackExpirationTime = NoWork;
        callbackID = null;
      } // If there's work left over, schedule a new callback.


      if (nextFlushedExpirationTime !== NoWork) {
        scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
      } // Clean-up.


      deadline = null;
      deadlineDidExpire = false;
      finishRendering();
    }

    function flushRoot(root, expirationTime) {
      !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0; // Perform work on root as if the given expiration time is the current time.
      // This has the effect of synchronously flushing all work up to and
      // including the given time.

      nextFlushedRoot = root;
      nextFlushedExpirationTime = expirationTime;
      performWorkOnRoot(root, expirationTime, true); // Flush any sync work that was scheduled by lifecycles

      performSyncWork();
    }

    function finishRendering() {
      nestedUpdateCount = 0;
      lastCommittedRootDuringThisBatch = null;

      if (completedBatches !== null) {
        var batches = completedBatches;
        completedBatches = null;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          try {
            batch._onComplete();
          } catch (error) {
            if (!hasUnhandledError) {
              hasUnhandledError = true;
              unhandledError = error;
            }
          }
        }
      }

      if (hasUnhandledError) {
        var error = unhandledError;
        unhandledError = null;
        hasUnhandledError = false;
        throw error;
      }
    }

    function performWorkOnRoot(root, expirationTime, isExpired) {
      !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      isRendering = true; // Check if this is async work or sync/expired work.

      if (deadline === null || isExpired) {
        // Flush work without yielding.
        // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
        // may want to perform some work without yielding, but also without
        // requiring the root to complete (by triggering placeholders).
        var finishedWork = root.finishedWork;

        if (finishedWork !== null) {
          // This root is already complete. We can commit it.
          completeRoot(root, finishedWork, expirationTime);
        } else {
          root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since
          // we're about to try rendering again.

          var timeoutHandle = root.timeoutHandle;

          if (enableSuspense && timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

            cancelTimeout(timeoutHandle);
          }

          var isYieldy = false;
          renderRoot(root, isYieldy, isExpired);
          finishedWork = root.finishedWork;

          if (finishedWork !== null) {
            // We've completed the root. Commit it.
            completeRoot(root, finishedWork, expirationTime);
          }
        }
      } else {
        // Flush async work.
        var _finishedWork = root.finishedWork;

        if (_finishedWork !== null) {
          // This root is already complete. We can commit it.
          completeRoot(root, _finishedWork, expirationTime);
        } else {
          root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since
          // we're about to try rendering again.

          var _timeoutHandle = root.timeoutHandle;

          if (enableSuspense && _timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

            cancelTimeout(_timeoutHandle);
          }

          var _isYieldy = true;
          renderRoot(root, _isYieldy, isExpired);
          _finishedWork = root.finishedWork;

          if (_finishedWork !== null) {
            // We've completed the root. Check the deadline one more time
            // before committing.
            if (!shouldYield()) {
              // Still time left. Commit the root.
              completeRoot(root, _finishedWork, expirationTime);
            } else {
              // There's no time left. Mark this root as complete. We'll come
              // back and commit it later.
              root.finishedWork = _finishedWork;
            }
          }
        }
      }

      isRendering = false;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      // Check if there's a batch that matches this expiration time.
      var firstBatch = root.firstBatch;

      if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {
        if (completedBatches === null) {
          completedBatches = [firstBatch];
        } else {
          completedBatches.push(firstBatch);
        }

        if (firstBatch._defer) {
          // This root is blocked from committing by a batch. Unschedule it until
          // we receive another update.
          root.finishedWork = finishedWork;
          root.expirationTime = NoWork;
          return;
        }
      } // Commit the root.


      root.finishedWork = null; // Check if this is a nested update (a sync update scheduled during the
      // commit phase).

      if (root === lastCommittedRootDuringThisBatch) {
        // If the next root is the same as the previous root, this is a nested
        // update. To prevent an infinite loop, increment the nested update count.
        nestedUpdateCount++;
      } else {
        // Reset whenever we switch roots.
        lastCommittedRootDuringThisBatch = root;
        nestedUpdateCount = 0;
      }

      commitRoot(root, finishedWork);
    } // When working on async work, the reconciler asks the renderer if it should
    // yield execution. For DOM, we implement this with requestIdleCallback.


    function shouldYield() {
      if (deadlineDidExpire) {
        return true;
      }

      if (deadline === null || deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
        // Disregard deadline.didTimeout. Only expired work should be flushed
        // during a timeout. This path is only hit for non-expired work.
        return false;
      }

      deadlineDidExpire = true;
      return true;
    }

    function onUncaughtError(error) {
      !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0; // Unschedule this root so we don't work on it again until there's
      // another update.

      nextFlushedRoot.expirationTime = NoWork;

      if (!hasUnhandledError) {
        hasUnhandledError = true;
        unhandledError = error;
      }
    } // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.


    function batchedUpdates$1(fn, a) {
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return fn(a);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    } // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.


    function unbatchedUpdates(fn, a) {
      if (isBatchingUpdates && !isUnbatchingUpdates) {
        isUnbatchingUpdates = true;

        try {
          return fn(a);
        } finally {
          isUnbatchingUpdates = false;
        }
      }

      return fn(a);
    } // TODO: Batching should be implemented at the renderer level, not within
    // the reconciler.


    function flushSync(fn, a) {
      !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return syncUpdates(fn, a);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;
        performSyncWork();
      }
    }

    function interactiveUpdates$1(fn, a, b) {
      if (isBatchingInteractiveUpdates) {
        return fn(a, b);
      } // If there are any pending interactive updates, synchronously flush them.
      // This needs to happen before we read any handlers, because the effect of
      // the previous event may influence which handlers are called during
      // this event.


      if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
        // Synchronously flush pending interactive updates.
        performWork(lowestPriorityPendingInteractiveExpirationTime, null);
        lowestPriorityPendingInteractiveExpirationTime = NoWork;
      }

      var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingInteractiveUpdates = true;
      isBatchingUpdates = true;

      try {
        return fn(a, b);
      } finally {
        isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    }

    function flushInteractiveUpdates$1() {
      if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
        // Synchronously flush pending interactive updates.
        performWork(lowestPriorityPendingInteractiveExpirationTime, null);
        lowestPriorityPendingInteractiveExpirationTime = NoWork;
      }
    }

    function flushControlled(fn) {
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        syncUpdates(fn);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    } // 0 is PROD, 1 is DEV.
    // Might add PROFILE later.


    var didWarnAboutNestedUpdates = void 0;
    {
      didWarnAboutNestedUpdates = false;
    }

    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }

      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);

      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;

        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      } else if (fiber.tag === ClassComponentLazy) {
        var _Component = getResultFromResolvedThenable(fiber.type);

        if (isContextProvider(_Component)) {
          return processChildContext(fiber, _Component, parentContext);
        }
      }

      return parentContext;
    }

    function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
      {
        if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
        }
      }
      var update = createUpdate(expirationTime); // Caution: React DevTools currently depends on this property
      // being called "element".

      update.payload = {
        element: element
      };
      callback = callback === undefined ? null : callback;

      if (callback !== null) {
        !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
        update.callback = callback;
      }

      enqueueUpdate(current$$1, update);
      scheduleWork(current$$1, expirationTime);
      return expirationTime;
    }

    function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
      // TODO: If this is a nested container, this won't be the root.
      var current$$1 = container.current;
      {
        if (ReactFiberInstrumentation_1.debugTool) {
          if (current$$1.alternate === null) {
            ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
          } else if (element === null) {
            ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
          } else {
            ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
          }
        }
      }
      var context = getContextForSubtree(parentComponent);

      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }

      return scheduleRootUpdate(current$$1, element, expirationTime, callback);
    }

    function findHostInstance(component) {
      var fiber = get(component);

      if (fiber === undefined) {
        if (typeof component.render === 'function') {
          invariant(false, 'Unable to find node on an unmounted component.');
        } else {
          invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
        }
      }

      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    }

    function createContainer(containerInfo, isAsync, hydrate) {
      return createFiberRoot(containerInfo, isAsync, hydrate);
    }

    function updateContainer(element, container, parentComponent, callback) {
      var current$$1 = container.current;
      var currentTime = requestCurrentTime();
      var expirationTime = computeExpirationForFiber(currentTime, current$$1);
      return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
    }

    function getPublicRootInstance(container) {
      var containerFiber = container.current;

      if (!containerFiber.child) {
        return null;
      }

      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);

        default:
          return containerFiber.child.stateNode;
      }
    }

    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    }

    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      return injectInternals(_assign({}, devToolsConfig, {
        findHostInstanceByFiber: function (fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        },
        findFiberByHostInstance: function (instance) {
          if (!findFiberByHostInstance) {
            // Might not be implemented by the renderer.
            return null;
          }

          return findFiberByHostInstance(instance);
        }
      }));
    } // This file intentionally does *not* have the Flow annotation.
    // Don't add it. See `./inline-typed.js` for an explanation.


    function createPortal$1(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
    implementation) {
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : '' + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
      };
    } // TODO: this is special because it gets imported during build.


    var ReactVersion = '16.5.2'; // TODO: This type is shared between the reconciler and ReactDOM, but will
    // eventually be lifted out to the renderer.

    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings = void 0;
    var warnOnInvalidCallback = void 0;
    var didWarnAboutUnstableCreatePortal = false;
    {
      if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
        warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
      }

      topLevelUpdateWarnings = function (container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

          if (hostInstance) {
            !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
          }
        }

        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
        !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
        !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
      };

      warnOnInvalidCallback = function (callback, callerName) {
        !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
      };
    }
    setRestoreImplementation(restoreControlledState$1);
    /* eslint-disable no-use-before-define */

    /* eslint-enable no-use-before-define */

    function ReactBatch(root) {
      var expirationTime = computeUniqueAsyncExpiration();
      this._expirationTime = expirationTime;
      this._root = root;
      this._next = null;
      this._callbacks = null;
      this._didComplete = false;
      this._hasChildren = false;
      this._children = null;
      this._defer = true;
    }

    ReactBatch.prototype.render = function (children) {
      !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
      this._hasChildren = true;
      this._children = children;
      var internalRoot = this._root._internalRoot;
      var expirationTime = this._expirationTime;
      var work = new ReactWork();
      updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
      return work;
    };

    ReactBatch.prototype.then = function (onComplete) {
      if (this._didComplete) {
        onComplete();
        return;
      }

      var callbacks = this._callbacks;

      if (callbacks === null) {
        callbacks = this._callbacks = [];
      }

      callbacks.push(onComplete);
    };

    ReactBatch.prototype.commit = function () {
      var internalRoot = this._root._internalRoot;
      var firstBatch = internalRoot.firstBatch;
      !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

      if (!this._hasChildren) {
        // This batch is empty. Return.
        this._next = null;
        this._defer = false;
        return;
      }

      var expirationTime = this._expirationTime; // Ensure this is the first batch in the list.

      if (firstBatch !== this) {
        // This batch is not the earliest batch. We need to move it to the front.
        // Update its expiration time to be the expiration time of the earliest
        // batch, so that we can flush it without flushing the other batches.
        if (this._hasChildren) {
          expirationTime = this._expirationTime = firstBatch._expirationTime; // Rendering this batch again ensures its children will be the final state
          // when we flush (updates are processed in insertion order: last
          // update wins).
          // TODO: This forces a restart. Should we print a warning?

          this.render(this._children);
        } // Remove the batch from the list.


        var previous = null;
        var batch = firstBatch;

        while (batch !== this) {
          previous = batch;
          batch = batch._next;
        }

        !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
        previous._next = batch._next; // Add it to the front.

        this._next = firstBatch;
        firstBatch = internalRoot.firstBatch = this;
      } // Synchronously flush all the work up to this batch's expiration time.


      this._defer = false;
      flushRoot(internalRoot, expirationTime); // Pop the batch from the list.

      var next = this._next;
      this._next = null;
      firstBatch = internalRoot.firstBatch = next; // Append the next earliest batch's children to the update queue.

      if (firstBatch !== null && firstBatch._hasChildren) {
        firstBatch.render(firstBatch._children);
      }
    };

    ReactBatch.prototype._onComplete = function () {
      if (this._didComplete) {
        return;
      }

      this._didComplete = true;
      var callbacks = this._callbacks;

      if (callbacks === null) {
        return;
      } // TODO: Error handling.


      for (var i = 0; i < callbacks.length; i++) {
        var _callback = callbacks[i];

        _callback();
      }
    };

    function ReactWork() {
      this._callbacks = null;
      this._didCommit = false; // TODO: Avoid need to bind by replacing callbacks in the update queue with
      // list of Work objects.

      this._onCommit = this._onCommit.bind(this);
    }

    ReactWork.prototype.then = function (onCommit) {
      if (this._didCommit) {
        onCommit();
        return;
      }

      var callbacks = this._callbacks;

      if (callbacks === null) {
        callbacks = this._callbacks = [];
      }

      callbacks.push(onCommit);
    };

    ReactWork.prototype._onCommit = function () {
      if (this._didCommit) {
        return;
      }

      this._didCommit = true;
      var callbacks = this._callbacks;

      if (callbacks === null) {
        return;
      } // TODO: Error handling.


      for (var i = 0; i < callbacks.length; i++) {
        var _callback2 = callbacks[i];
        !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;

        _callback2();
      }
    };

    function ReactRoot(container, isAsync, hydrate) {
      var root = createContainer(container, isAsync, hydrate);
      this._internalRoot = root;
    }

    ReactRoot.prototype.render = function (children, callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(children, root, null, work._onCommit);
      return work;
    };

    ReactRoot.prototype.unmount = function (callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(null, root, null, work._onCommit);
      return work;
    };

    ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(children, root, parentComponent, work._onCommit);
      return work;
    };

    ReactRoot.prototype.createBatch = function () {
      var batch = new ReactBatch(this);
      var expirationTime = batch._expirationTime;
      var internalRoot = this._internalRoot;
      var firstBatch = internalRoot.firstBatch;

      if (firstBatch === null) {
        internalRoot.firstBatch = batch;
        batch._next = null;
      } else {
        // Insert sorted by expiration time then insertion order
        var insertAfter = null;
        var insertBefore = firstBatch;

        while (insertBefore !== null && insertBefore._expirationTime <= expirationTime) {
          insertAfter = insertBefore;
          insertBefore = insertBefore._next;
        }

        batch._next = insertBefore;

        if (insertAfter !== null) {
          insertAfter._next = batch;
        }
      }

      return batch;
    };
    /**
     * True if the supplied DOM node is a valid node element.
     *
     * @param {?DOMElement} node The candidate DOM node.
     * @return {boolean} True if the DOM is a valid DOM node.
     * @internal
     */


    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }

    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }

      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }

    function shouldHydrateDueToLegacyHeuristic(container) {
      var rootElement = getReactRootElementInContainer(container);
      return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }

    setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);
    var warnedAboutHydrateAPI = false;

    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
      var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

      if (!shouldHydrate) {
        var warned = false;
        var rootSibling = void 0;

        while (rootSibling = container.lastChild) {
          {
            if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
              warned = true;
              warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
            }
          }
          container.removeChild(rootSibling);
        }
      }

      {
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
          warnedAboutHydrateAPI = true;
          lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
        }
      } // Legacy roots are not async by default.

      var isAsync = false;
      return new ReactRoot(container, isAsync, shouldHydrate);
    }

    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      // TODO: Ensure all entry points contain this check
      !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
      {
        topLevelUpdateWarnings(container);
      } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
      // member of intersection type." Whyyyyyy.

      var root = container._reactRootContainer;

      if (!root) {
        // Initial mount
        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);

        if (typeof callback === 'function') {
          var originalCallback = callback;

          callback = function () {
            var instance = getPublicRootInstance(root._internalRoot);
            originalCallback.call(instance);
          };
        } // Initial mount should not be batched.


        unbatchedUpdates(function () {
          if (parentComponent != null) {
            root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
          } else {
            root.render(children, callback);
          }
        });
      } else {
        if (typeof callback === 'function') {
          var _originalCallback = callback;

          callback = function () {
            var instance = getPublicRootInstance(root._internalRoot);

            _originalCallback.call(instance);
          };
        } // Update


        if (parentComponent != null) {
          root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
        } else {
          root.render(children, callback);
        }
      }

      return getPublicRootInstance(root._internalRoot);
    }

    function createPortal(children, container) {
      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0; // TODO: pass ReactDOM portal implementation as third argument

      return createPortal$1(children, container, null, key);
    }

    var ReactDOM = {
      createPortal: createPortal,
      findDOMNode: function (componentOrElement) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrElement == null) {
          return null;
        }

        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }

        return findHostInstance(componentOrElement);
      },
      hydrate: function (element, container, callback) {
        // TODO: throw or warn if we couldn't hydrate?
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      },
      render: function (element, container, callback) {
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      },
      unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
        !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      },
      unmountComponentAtNode: function (container) {
        !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
            !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
          } // Unmount should not be batched.

          unbatchedUpdates(function () {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
              container._reactRootContainer = null;
            });
          }); // If you call unmountComponentAtNode twice in quick succession, you'll
          // get `true` twice. That's probably fine?

          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);

            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
          }
          return false;
        }
      },
      // Temporary alias since we already shipped React 16 RC with it.
      // TODO: remove in React 17.
      unstable_createPortal: function () {
        if (!didWarnAboutUnstableCreatePortal) {
          didWarnAboutUnstableCreatePortal = true;
          lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
        }

        return createPortal.apply(undefined, arguments);
      },
      unstable_batchedUpdates: batchedUpdates$1,
      unstable_interactiveUpdates: interactiveUpdates$1,
      flushSync: flushSync,
      unstable_flushControlled: flushControlled,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        // Keep in sync with ReactDOMUnstableNativeDependencies.js
        // and ReactTestUtils.js. This is an array for better minification.
        Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
      }
    };

    ReactDOM.unstable_createRoot = function createRoot(container, options) {
      !isValidContainer(container) ? invariant(false, 'unstable_createRoot(...): Target container is not a DOM element.') : void 0;
      var hydrate = options != null && options.hydrate === true;
      return new ReactRoot(container, true, hydrate);
    };

    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: 'react-dom'
    });
    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

          if (/^(https?|file):$/.test(protocol)) {
            console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
          }
        }
      }
    }
    var ReactDOM$2 = Object.freeze({
      default: ReactDOM
    });
    var ReactDOM$3 = ReactDOM$2 && ReactDOM || ReactDOM$2; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var reactDom = ReactDOM$3.default || ReactDOM$3;
    module.exports = reactDom;
  })();
}
},{"react":"node_modules/react/index.js","object-assign":"node_modules/object-assign/index.js","prop-types/checkPropTypes":"node_modules/prop-types/checkPropTypes.js","schedule":"node_modules/schedule/index.js","schedule/tracing":"node_modules/schedule/tracing.js"}],"node_modules/react-dom/index.js":[function(require,module,exports) {
'use strict';

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }

  if ("development" !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }

  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if ("development" === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = require('./cjs/react-dom.production.min.js');
} else {
  module.exports = require('./cjs/react-dom.development.js');
}
},{"./cjs/react-dom.development.js":"node_modules/react-dom/cjs/react-dom.development.js"}],"node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"node_modules/parcel-bundler/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    link.remove();
  };

  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

module.exports = reloadCSS;
},{"./bundle-url":"node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"components/DirectoryTree.css":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"./../svg/arrow-empty.svg":[["arrow-empty.6302448c.svg","svg/arrow-empty.svg"],"svg/arrow-empty.svg"],"./../svg/circle.svg":[["circle.12ec74e6.svg","svg/circle.svg"],"svg/circle.svg"],"./../svg/arrow-filled.svg":[["arrow-filled.3f66a46d.svg","svg/arrow-filled.svg"],"svg/arrow-filled.svg"],"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"components/DirectoryTree.jsx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DirectoryTree = DirectoryTree;

var React = _interopRequireWildcard(require("react"));

require("./DirectoryTree.css");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function getPadding(level) {
  return {
    paddingLeft: 0.5 * level + "em"
  };
}

function DirectoryTree(_ref) {
  var tree = _ref.tree,
      onFileClick = _ref.onFileClick,
      onDirectoryClick = _ref.onDirectoryClick;

  if (!tree.children) {
    return React.createElement("div", {
      className: "file-name hover",
      style: getPadding(tree.level),
      key: tree.name,
      onClick: function onClick() {
        return onFileClick(tree);
      }
    }, tree.name);
  }

  return React.createElement("div", {
    className: "directory"
  }, React.createElement("div", {
    className: "directory-name hover ".concat(tree.toggled && "toggled"),
    style: getPadding(tree.level),
    onClick: function onClick() {
      return onDirectoryClick(tree.path);
    }
  }, tree.name), tree.toggled && React.createElement("div", {
    className: "directory-inner"
  }, tree.children.map(function (child, index) {
    return React.createElement(DirectoryTree, {
      tree: child,
      key: index,
      onFileClick: onFileClick,
      onDirectoryClick: onDirectoryClick
    });
  })));
}
},{"react":"node_modules/react/index.js","./DirectoryTree.css":"components/DirectoryTree.css"}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/path-browserify/index.js":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

},{"process":"node_modules/process/browser.js"}],"tree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.directoryTree = directoryTree;
exports.updateTree = updateTree;

var _path = require("path");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function directoryTree(fs, path) {
  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  return {
    path: path,
    level: level,
    name: (0, _path.basename)(path) || ".",
    toggled: level < 2,
    children: fs.readdirSync(path).map(function (fileName) {
      var filePath = (0, _path.join)(path, fileName);

      if (fs.lstatSync(filePath).isDirectory()) {
        return directoryTree(fs, filePath, level + 1);
      }

      return {
        name: fileName,
        path: filePath,
        level: level + 1
      };
    })
  };
}

function splitPath(path) {
  if (path === "/") {
    return [];
  }

  return path.slice(1).split("/");
}

function updateTreeHelper(tree, pathArr, callback) {
  if (pathArr.length < 1) {
    return callback(tree);
  }

  var _pathArr = _toArray(pathArr),
      first = _pathArr[0],
      rest = _pathArr.slice(1);

  return _objectSpread({}, tree, {
    children: tree.children.map(function (child) {
      return child.name === first ? updateTreeHelper(child, rest, callback) : child;
    })
  });
}

function updateTree(tree, path, callback) {
  return updateTreeHelper(tree, splitPath(path), callback);
}
},{"path":"node_modules/path-browserify/index.js"}],"components/App.jsx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.App = void 0;

var React = _interopRequireWildcard(require("react"));

var _DirectoryTree = require("./DirectoryTree");

var _tree = require("../tree");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var toggle = function toggle(tree) {
  return _objectSpread({}, tree, {
    toggled: !tree.toggled
  });
};

var App =
/*#__PURE__*/
function (_React$Component) {
  _inherits(App, _React$Component);

  function App(props) {
    var _this;

    _classCallCheck(this, App);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));
    _this.state = {
      source: "",
      tree: _this.props.tree
    };
    return _this;
  }

  _createClass(App, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var readFile = this.props.readFile;
      var _this$state = this.state,
          source = _this$state.source,
          tree = _this$state.tree;
      return React.createElement("div", {
        className: "container"
      }, React.createElement("div", {
        className: "full-height",
        style: {
          width: "25%"
        }
      }, React.createElement(_DirectoryTree.DirectoryTree, {
        tree: tree,
        onFileClick: function onFileClick(file) {
          console.log(file);

          _this2.setState({
            source: readFile(file.path)
          });
        },
        onDirectoryClick: function onDirectoryClick(path) {
          return _this2.setState({
            tree: (0, _tree.updateTree)(tree, path, toggle)
          });
        }
      })), React.createElement("div", {
        className: "full-width full-height"
      }, React.createElement("textarea", {
        value: source,
        readOnly: true,
        className: "textarea full-width full-height"
      })));
    }
  }]);

  return App;
}(React.Component);

exports.App = App;
},{"react":"node_modules/react/index.js","./DirectoryTree":"components/DirectoryTree.jsx","../tree":"tree.js"}],"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/browserfs/dist/browserfs.js":[function(require,module,exports) {
var define;
var Buffer = require("buffer").Buffer;
var global = arguments[3];
var process = require("process");
var __dirname = "/Users/artemtyurin/parcel-plugin-static-zip/packages/example/node_modules/browserfs/dist";
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports["BrowserFS"] = factory();else root["BrowserFS"] = factory();
})(this, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId])
          /******/
          return installedModules[moduleId].exports;
        /******/

        /******/
        // Create a new module (and put it into the cache)

        /******/

        var module = installedModules[moduleId] = {
          /******/
          exports: {},

          /******/
          id: moduleId,

          /******/
          loaded: false
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.loaded = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // __webpack_public_path__

      /******/

      __webpack_require__.p = "";
      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(0);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer, global, module, process) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true
        });

        var buffer = __webpack_require__(2);

        var path = __webpack_require__(9);
        /**
         * Standard libc error codes. Add more to this enum and ErrorStrings as they are
         * needed.
         * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
         */

        /**
         * Standard libc error codes. Add more to this enum and ErrorStrings as they are
         * needed.
         * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
         */


        var ErrorCode;

        (function (ErrorCode) {
          ErrorCode[ErrorCode["EPERM"] = 1] = "EPERM";
          ErrorCode[ErrorCode["ENOENT"] = 2] = "ENOENT";
          ErrorCode[ErrorCode["EIO"] = 5] = "EIO";
          ErrorCode[ErrorCode["EBADF"] = 9] = "EBADF";
          ErrorCode[ErrorCode["EACCES"] = 13] = "EACCES";
          ErrorCode[ErrorCode["EBUSY"] = 16] = "EBUSY";
          ErrorCode[ErrorCode["EEXIST"] = 17] = "EEXIST";
          ErrorCode[ErrorCode["ENOTDIR"] = 20] = "ENOTDIR";
          ErrorCode[ErrorCode["EISDIR"] = 21] = "EISDIR";
          ErrorCode[ErrorCode["EINVAL"] = 22] = "EINVAL";
          ErrorCode[ErrorCode["EFBIG"] = 27] = "EFBIG";
          ErrorCode[ErrorCode["ENOSPC"] = 28] = "ENOSPC";
          ErrorCode[ErrorCode["EROFS"] = 30] = "EROFS";
          ErrorCode[ErrorCode["ENOTEMPTY"] = 39] = "ENOTEMPTY";
          ErrorCode[ErrorCode["ENOTSUP"] = 95] = "ENOTSUP";
        })(ErrorCode || (ErrorCode = {}));
        /* tslint:disable:variable-name */

        /**
         * Strings associated with each error code.
         * @hidden
         */


        var ErrorStrings = {};
        ErrorStrings[ErrorCode.EPERM] = 'Operation not permitted.';
        ErrorStrings[ErrorCode.ENOENT] = 'No such file or directory.';
        ErrorStrings[ErrorCode.EIO] = 'Input/output error.';
        ErrorStrings[ErrorCode.EBADF] = 'Bad file descriptor.';
        ErrorStrings[ErrorCode.EACCES] = 'Permission denied.';
        ErrorStrings[ErrorCode.EBUSY] = 'Resource busy or locked.';
        ErrorStrings[ErrorCode.EEXIST] = 'File exists.';
        ErrorStrings[ErrorCode.ENOTDIR] = 'File is not a directory.';
        ErrorStrings[ErrorCode.EISDIR] = 'File is a directory.';
        ErrorStrings[ErrorCode.EINVAL] = 'Invalid argument.';
        ErrorStrings[ErrorCode.EFBIG] = 'File is too big.';
        ErrorStrings[ErrorCode.ENOSPC] = 'No space left on disk.';
        ErrorStrings[ErrorCode.EROFS] = 'Cannot modify a read-only file system.';
        ErrorStrings[ErrorCode.ENOTEMPTY] = 'Directory is not empty.';
        ErrorStrings[ErrorCode.ENOTSUP] = 'Operation is not supported.';
        /* tslint:enable:variable-name */

        /**
         * Represents a BrowserFS error. Passed back to applications after a failed
         * call to the BrowserFS API.
         */

        var ApiError = function (Error) {
          function ApiError(type, message, path$$1) {
            if (message === void 0) message = ErrorStrings[type];
            Error.call(this, message); // Unsupported.

            this.syscall = "";
            this.errno = type;
            this.code = ErrorCode[type];
            this.path = path$$1;
            this.stack = new Error().stack;
            this.message = "Error: " + this.code + ": " + message + (this.path ? ", '" + this.path + "'" : '');
          }

          if (Error) ApiError.__proto__ = Error;
          ApiError.prototype = Object.create(Error && Error.prototype);
          ApiError.prototype.constructor = ApiError;

          ApiError.fromJSON = function fromJSON(json) {
            var err = new ApiError(0);
            err.errno = json.errno;
            err.code = json.code;
            err.path = json.path;
            err.stack = json.stack;
            err.message = json.message;
            return err;
          };
          /**
           * Creates an ApiError object from a buffer.
           */


          ApiError.fromBuffer = function fromBuffer(buffer$$1, i) {
            if (i === void 0) i = 0;
            return ApiError.fromJSON(JSON.parse(buffer$$1.toString('utf8', i + 4, i + 4 + buffer$$1.readUInt32LE(i))));
          };

          ApiError.FileError = function FileError(code, p) {
            return new ApiError(code, ErrorStrings[code], p);
          };

          ApiError.ENOENT = function ENOENT(path$$1) {
            return this.FileError(ErrorCode.ENOENT, path$$1);
          };

          ApiError.EEXIST = function EEXIST(path$$1) {
            return this.FileError(ErrorCode.EEXIST, path$$1);
          };

          ApiError.EISDIR = function EISDIR(path$$1) {
            return this.FileError(ErrorCode.EISDIR, path$$1);
          };

          ApiError.ENOTDIR = function ENOTDIR(path$$1) {
            return this.FileError(ErrorCode.ENOTDIR, path$$1);
          };

          ApiError.EPERM = function EPERM(path$$1) {
            return this.FileError(ErrorCode.EPERM, path$$1);
          };

          ApiError.ENOTEMPTY = function ENOTEMPTY(path$$1) {
            return this.FileError(ErrorCode.ENOTEMPTY, path$$1);
          };
          /**
           * @return A friendly error message.
           */


          ApiError.prototype.toString = function toString() {
            return this.message;
          };

          ApiError.prototype.toJSON = function toJSON() {
            return {
              errno: this.errno,
              code: this.code,
              path: this.path,
              stack: this.stack,
              message: this.message
            };
          };
          /**
           * Writes the API error into a buffer.
           */


          ApiError.prototype.writeToBuffer = function writeToBuffer(buffer$$1, i) {
            if (buffer$$1 === void 0) buffer$$1 = Buffer.alloc(this.bufferSize());
            if (i === void 0) i = 0;
            var bytesWritten = buffer$$1.write(JSON.stringify(this.toJSON()), i + 4);
            buffer$$1.writeUInt32LE(bytesWritten, i);
            return buffer$$1;
          };
          /**
           * The size of the API error in buffer-form in bytes.
           */


          ApiError.prototype.bufferSize = function bufferSize() {
            // 4 bytes for string length.
            return 4 + Buffer.byteLength(JSON.stringify(this.toJSON()));
          };

          return ApiError;
        }(Error);

        var api_error = Object.freeze({
          get ErrorCode() {
            return ErrorCode;
          },

          ErrorStrings: ErrorStrings,
          ApiError: ApiError
        });
        var ActionType;

        (function (ActionType) {
          // Indicates that the code should not do anything.
          ActionType[ActionType["NOP"] = 0] = "NOP"; // Indicates that the code should throw an exception.

          ActionType[ActionType["THROW_EXCEPTION"] = 1] = "THROW_EXCEPTION"; // Indicates that the code should truncate the file, but only if it is a file.

          ActionType[ActionType["TRUNCATE_FILE"] = 2] = "TRUNCATE_FILE"; // Indicates that the code should create the file.

          ActionType[ActionType["CREATE_FILE"] = 3] = "CREATE_FILE";
        })(ActionType || (ActionType = {}));
        /**
         * Represents one of the following file flags. A convenience object.
         *
         * * `'r'` - Open file for reading. An exception occurs if the file does not exist.
         * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.
         * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.
         * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.
         * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).
         * * `'wx'` - Like 'w' but opens the file in exclusive mode.
         * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).
         * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.
         * * `'a'` - Open file for appending. The file is created if it does not exist.
         * * `'ax'` - Like 'a' but opens the file in exclusive mode.
         * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.
         * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.
         *
         * Exclusive mode ensures that the file path is newly created.
         */


        var FileFlag = function FileFlag(flagStr) {
          this.flagStr = flagStr;

          if (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid flag: " + flagStr);
          }
        };
        /**
         * Get an object representing the given file flag.
         * @param modeStr The string representing the flag
         * @return The FileFlag object representing the flag
         * @throw when the flag string is invalid
         */


        FileFlag.getFileFlag = function getFileFlag(flagStr) {
          // Check cache first.
          if (FileFlag.flagCache.hasOwnProperty(flagStr)) {
            return FileFlag.flagCache[flagStr];
          }

          return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);
        };
        /**
         * Get the underlying flag string for this flag.
         */


        FileFlag.prototype.getFlagString = function getFlagString() {
          return this.flagStr;
        };
        /**
         * Returns true if the file is readable.
         */


        FileFlag.prototype.isReadable = function isReadable() {
          return this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;
        };
        /**
         * Returns true if the file is writeable.
         */


        FileFlag.prototype.isWriteable = function isWriteable() {
          return this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;
        };
        /**
         * Returns true if the file mode should truncate.
         */


        FileFlag.prototype.isTruncating = function isTruncating() {
          return this.flagStr.indexOf('w') !== -1;
        };
        /**
         * Returns true if the file is appendable.
         */


        FileFlag.prototype.isAppendable = function isAppendable() {
          return this.flagStr.indexOf('a') !== -1;
        };
        /**
         * Returns true if the file is open in synchronous mode.
         */


        FileFlag.prototype.isSynchronous = function isSynchronous() {
          return this.flagStr.indexOf('s') !== -1;
        };
        /**
         * Returns true if the file is open in exclusive mode.
         */


        FileFlag.prototype.isExclusive = function isExclusive() {
          return this.flagStr.indexOf('x') !== -1;
        };
        /**
         * Returns one of the static fields on this object that indicates the
         * appropriate response to the path existing.
         */


        FileFlag.prototype.pathExistsAction = function pathExistsAction() {
          if (this.isExclusive()) {
            return ActionType.THROW_EXCEPTION;
          } else if (this.isTruncating()) {
            return ActionType.TRUNCATE_FILE;
          } else {
            return ActionType.NOP;
          }
        };
        /**
         * Returns one of the static fields on this object that indicates the
         * appropriate response to the path not existing.
         */


        FileFlag.prototype.pathNotExistsAction = function pathNotExistsAction() {
          if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {
            return ActionType.CREATE_FILE;
          } else {
            return ActionType.THROW_EXCEPTION;
          }
        }; // Contains cached FileMode instances.


        FileFlag.flagCache = {}; // Array of valid mode strings.

        FileFlag.validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];
        /**
         * Indicates the type of the given file. Applied to 'mode'.
         */

        var FileType;

        (function (FileType) {
          FileType[FileType["FILE"] = 32768] = "FILE";
          FileType[FileType["DIRECTORY"] = 16384] = "DIRECTORY";
          FileType[FileType["SYMLINK"] = 40960] = "SYMLINK";
        })(FileType || (FileType = {}));
        /**
         * Emulation of Node's `fs.Stats` object.
         *
         * Attribute descriptions are from `man 2 stat'
         * @see http://nodejs.org/api/fs.html#fs_class_fs_stats
         * @see http://man7.org/linux/man-pages/man2/stat.2.html
         */


        var Stats = function Stats(itemType, size, mode, atime, mtime, ctime) {
          if (atime === void 0) atime = new Date();
          if (mtime === void 0) mtime = new Date();
          if (ctime === void 0) ctime = new Date();
          this.size = size;
          this.atime = atime;
          this.mtime = mtime;
          this.ctime = ctime;
          /**
           * UNSUPPORTED ATTRIBUTES
           * I assume no one is going to need these details, although we could fake
           * appropriate values if need be.
           */
          // ID of device containing file

          this.dev = 0; // inode number

          this.ino = 0; // device ID (if special file)

          this.rdev = 0; // number of hard links

          this.nlink = 1; // blocksize for file system I/O

          this.blksize = 4096; // @todo Maybe support these? atm, it's a one-user filesystem.
          // user ID of owner

          this.uid = 0; // group ID of owner

          this.gid = 0; // time file was created (currently unsupported)

          this.birthtime = new Date(0); // XXX: Some file systems stash data on stats objects.

          this.fileData = null;

          if (!mode) {
            switch (itemType) {
              case FileType.FILE:
                this.mode = 0x1a4;
                break;

              case FileType.DIRECTORY:
              default:
                this.mode = 0x1ff;
            }
          } else {
            this.mode = mode;
          } // number of 512B blocks allocated


          this.blocks = Math.ceil(size / 512); // Check if mode also includes top-most bits, which indicate the file's
          // type.

          if (this.mode < 0x1000) {
            this.mode |= itemType;
          }
        };

        Stats.fromBuffer = function fromBuffer(buffer$$1) {
          var size = buffer$$1.readUInt32LE(0),
              mode = buffer$$1.readUInt32LE(4),
              atime = buffer$$1.readDoubleLE(8),
              mtime = buffer$$1.readDoubleLE(16),
              ctime = buffer$$1.readDoubleLE(24);
          return new Stats(mode & 0xF000, size, mode & 0xFFF, new Date(atime), new Date(mtime), new Date(ctime));
        };

        Stats.prototype.toBuffer = function toBuffer() {
          var buffer$$1 = Buffer.alloc(32);
          buffer$$1.writeUInt32LE(this.size, 0);
          buffer$$1.writeUInt32LE(this.mode, 4);
          buffer$$1.writeDoubleLE(this.atime.getTime(), 8);
          buffer$$1.writeDoubleLE(this.mtime.getTime(), 16);
          buffer$$1.writeDoubleLE(this.ctime.getTime(), 24);
          return buffer$$1;
        };
        /**
         * **Nonstandard**: Clone the stats object.
         * @return [BrowserFS.node.fs.Stats]
         */


        Stats.prototype.clone = function clone() {
          return new Stats(this.mode & 0xF000, this.size, this.mode & 0xFFF, this.atime, this.mtime, this.ctime);
        };
        /**
         * @return [Boolean] True if this item is a file.
         */


        Stats.prototype.isFile = function isFile() {
          return (this.mode & 0xF000) === FileType.FILE;
        };
        /**
         * @return [Boolean] True if this item is a directory.
         */


        Stats.prototype.isDirectory = function isDirectory() {
          return (this.mode & 0xF000) === FileType.DIRECTORY;
        };
        /**
         * @return [Boolean] True if this item is a symbolic link (only valid through lstat)
         */


        Stats.prototype.isSymbolicLink = function isSymbolicLink() {
          return (this.mode & 0xF000) === FileType.SYMLINK;
        };
        /**
         * Change the mode of the file. We use this helper function to prevent messing
         * up the type of the file, which is encoded in mode.
         */


        Stats.prototype.chmod = function chmod(mode) {
          this.mode = this.mode & 0xF000 | mode;
        }; // We don't support the following types of files.


        Stats.prototype.isSocket = function isSocket() {
          return false;
        };

        Stats.prototype.isBlockDevice = function isBlockDevice() {
          return false;
        };

        Stats.prototype.isCharacterDevice = function isCharacterDevice() {
          return false;
        };

        Stats.prototype.isFIFO = function isFIFO() {
          return false;
        };
        /**
         * Wraps a callback function. Used for unit testing. Defaults to a NOP.
         * @hidden
         */


        var wrapCb = function (cb, numArgs) {
          return cb;
        };
        /**
         * @hidden
         */


        function assertRoot(fs) {
          if (fs) {
            return fs;
          }

          throw new ApiError(ErrorCode.EIO, "Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)");
        }
        /**
         * @hidden
         */


        function normalizeMode(mode, def) {
          switch (typeof mode) {
            case 'number':
              // (path, flag, mode, cb?)
              return mode;

            case 'string':
              // (path, flag, modeString, cb?)
              var trueMode = parseInt(mode, 8);

              if (!isNaN(trueMode)) {
                return trueMode;
              } // Invalid string.


              return def;

            default:
              return def;
          }
        }
        /**
         * @hidden
         */


        function normalizeTime(time) {
          if (time instanceof Date) {
            return time;
          } else if (typeof time === 'number') {
            return new Date(time * 1000);
          } else {
            throw new ApiError(ErrorCode.EINVAL, "Invalid time.");
          }
        }
        /**
         * @hidden
         */


        function normalizePath(p) {
          // Node doesn't allow null characters in paths.
          if (p.indexOf('\u0000') >= 0) {
            throw new ApiError(ErrorCode.EINVAL, 'Path must be a string without null bytes.');
          } else if (p === '') {
            throw new ApiError(ErrorCode.EINVAL, 'Path must not be empty.');
          }

          return path.resolve(p);
        }
        /**
         * @hidden
         */


        function normalizeOptions(options, defEnc, defFlag, defMode) {
          switch (typeof options) {
            case 'object':
              return {
                encoding: typeof options['encoding'] !== 'undefined' ? options['encoding'] : defEnc,
                flag: typeof options['flag'] !== 'undefined' ? options['flag'] : defFlag,
                mode: normalizeMode(options['mode'], defMode)
              };

            case 'string':
              return {
                encoding: options,
                flag: defFlag,
                mode: defMode
              };

            default:
              return {
                encoding: defEnc,
                flag: defFlag,
                mode: defMode
              };
          }
        }
        /**
         * The default callback is a NOP.
         * @hidden
         * @private
         */


        function nopCb() {} // NOP.

        /**
         * The node frontend to all filesystems.
         * This layer handles:
         *
         * * Sanity checking inputs.
         * * Normalizing paths.
         * * Resetting stack depth for asynchronous operations which may not go through
         *   the browser by wrapping all input callbacks using `setImmediate`.
         * * Performing the requested operation through the filesystem or the file
         *   descriptor, as appropriate.
         * * Handling optional arguments and setting default arguments.
         * @see http://nodejs.org/api/fs.html
         */


        var FS = function FS() {
          /* tslint:enable:variable-name */
          this.F_OK = 0;
          this.R_OK = 4;
          this.W_OK = 2;
          this.X_OK = 1;
          this.root = null;
          this.fdMap = {};
          this.nextFd = 100;
        };

        FS.prototype.initialize = function initialize(rootFS) {
          if (!rootFS.constructor.isAvailable()) {
            throw new ApiError(ErrorCode.EINVAL, 'Tried to instantiate BrowserFS with an unavailable file system.');
          }

          return this.root = rootFS;
        };
        /**
         * converts Date or number to a fractional UNIX timestamp
         * Grabbed from NodeJS sources (lib/fs.js)
         */


        FS.prototype._toUnixTimestamp = function _toUnixTimestamp(time) {
          if (typeof time === 'number') {
            return time;
          } else if (time instanceof Date) {
            return time.getTime() / 1000;
          }

          throw new Error("Cannot parse time: " + time);
        };
        /**
         * **NONSTANDARD**: Grab the FileSystem instance that backs this API.
         * @return [BrowserFS.FileSystem | null] Returns null if the file system has
         *   not been initialized.
         */


        FS.prototype.getRootFS = function getRootFS() {
          if (this.root) {
            return this.root;
          } else {
            return null;
          }
        }; // FILE OR DIRECTORY METHODS

        /**
         * Asynchronous rename. No arguments other than a possible exception are given
         * to the completion callback.
         * @param oldPath
         * @param newPath
         * @param callback
         */


        FS.prototype.rename = function rename(oldPath, newPath, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            assertRoot(this.root).rename(normalizePath(oldPath), normalizePath(newPath), newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous rename.
         * @param oldPath
         * @param newPath
         */


        FS.prototype.renameSync = function renameSync(oldPath, newPath) {
          assertRoot(this.root).renameSync(normalizePath(oldPath), normalizePath(newPath));
        };
        /**
         * Test whether or not the given path exists by checking with the file system.
         * Then call the callback argument with either true or false.
         * @example Sample invocation
         *   fs.exists('/etc/passwd', function (exists) {
         * util.debug(exists ? "it's there" : "no passwd!");
         *   });
         * @param path
         * @param callback
         */


        FS.prototype.exists = function exists(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            return assertRoot(this.root).exists(normalizePath(path$$1), newCb);
          } catch (e) {
            // Doesn't return an error. If something bad happens, we assume it just
            // doesn't exist.
            return newCb(false);
          }
        };
        /**
         * Test whether or not the given path exists by checking with the file system.
         * @param path
         * @return [boolean]
         */


        FS.prototype.existsSync = function existsSync(path$$1) {
          try {
            return assertRoot(this.root).existsSync(normalizePath(path$$1));
          } catch (e) {
            // Doesn't return an error. If something bad happens, we assume it just
            // doesn't exist.
            return false;
          }
        };
        /**
         * Asynchronous `stat`.
         * @param path
         * @param callback
         */


        FS.prototype.stat = function stat(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            return assertRoot(this.root).stat(normalizePath(path$$1), false, newCb);
          } catch (e) {
            return newCb(e);
          }
        };
        /**
         * Synchronous `stat`.
         * @param path
         * @return [BrowserFS.node.fs.Stats]
         */


        FS.prototype.statSync = function statSync(path$$1) {
          return assertRoot(this.root).statSync(normalizePath(path$$1), false);
        };
        /**
         * Asynchronous `lstat`.
         * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
         * then the link itself is stat-ed, not the file that it refers to.
         * @param path
         * @param callback
         */


        FS.prototype.lstat = function lstat(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            return assertRoot(this.root).stat(normalizePath(path$$1), true, newCb);
          } catch (e) {
            return newCb(e);
          }
        };
        /**
         * Synchronous `lstat`.
         * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
         * then the link itself is stat-ed, not the file that it refers to.
         * @param path
         * @return [BrowserFS.node.fs.Stats]
         */


        FS.prototype.lstatSync = function lstatSync(path$$1) {
          return assertRoot(this.root).statSync(normalizePath(path$$1), true);
        };

        FS.prototype.truncate = function truncate(path$$1, arg2, cb) {
          if (arg2 === void 0) arg2 = 0;
          if (cb === void 0) cb = nopCb;
          var len = 0;

          if (typeof arg2 === 'function') {
            cb = arg2;
          } else if (typeof arg2 === 'number') {
            len = arg2;
          }

          var newCb = wrapCb(cb, 1);

          try {
            if (len < 0) {
              throw new ApiError(ErrorCode.EINVAL);
            }

            return assertRoot(this.root).truncate(normalizePath(path$$1), len, newCb);
          } catch (e) {
            return newCb(e);
          }
        };
        /**
         * Synchronous `truncate`.
         * @param path
         * @param len
         */


        FS.prototype.truncateSync = function truncateSync(path$$1, len) {
          if (len === void 0) len = 0;

          if (len < 0) {
            throw new ApiError(ErrorCode.EINVAL);
          }

          return assertRoot(this.root).truncateSync(normalizePath(path$$1), len);
        };
        /**
         * Asynchronous `unlink`.
         * @param path
         * @param callback
         */


        FS.prototype.unlink = function unlink(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            return assertRoot(this.root).unlink(normalizePath(path$$1), newCb);
          } catch (e) {
            return newCb(e);
          }
        };
        /**
         * Synchronous `unlink`.
         * @param path
         */


        FS.prototype.unlinkSync = function unlinkSync(path$$1) {
          return assertRoot(this.root).unlinkSync(normalizePath(path$$1));
        };

        FS.prototype.open = function open(path$$1, flag, arg2, cb) {
          var this$1 = this;
          if (cb === void 0) cb = nopCb;
          var mode = normalizeMode(arg2, 0x1a4);
          cb = typeof arg2 === 'function' ? arg2 : cb;
          var newCb = wrapCb(cb, 2);

          try {
            assertRoot(this.root).open(normalizePath(path$$1), FileFlag.getFileFlag(flag), mode, function (e, file) {
              if (file) {
                newCb(e, this$1.getFdForFile(file));
              } else {
                newCb(e);
              }
            });
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous file open.
         * @see http://www.manpagez.com/man/2/open/
         * @param path
         * @param flags
         * @param mode defaults to `0644`
         * @return [BrowserFS.File]
         */


        FS.prototype.openSync = function openSync(path$$1, flag, mode) {
          if (mode === void 0) mode = 0x1a4;
          return this.getFdForFile(assertRoot(this.root).openSync(normalizePath(path$$1), FileFlag.getFileFlag(flag), normalizeMode(mode, 0x1a4)));
        };

        FS.prototype.readFile = function readFile(filename, arg2, cb) {
          if (arg2 === void 0) arg2 = {};
          if (cb === void 0) cb = nopCb;
          var options = normalizeOptions(arg2, null, 'r', null);
          cb = typeof arg2 === 'function' ? arg2 : cb;
          var newCb = wrapCb(cb, 2);

          try {
            var flag = FileFlag.getFileFlag(options['flag']);

            if (!flag.isReadable()) {
              return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.'));
            }

            return assertRoot(this.root).readFile(normalizePath(filename), options.encoding, flag, newCb);
          } catch (e) {
            return newCb(e);
          }
        };

        FS.prototype.readFileSync = function readFileSync(filename, arg2) {
          if (arg2 === void 0) arg2 = {};
          var options = normalizeOptions(arg2, null, 'r', null);
          var flag = FileFlag.getFileFlag(options.flag);

          if (!flag.isReadable()) {
            throw new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.');
          }

          return assertRoot(this.root).readFileSync(normalizePath(filename), options.encoding, flag);
        };

        FS.prototype.writeFile = function writeFile(filename, data, arg3, cb) {
          if (arg3 === void 0) arg3 = {};
          if (cb === void 0) cb = nopCb;
          var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);
          cb = typeof arg3 === 'function' ? arg3 : cb;
          var newCb = wrapCb(cb, 1);

          try {
            var flag = FileFlag.getFileFlag(options.flag);

            if (!flag.isWriteable()) {
              return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.'));
            }

            return assertRoot(this.root).writeFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);
          } catch (e) {
            return newCb(e);
          }
        };

        FS.prototype.writeFileSync = function writeFileSync(filename, data, arg3) {
          var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);
          var flag = FileFlag.getFileFlag(options.flag);

          if (!flag.isWriteable()) {
            throw new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.');
          }

          return assertRoot(this.root).writeFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);
        };

        FS.prototype.appendFile = function appendFile(filename, data, arg3, cb) {
          if (cb === void 0) cb = nopCb;
          var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);
          cb = typeof arg3 === 'function' ? arg3 : cb;
          var newCb = wrapCb(cb, 1);

          try {
            var flag = FileFlag.getFileFlag(options.flag);

            if (!flag.isAppendable()) {
              return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.'));
            }

            assertRoot(this.root).appendFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);
          } catch (e) {
            newCb(e);
          }
        };

        FS.prototype.appendFileSync = function appendFileSync(filename, data, arg3) {
          var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);
          var flag = FileFlag.getFileFlag(options.flag);

          if (!flag.isAppendable()) {
            throw new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.');
          }

          return assertRoot(this.root).appendFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);
        }; // FILE DESCRIPTOR METHODS

        /**
         * Asynchronous `fstat`.
         * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
         * specified by the file descriptor `fd`.
         * @param fd
         * @param callback
         */


        FS.prototype.fstat = function fstat(fd, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            var file = this.fd2file(fd);
            file.stat(newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `fstat`.
         * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
         * specified by the file descriptor `fd`.
         * @param fd
         * @return [BrowserFS.node.fs.Stats]
         */


        FS.prototype.fstatSync = function fstatSync(fd) {
          return this.fd2file(fd).statSync();
        };
        /**
         * Asynchronous close.
         * @param fd
         * @param callback
         */


        FS.prototype.close = function close(fd, cb) {
          var this$1 = this;
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            this.fd2file(fd).close(function (e) {
              if (!e) {
                this$1.closeFd(fd);
              }

              newCb(e);
            });
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous close.
         * @param fd
         */


        FS.prototype.closeSync = function closeSync(fd) {
          this.fd2file(fd).closeSync();
          this.closeFd(fd);
        };

        FS.prototype.ftruncate = function ftruncate(fd, arg2, cb) {
          if (cb === void 0) cb = nopCb;
          var length = typeof arg2 === 'number' ? arg2 : 0;
          cb = typeof arg2 === 'function' ? arg2 : cb;
          var newCb = wrapCb(cb, 1);

          try {
            var file = this.fd2file(fd);

            if (length < 0) {
              throw new ApiError(ErrorCode.EINVAL);
            }

            file.truncate(length, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous ftruncate.
         * @param fd
         * @param len
         */


        FS.prototype.ftruncateSync = function ftruncateSync(fd, len) {
          if (len === void 0) len = 0;
          var file = this.fd2file(fd);

          if (len < 0) {
            throw new ApiError(ErrorCode.EINVAL);
          }

          file.truncateSync(len);
        };
        /**
         * Asynchronous fsync.
         * @param fd
         * @param callback
         */


        FS.prototype.fsync = function fsync(fd, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            this.fd2file(fd).sync(newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous fsync.
         * @param fd
         */


        FS.prototype.fsyncSync = function fsyncSync(fd) {
          this.fd2file(fd).syncSync();
        };
        /**
         * Asynchronous fdatasync.
         * @param fd
         * @param callback
         */


        FS.prototype.fdatasync = function fdatasync(fd, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            this.fd2file(fd).datasync(newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous fdatasync.
         * @param fd
         */


        FS.prototype.fdatasyncSync = function fdatasyncSync(fd) {
          this.fd2file(fd).datasyncSync();
        };

        FS.prototype.write = function write(fd, arg2, arg3, arg4, arg5, cb) {
          if (cb === void 0) cb = nopCb;
          var buffer$$1,
              offset,
              length,
              position = null;

          if (typeof arg2 === 'string') {
            // Signature 1: (fd, string, [position?, [encoding?]], cb?)
            var encoding = 'utf8';

            switch (typeof arg3) {
              case 'function':
                // (fd, string, cb)
                cb = arg3;
                break;

              case 'number':
                // (fd, string, position, encoding?, cb?)
                position = arg3;
                encoding = typeof arg4 === 'string' ? arg4 : 'utf8';
                cb = typeof arg5 === 'function' ? arg5 : cb;
                break;

              default:
                // ...try to find the callback and get out of here!
                cb = typeof arg4 === 'function' ? arg4 : typeof arg5 === 'function' ? arg5 : cb;
                return cb(new ApiError(ErrorCode.EINVAL, 'Invalid arguments.'));
            }

            buffer$$1 = Buffer.from(arg2, encoding);
            offset = 0;
            length = buffer$$1.length;
          } else {
            // Signature 2: (fd, buffer, offset, length, position?, cb?)
            buffer$$1 = arg2;
            offset = arg3;
            length = arg4;
            position = typeof arg5 === 'number' ? arg5 : null;
            cb = typeof arg5 === 'function' ? arg5 : cb;
          }

          var newCb = wrapCb(cb, 3);

          try {
            var file = this.fd2file(fd);

            if (position === undefined || position === null) {
              position = file.getPos();
            }

            file.write(buffer$$1, offset, length, position, newCb);
          } catch (e) {
            newCb(e);
          }
        };

        FS.prototype.writeSync = function writeSync(fd, arg2, arg3, arg4, arg5) {
          var buffer$$1,
              offset = 0,
              length,
              position;

          if (typeof arg2 === 'string') {
            // Signature 1: (fd, string, [position?, [encoding?]])
            position = typeof arg3 === 'number' ? arg3 : null;
            var encoding = typeof arg4 === 'string' ? arg4 : 'utf8';
            offset = 0;
            buffer$$1 = Buffer.from(arg2, encoding);
            length = buffer$$1.length;
          } else {
            // Signature 2: (fd, buffer, offset, length, position?)
            buffer$$1 = arg2;
            offset = arg3;
            length = arg4;
            position = typeof arg5 === 'number' ? arg5 : null;
          }

          var file = this.fd2file(fd);

          if (position === undefined || position === null) {
            position = file.getPos();
          }

          return file.writeSync(buffer$$1, offset, length, position);
        };

        FS.prototype.read = function read(fd, arg2, arg3, arg4, arg5, cb) {
          if (cb === void 0) cb = nopCb;
          var position, offset, length, buffer$$1, newCb;

          if (typeof arg2 === 'number') {
            // legacy interface
            // (fd, length, position, encoding, callback)
            length = arg2;
            position = arg3;
            var encoding = arg4;
            cb = typeof arg5 === 'function' ? arg5 : cb;
            offset = 0;
            buffer$$1 = Buffer.alloc(length); // XXX: Inefficient.
            // Wrap the cb so we shelter upper layers of the API from these
            // shenanigans.

            newCb = wrapCb(function (err, bytesRead, buf) {
              if (err) {
                return cb(err);
              }

              cb(err, buf.toString(encoding), bytesRead);
            }, 3);
          } else {
            buffer$$1 = arg2;
            offset = arg3;
            length = arg4;
            position = arg5;
            newCb = wrapCb(cb, 3);
          }

          try {
            var file = this.fd2file(fd);

            if (position === undefined || position === null) {
              position = file.getPos();
            }

            file.read(buffer$$1, offset, length, position, newCb);
          } catch (e) {
            newCb(e);
          }
        };

        FS.prototype.readSync = function readSync(fd, arg2, arg3, arg4, arg5) {
          var shenanigans = false;
          var buffer$$1,
              offset,
              length,
              position,
              encoding = 'utf8';

          if (typeof arg2 === 'number') {
            length = arg2;
            position = arg3;
            encoding = arg4;
            offset = 0;
            buffer$$1 = Buffer.alloc(length);
            shenanigans = true;
          } else {
            buffer$$1 = arg2;
            offset = arg3;
            length = arg4;
            position = arg5;
          }

          var file = this.fd2file(fd);

          if (position === undefined || position === null) {
            position = file.getPos();
          }

          var rv = file.readSync(buffer$$1, offset, length, position);

          if (!shenanigans) {
            return rv;
          } else {
            return [buffer$$1.toString(encoding), rv];
          }
        };
        /**
         * Asynchronous `fchown`.
         * @param fd
         * @param uid
         * @param gid
         * @param callback
         */


        FS.prototype.fchown = function fchown(fd, uid, gid, callback) {
          if (callback === void 0) callback = nopCb;
          var newCb = wrapCb(callback, 1);

          try {
            this.fd2file(fd).chown(uid, gid, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `fchown`.
         * @param fd
         * @param uid
         * @param gid
         */


        FS.prototype.fchownSync = function fchownSync(fd, uid, gid) {
          this.fd2file(fd).chownSync(uid, gid);
        };
        /**
         * Asynchronous `fchmod`.
         * @param fd
         * @param mode
         * @param callback
         */


        FS.prototype.fchmod = function fchmod(fd, mode, cb) {
          var newCb = wrapCb(cb, 1);

          try {
            var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;
            this.fd2file(fd).chmod(numMode, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `fchmod`.
         * @param fd
         * @param mode
         */


        FS.prototype.fchmodSync = function fchmodSync(fd, mode) {
          var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;
          this.fd2file(fd).chmodSync(numMode);
        };
        /**
         * Change the file timestamps of a file referenced by the supplied file
         * descriptor.
         * @param fd
         * @param atime
         * @param mtime
         * @param callback
         */


        FS.prototype.futimes = function futimes(fd, atime, mtime, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            var file = this.fd2file(fd);

            if (typeof atime === 'number') {
              atime = new Date(atime * 1000);
            }

            if (typeof mtime === 'number') {
              mtime = new Date(mtime * 1000);
            }

            file.utimes(atime, mtime, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Change the file timestamps of a file referenced by the supplied file
         * descriptor.
         * @param fd
         * @param atime
         * @param mtime
         */


        FS.prototype.futimesSync = function futimesSync(fd, atime, mtime) {
          this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));
        }; // DIRECTORY-ONLY METHODS

        /**
         * Asynchronous `rmdir`.
         * @param path
         * @param callback
         */


        FS.prototype.rmdir = function rmdir(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).rmdir(path$$1, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `rmdir`.
         * @param path
         */


        FS.prototype.rmdirSync = function rmdirSync(path$$1) {
          path$$1 = normalizePath(path$$1);
          return assertRoot(this.root).rmdirSync(path$$1);
        };
        /**
         * Asynchronous `mkdir`.
         * @param path
         * @param mode defaults to `0777`
         * @param callback
         */


        FS.prototype.mkdir = function mkdir(path$$1, mode, cb) {
          if (cb === void 0) cb = nopCb;

          if (typeof mode === 'function') {
            cb = mode;
            mode = 0x1ff;
          }

          var newCb = wrapCb(cb, 1);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).mkdir(path$$1, mode, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `mkdir`.
         * @param path
         * @param mode defaults to `0777`
         */


        FS.prototype.mkdirSync = function mkdirSync(path$$1, mode) {
          assertRoot(this.root).mkdirSync(normalizePath(path$$1), normalizeMode(mode, 0x1ff));
        };
        /**
         * Asynchronous `readdir`. Reads the contents of a directory.
         * The callback gets two arguments `(err, files)` where `files` is an array of
         * the names of the files in the directory excluding `'.'` and `'..'`.
         * @param path
         * @param callback
         */


        FS.prototype.readdir = function readdir(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).readdir(path$$1, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `readdir`. Reads the contents of a directory.
         * @param path
         * @return [String[]]
         */


        FS.prototype.readdirSync = function readdirSync(path$$1) {
          path$$1 = normalizePath(path$$1);
          return assertRoot(this.root).readdirSync(path$$1);
        }; // SYMLINK METHODS

        /**
         * Asynchronous `link`.
         * @param srcpath
         * @param dstpath
         * @param callback
         */


        FS.prototype.link = function link(srcpath, dstpath, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            srcpath = normalizePath(srcpath);
            dstpath = normalizePath(dstpath);
            assertRoot(this.root).link(srcpath, dstpath, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `link`.
         * @param srcpath
         * @param dstpath
         */


        FS.prototype.linkSync = function linkSync(srcpath, dstpath) {
          srcpath = normalizePath(srcpath);
          dstpath = normalizePath(dstpath);
          return assertRoot(this.root).linkSync(srcpath, dstpath);
        };

        FS.prototype.symlink = function symlink(srcpath, dstpath, arg3, cb) {
          if (cb === void 0) cb = nopCb;
          var type = typeof arg3 === 'string' ? arg3 : 'file';
          cb = typeof arg3 === 'function' ? arg3 : cb;
          var newCb = wrapCb(cb, 1);

          try {
            if (type !== 'file' && type !== 'dir') {
              return newCb(new ApiError(ErrorCode.EINVAL, "Invalid type: " + type));
            }

            srcpath = normalizePath(srcpath);
            dstpath = normalizePath(dstpath);
            assertRoot(this.root).symlink(srcpath, dstpath, type, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `symlink`.
         * @param srcpath
         * @param dstpath
         * @param type can be either `'dir'` or `'file'` (default is `'file'`)
         */


        FS.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
          if (!type) {
            type = 'file';
          } else if (type !== 'file' && type !== 'dir') {
            throw new ApiError(ErrorCode.EINVAL, "Invalid type: " + type);
          }

          srcpath = normalizePath(srcpath);
          dstpath = normalizePath(dstpath);
          return assertRoot(this.root).symlinkSync(srcpath, dstpath, type);
        };
        /**
         * Asynchronous readlink.
         * @param path
         * @param callback
         */


        FS.prototype.readlink = function readlink(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).readlink(path$$1, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous readlink.
         * @param path
         * @return [String]
         */


        FS.prototype.readlinkSync = function readlinkSync(path$$1) {
          path$$1 = normalizePath(path$$1);
          return assertRoot(this.root).readlinkSync(path$$1);
        }; // PROPERTY OPERATIONS

        /**
         * Asynchronous `chown`.
         * @param path
         * @param uid
         * @param gid
         * @param callback
         */


        FS.prototype.chown = function chown(path$$1, uid, gid, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).chown(path$$1, false, uid, gid, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `chown`.
         * @param path
         * @param uid
         * @param gid
         */


        FS.prototype.chownSync = function chownSync(path$$1, uid, gid) {
          path$$1 = normalizePath(path$$1);
          assertRoot(this.root).chownSync(path$$1, false, uid, gid);
        };
        /**
         * Asynchronous `lchown`.
         * @param path
         * @param uid
         * @param gid
         * @param callback
         */


        FS.prototype.lchown = function lchown(path$$1, uid, gid, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).chown(path$$1, true, uid, gid, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `lchown`.
         * @param path
         * @param uid
         * @param gid
         */


        FS.prototype.lchownSync = function lchownSync(path$$1, uid, gid) {
          path$$1 = normalizePath(path$$1);
          assertRoot(this.root).chownSync(path$$1, true, uid, gid);
        };
        /**
         * Asynchronous `chmod`.
         * @param path
         * @param mode
         * @param callback
         */


        FS.prototype.chmod = function chmod(path$$1, mode, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            var numMode = normalizeMode(mode, -1);

            if (numMode < 0) {
              throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
            }

            assertRoot(this.root).chmod(normalizePath(path$$1), false, numMode, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `chmod`.
         * @param path
         * @param mode
         */


        FS.prototype.chmodSync = function chmodSync(path$$1, mode) {
          var numMode = normalizeMode(mode, -1);

          if (numMode < 0) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
          }

          path$$1 = normalizePath(path$$1);
          assertRoot(this.root).chmodSync(path$$1, false, numMode);
        };
        /**
         * Asynchronous `lchmod`.
         * @param path
         * @param mode
         * @param callback
         */


        FS.prototype.lchmod = function lchmod(path$$1, mode, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            var numMode = normalizeMode(mode, -1);

            if (numMode < 0) {
              throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
            }

            assertRoot(this.root).chmod(normalizePath(path$$1), true, numMode, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `lchmod`.
         * @param path
         * @param mode
         */


        FS.prototype.lchmodSync = function lchmodSync(path$$1, mode) {
          var numMode = normalizeMode(mode, -1);

          if (numMode < 1) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
          }

          assertRoot(this.root).chmodSync(normalizePath(path$$1), true, numMode);
        };
        /**
         * Change file timestamps of the file referenced by the supplied path.
         * @param path
         * @param atime
         * @param mtime
         * @param callback
         */


        FS.prototype.utimes = function utimes(path$$1, atime, mtime, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            assertRoot(this.root).utimes(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime), newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Change file timestamps of the file referenced by the supplied path.
         * @param path
         * @param atime
         * @param mtime
         */


        FS.prototype.utimesSync = function utimesSync(path$$1, atime, mtime) {
          assertRoot(this.root).utimesSync(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime));
        };

        FS.prototype.realpath = function realpath(path$$1, arg2, cb) {
          if (cb === void 0) cb = nopCb;
          var cache = typeof arg2 === 'object' ? arg2 : {};
          cb = typeof arg2 === 'function' ? arg2 : nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).realpath(path$$1, cache, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `realpath`.
         * @param path
         * @param cache An object literal of mapped paths that can be used to
         *   force a specific path resolution or avoid additional `fs.stat` calls for
         *   known real paths.
         * @return [String]
         */


        FS.prototype.realpathSync = function realpathSync(path$$1, cache) {
          if (cache === void 0) cache = {};
          path$$1 = normalizePath(path$$1);
          return assertRoot(this.root).realpathSync(path$$1, cache);
        };

        FS.prototype.watchFile = function watchFile(filename, arg2, listener) {
          if (listener === void 0) listener = nopCb;
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.unwatchFile = function unwatchFile(filename, listener) {
          if (listener === void 0) listener = nopCb;
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.watch = function watch(filename, arg2, listener) {
          if (listener === void 0) listener = nopCb;
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.access = function access(path$$1, arg2, cb) {
          if (cb === void 0) cb = nopCb;
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.accessSync = function accessSync(path$$1, mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.createReadStream = function createReadStream(path$$1, options) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.createWriteStream = function createWriteStream(path$$1, options) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * For unit testing. Passes all incoming callbacks to cbWrapper for wrapping.
         */


        FS.prototype.wrapCallbacks = function wrapCallbacks(cbWrapper) {
          wrapCb = cbWrapper;
        };

        FS.prototype.getFdForFile = function getFdForFile(file) {
          var fd = this.nextFd++;
          this.fdMap[fd] = file;
          return fd;
        };

        FS.prototype.fd2file = function fd2file(fd) {
          var rv = this.fdMap[fd];

          if (rv) {
            return rv;
          } else {
            throw new ApiError(ErrorCode.EBADF, 'Invalid file descriptor.');
          }
        };

        FS.prototype.closeFd = function closeFd(fd) {
          delete this.fdMap[fd];
        };
        /* tslint:disable:variable-name */
        // Exported fs.Stats.


        FS.Stats = Stats; // Manually export the individual public functions of fs.
        // Required because some code will invoke functions off of the module.
        // e.g.:
        // let writeFile = fs.writeFile;
        // writeFile(...)

        /**
         * @hidden
         */

        var fs = new FS();
        /**
         * @hidden
         */

        var _fsMock = {};
        /**
         * @hidden
         */

        var fsProto = FS.prototype;
        Object.keys(fsProto).forEach(function (key) {
          if (typeof fs[key] === 'function') {
            _fsMock[key] = function () {
              return fs[key].apply(fs, arguments);
            };
          } else {
            _fsMock[key] = fs[key];
          }
        });

        _fsMock['changeFSModule'] = function (newFs) {
          fs = newFs;
        };

        _fsMock['getFSModule'] = function () {
          return fs;
        };

        _fsMock['FS'] = FS;
        /*
         * Levenshtein distance, from the `js-levenshtein` NPM module.
         * Copied here to avoid complexity of adding another CommonJS module dependency.
         */

        function _min(d0, d1, d2, bx, ay) {
          return d0 < d1 || d2 < d1 ? d0 > d2 ? d2 + 1 : d0 + 1 : bx === ay ? d1 : d1 + 1;
        }
        /**
         * Calculates levenshtein distance.
         * @param a
         * @param b
         */


        function levenshtein(a, b) {
          if (a === b) {
            return 0;
          }

          if (a.length > b.length) {
            var tmp = a;
            a = b;
            b = tmp;
          }

          var la = a.length;
          var lb = b.length;

          while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {
            la--;
            lb--;
          }

          var offset = 0;

          while (offset < la && a.charCodeAt(offset) === b.charCodeAt(offset)) {
            offset++;
          }

          la -= offset;
          lb -= offset;

          if (la === 0 || lb === 1) {
            return lb;
          }

          var vector = new Array(la << 1);

          for (var y = 0; y < la;) {
            vector[la + y] = a.charCodeAt(offset + y);
            vector[y] = ++y;
          }

          var x;
          var d0;
          var d1;
          var d2;
          var d3;

          for (x = 0; x + 3 < lb;) {
            var bx0 = b.charCodeAt(offset + (d0 = x));
            var bx1 = b.charCodeAt(offset + (d1 = x + 1));
            var bx2 = b.charCodeAt(offset + (d2 = x + 2));
            var bx3 = b.charCodeAt(offset + (d3 = x + 3));
            var dd$1 = x += 4;

            for (var y$1 = 0; y$1 < la;) {
              var ay = vector[la + y$1];
              var dy = vector[y$1];
              d0 = _min(dy, d0, d1, bx0, ay);
              d1 = _min(d0, d1, d2, bx1, ay);
              d2 = _min(d1, d2, d3, bx2, ay);
              dd$1 = _min(d2, d3, dd$1, bx3, ay);
              vector[y$1++] = dd$1;
              d3 = d2;
              d2 = d1;
              d1 = d0;
              d0 = dy;
            }
          }

          var dd = 0;

          for (; x < lb;) {
            var bx0$1 = b.charCodeAt(offset + (d0 = x));
            dd = ++x;

            for (var y$2 = 0; y$2 < la; y$2++) {
              var dy$1 = vector[y$2];
              vector[y$2] = dd = dy$1 < d0 || dd < d0 ? dy$1 > dd ? dd + 1 : dy$1 + 1 : bx0$1 === vector[la + y$2] ? d0 : d0 + 1;
              d0 = dy$1;
            }
          }

          return dd;
        }

        function deprecationMessage(print, fsName, opts) {
          if (print) {
            console.warn("[" + fsName + "] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '" + fsName + ".Create(" + JSON.stringify(opts) + ", callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details.");
          }
        }
        /**
         * Checks for any IE version, including IE11 which removed MSIE from the
         * userAgent string.
         * @hidden
         */


        var isIE = typeof navigator !== "undefined" && !!(/(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || navigator.userAgent.indexOf('Trident') !== -1);
        /**
         * Check if we're in a web worker.
         * @hidden
         */

        var isWebWorker = typeof window === "undefined";
        /**
         * Throws an exception. Called on code paths that should be impossible.
         * @hidden
         */

        function fail() {
          throw new Error("BFS has reached an impossible code path; please file a bug.");
        }
        /**
         * Synchronous recursive makedir.
         * @hidden
         */


        function mkdirpSync(p, mode, fs) {
          if (!fs.existsSync(p)) {
            mkdirpSync(path.dirname(p), mode, fs);
            fs.mkdirSync(p, mode);
          }
        }
        /**
         * Converts a buffer into an array buffer. Attempts to do so in a
         * zero-copy manner, e.g. the array references the same memory.
         * @hidden
         */


        function buffer2ArrayBuffer(buff) {
          var u8 = buffer2Uint8array(buff),
              u8offset = u8.byteOffset,
              u8Len = u8.byteLength;

          if (u8offset === 0 && u8Len === u8.buffer.byteLength) {
            return u8.buffer;
          } else {
            return u8.buffer.slice(u8offset, u8offset + u8Len);
          }
        }
        /**
         * Converts a buffer into a Uint8Array. Attempts to do so in a
         * zero-copy manner, e.g. the array references the same memory.
         * @hidden
         */


        function buffer2Uint8array(buff) {
          if (buff instanceof Uint8Array) {
            // BFS & Node v4.0 buffers *are* Uint8Arrays.
            return buff;
          } else {
            // Uint8Arrays can be constructed from arrayish numbers.
            // At this point, we assume this isn't a BFS array.
            return new Uint8Array(buff);
          }
        }
        /**
         * Converts the given arrayish object into a Buffer. Attempts to
         * be zero-copy.
         * @hidden
         */


        function arrayish2Buffer(arr) {
          if (arr instanceof Buffer) {
            return arr;
          } else if (arr instanceof Uint8Array) {
            return uint8Array2Buffer(arr);
          } else {
            return Buffer.from(arr);
          }
        }
        /**
         * Converts the given Uint8Array into a Buffer. Attempts to be zero-copy.
         * @hidden
         */


        function uint8Array2Buffer(u8) {
          if (u8 instanceof Buffer) {
            return u8;
          } else if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength) {
            return arrayBuffer2Buffer(u8.buffer);
          } else {
            return Buffer.from(u8.buffer, u8.byteOffset, u8.byteLength);
          }
        }
        /**
         * Converts the given array buffer into a Buffer. Attempts to be
         * zero-copy.
         * @hidden
         */


        function arrayBuffer2Buffer(ab) {
          return Buffer.from(ab);
        }
        /**
         * Copies a slice of the given buffer
         * @hidden
         */


        function copyingSlice(buff, start, end) {
          if (start === void 0) start = 0;
          if (end === void 0) end = buff.length;

          if (start < 0 || end < 0 || end > buff.length || start > end) {
            throw new TypeError("Invalid slice bounds on buffer of length " + buff.length + ": [" + start + ", " + end + "]");
          }

          if (buff.length === 0) {
            // Avoid s0 corner case in ArrayBuffer case.
            return emptyBuffer();
          } else {
            var u8 = buffer2Uint8array(buff),
                s0 = buff[0],
                newS0 = (s0 + 1) % 0xFF;
            buff[0] = newS0;

            if (u8[0] === newS0) {
              // Same memory. Revert & copy.
              u8[0] = s0;
              return uint8Array2Buffer(u8.slice(start, end));
            } else {
              // Revert.
              buff[0] = s0;
              return uint8Array2Buffer(u8.subarray(start, end));
            }
          }
        }
        /**
         * @hidden
         */


        var emptyBuff = null;
        /**
         * Returns an empty buffer.
         * @hidden
         */

        function emptyBuffer() {
          if (emptyBuff) {
            return emptyBuff;
          }

          return emptyBuff = Buffer.alloc(0);
        }
        /**
         * Option validator for a Buffer file system option.
         * @hidden
         */


        function bufferValidator(v, cb) {
          if (Buffer.isBuffer(v)) {
            cb();
          } else {
            cb(new ApiError(ErrorCode.EINVAL, "option must be a Buffer."));
          }
        }
        /**
         * Checks that the given options object is valid for the file system options.
         * @hidden
         */


        function checkOptions(fsType, opts, cb) {
          var optsInfo = fsType.Options;
          var fsName = fsType.Name;
          var pendingValidators = 0;
          var callbackCalled = false;
          var loopEnded = false;

          function validatorCallback(e) {
            if (!callbackCalled) {
              if (e) {
                callbackCalled = true;
                cb(e);
              }

              pendingValidators--;

              if (pendingValidators === 0 && loopEnded) {
                cb();
              }
            }
          } // Check for required options.


          var loop = function (optName) {
            if (optsInfo.hasOwnProperty(optName)) {
              var opt = optsInfo[optName];
              var providedValue = opts[optName];

              if (providedValue === undefined || providedValue === null) {
                if (!opt.optional) {
                  // Required option, not provided.
                  // Any incorrect options provided? Which ones are close to the provided one?
                  // (edit distance 5 === close)
                  var incorrectOptions = Object.keys(opts).filter(function (o) {
                    return !(o in optsInfo);
                  }).map(function (a) {
                    return {
                      str: a,
                      distance: levenshtein(optName, a)
                    };
                  }).filter(function (o) {
                    return o.distance < 5;
                  }).sort(function (a, b) {
                    return a.distance - b.distance;
                  }); // Validators may be synchronous.

                  if (callbackCalled) {
                    return {};
                  }

                  callbackCalled = true;
                  return {
                    v: cb(new ApiError(ErrorCode.EINVAL, "[" + fsName + "] Required option '" + optName + "' not provided." + (incorrectOptions.length > 0 ? " You provided unrecognized option '" + incorrectOptions[0].str + "'; perhaps you meant to type '" + optName + "'." : '') + "\nOption description: " + opt.description))
                  };
                } // Else: Optional option, not provided. That is OK.

              } else {
                // Option provided! Check type.
                var typeMatches = false;

                if (Array.isArray(opt.type)) {
                  typeMatches = opt.type.indexOf(typeof providedValue) !== -1;
                } else {
                  typeMatches = typeof providedValue === opt.type;
                }

                if (!typeMatches) {
                  // Validators may be synchronous.
                  if (callbackCalled) {
                    return {};
                  }

                  callbackCalled = true;
                  return {
                    v: cb(new ApiError(ErrorCode.EINVAL, "[" + fsName + "] Value provided for option " + optName + " is not the proper type. Expected " + (Array.isArray(opt.type) ? "one of {" + opt.type.join(", ") + "}" : opt.type) + ", but received " + typeof providedValue + "\nOption description: " + opt.description))
                  };
                } else if (opt.validator) {
                  pendingValidators++;
                  opt.validator(providedValue, validatorCallback);
                } // Otherwise: All good!

              }
            }
          };

          for (var optName in optsInfo) {
            var returned = loop(optName);
            if (returned) return returned.v;
          }

          loopEnded = true;

          if (pendingValidators === 0 && !callbackCalled) {
            cb();
          }
        }

        var BFSUtils = Object.freeze({
          deprecationMessage: deprecationMessage,
          isIE: isIE,
          isWebWorker: isWebWorker,
          fail: fail,
          mkdirpSync: mkdirpSync,
          buffer2ArrayBuffer: buffer2ArrayBuffer,
          buffer2Uint8array: buffer2Uint8array,
          arrayish2Buffer: arrayish2Buffer,
          uint8Array2Buffer: uint8Array2Buffer,
          arrayBuffer2Buffer: arrayBuffer2Buffer,
          copyingSlice: copyingSlice,
          emptyBuffer: emptyBuffer,
          bufferValidator: bufferValidator,
          checkOptions: checkOptions
        });

        var BFSEmscriptenStreamOps = function BFSEmscriptenStreamOps(fs) {
          this.fs = fs;
          this.nodefs = fs.getNodeFS();
          this.FS = fs.getFS();
          this.PATH = fs.getPATH();
          this.ERRNO_CODES = fs.getERRNO_CODES();
        };

        BFSEmscriptenStreamOps.prototype.open = function open(stream) {
          var path$$1 = this.fs.realPath(stream.node);
          var FS = this.FS;

          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = this.nodefs.openSync(path$$1, this.fs.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenStreamOps.prototype.close = function close(stream) {
          var FS = this.FS;

          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              this.nodefs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenStreamOps.prototype.read = function read(stream, buffer$$1, offset, length, position) {
          // Avoid copying overhead by reading directly into buffer.
          try {
            return this.nodefs.readSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
          } catch (e) {
            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenStreamOps.prototype.write = function write(stream, buffer$$1, offset, length, position) {
          // Avoid copying overhead.
          try {
            return this.nodefs.writeSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
          } catch (e) {
            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenStreamOps.prototype.llseek = function llseek(stream, offset, whence) {
          var position = offset;

          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (this.FS.isFile(stream.node.mode)) {
              try {
                var stat = this.nodefs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            }
          }

          if (position < 0) {
            throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);
          }

          stream.position = position;
          return position;
        };

        var BFSEmscriptenNodeOps = function BFSEmscriptenNodeOps(fs) {
          this.fs = fs;
          this.nodefs = fs.getNodeFS();
          this.FS = fs.getFS();
          this.PATH = fs.getPATH();
          this.ERRNO_CODES = fs.getERRNO_CODES();
        };

        BFSEmscriptenNodeOps.prototype.getattr = function getattr(node) {
          var path$$1 = this.fs.realPath(node);
          var stat;

          try {
            stat = this.nodefs.lstatSync(path$$1);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }

          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        };

        BFSEmscriptenNodeOps.prototype.setattr = function setattr(node, attr) {
          var path$$1 = this.fs.realPath(node);

          try {
            if (attr.mode !== undefined) {
              this.nodefs.chmodSync(path$$1, attr.mode); // update the common node structure mode as well

              node.mode = attr.mode;
            }

            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              this.nodefs.utimesSync(path$$1, date, date);
            }
          } catch (e) {
            if (!e.code) {
              throw e;
            } // Ignore not supported errors. Emscripten does utimesSync when it
            // writes files, but never really requires the value to be set.


            if (e.code !== "ENOTSUP") {
              throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
            }
          }

          if (attr.size !== undefined) {
            try {
              this.nodefs.truncateSync(path$$1, attr.size);
            } catch (e) {
              if (!e.code) {
                throw e;
              }

              throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
            }
          }
        };

        BFSEmscriptenNodeOps.prototype.lookup = function lookup(parent, name) {
          var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
          var mode = this.fs.getMode(path$$1);
          return this.fs.createNode(parent, name, mode);
        };

        BFSEmscriptenNodeOps.prototype.mknod = function mknod(parent, name, mode, dev) {
          var node = this.fs.createNode(parent, name, mode, dev); // create the backing node for this in the fs root as well

          var path$$1 = this.fs.realPath(node);

          try {
            if (this.FS.isDir(node.mode)) {
              this.nodefs.mkdirSync(path$$1, node.mode);
            } else {
              this.nodefs.writeFileSync(path$$1, '', {
                mode: node.mode
              });
            }
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }

          return node;
        };

        BFSEmscriptenNodeOps.prototype.rename = function rename(oldNode, newDir, newName) {
          var oldPath = this.fs.realPath(oldNode);
          var newPath = this.PATH.join2(this.fs.realPath(newDir), newName);

          try {
            this.nodefs.renameSync(oldPath, newPath); // This logic is missing from the original NodeFS,
            // causing Emscripten's filesystem to think that the old file still exists.

            oldNode.name = newName;
            oldNode.parent = newDir;
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenNodeOps.prototype.unlink = function unlink(parent, name) {
          var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);

          try {
            this.nodefs.unlinkSync(path$$1);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenNodeOps.prototype.rmdir = function rmdir(parent, name) {
          var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);

          try {
            this.nodefs.rmdirSync(path$$1);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenNodeOps.prototype.readdir = function readdir(node) {
          var path$$1 = this.fs.realPath(node);

          try {
            // Node does not list . and .. in directory listings,
            // but Emscripten expects it.
            var contents = this.nodefs.readdirSync(path$$1);
            contents.push('.', '..');
            return contents;
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenNodeOps.prototype.symlink = function symlink(parent, newName, oldPath) {
          var newPath = this.PATH.join2(this.fs.realPath(parent), newName);

          try {
            this.nodefs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenNodeOps.prototype.readlink = function readlink(node) {
          var path$$1 = this.fs.realPath(node);

          try {
            return this.nodefs.readlinkSync(path$$1);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        var BFSEmscriptenFS = function BFSEmscriptenFS(_FS, _PATH, _ERRNO_CODES, nodefs) {
          if (_FS === void 0) _FS = self['FS'];
          if (_PATH === void 0) _PATH = self['PATH'];
          if (_ERRNO_CODES === void 0) _ERRNO_CODES = self['ERRNO_CODES'];
          if (nodefs === void 0) nodefs = _fsMock; // This maps the integer permission modes from http://linux.die.net/man/3/open
          // to node.js-specific file open permission strings at http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback

          this.flagsToPermissionStringMap = {
            0
            /*O_RDONLY*/
            : 'r',
            1
            /*O_WRONLY*/
            : 'r+',
            2
            /*O_RDWR*/
            : 'r+',
            64
            /*O_CREAT*/
            : 'r',
            65
            /*O_WRONLY|O_CREAT*/
            : 'r+',
            66
            /*O_RDWR|O_CREAT*/
            : 'r+',
            129
            /*O_WRONLY|O_EXCL*/
            : 'rx+',
            193
            /*O_WRONLY|O_CREAT|O_EXCL*/
            : 'rx+',
            514
            /*O_RDWR|O_TRUNC*/
            : 'w+',
            577
            /*O_WRONLY|O_CREAT|O_TRUNC*/
            : 'w',
            578
            /*O_CREAT|O_RDWR|O_TRUNC*/
            : 'w+',
            705
            /*O_WRONLY|O_CREAT|O_EXCL|O_TRUNC*/
            : 'wx',
            706
            /*O_RDWR|O_CREAT|O_EXCL|O_TRUNC*/
            : 'wx+',
            1024
            /*O_APPEND*/
            : 'a',
            1025
            /*O_WRONLY|O_APPEND*/
            : 'a',
            1026
            /*O_RDWR|O_APPEND*/
            : 'a+',
            1089
            /*O_WRONLY|O_CREAT|O_APPEND*/
            : 'a',
            1090
            /*O_RDWR|O_CREAT|O_APPEND*/
            : 'a+',
            1153
            /*O_WRONLY|O_EXCL|O_APPEND*/
            : 'ax',
            1154
            /*O_RDWR|O_EXCL|O_APPEND*/
            : 'ax+',
            1217
            /*O_WRONLY|O_CREAT|O_EXCL|O_APPEND*/
            : 'ax',
            1218
            /*O_RDWR|O_CREAT|O_EXCL|O_APPEND*/
            : 'ax+',
            4096
            /*O_RDONLY|O_DSYNC*/
            : 'rs',
            4098
            /*O_RDWR|O_DSYNC*/
            : 'rs+'
          };
          this.nodefs = nodefs;
          this.FS = _FS;
          this.PATH = _PATH;
          this.ERRNO_CODES = _ERRNO_CODES;
          this.node_ops = new BFSEmscriptenNodeOps(this);
          this.stream_ops = new BFSEmscriptenStreamOps(this);
        };

        BFSEmscriptenFS.prototype.mount = function mount(m) {
          return this.createNode(null, '/', this.getMode(m.opts.root), 0);
        };

        BFSEmscriptenFS.prototype.createNode = function createNode(parent, name, mode, dev) {
          var FS = this.FS;

          if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
            throw new FS.ErrnoError(this.ERRNO_CODES.EINVAL);
          }

          var node = FS.createNode(parent, name, mode);
          node.node_ops = this.node_ops;
          node.stream_ops = this.stream_ops;
          return node;
        };

        BFSEmscriptenFS.prototype.getMode = function getMode(path$$1) {
          var stat;

          try {
            stat = this.nodefs.lstatSync(path$$1);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }

          return stat.mode;
        };

        BFSEmscriptenFS.prototype.realPath = function realPath(node) {
          var parts = [];

          while (node.parent !== node) {
            parts.push(node.name);
            node = node.parent;
          }

          parts.push(node.mount.opts.root);
          parts.reverse();
          return this.PATH.join.apply(null, parts);
        };

        BFSEmscriptenFS.prototype.flagsToPermissionString = function flagsToPermissionString(flags) {
          var parsedFlags = typeof flags === "string" ? parseInt(flags, 10) : flags;
          parsedFlags &= 0x1FFF;

          if (parsedFlags in this.flagsToPermissionStringMap) {
            return this.flagsToPermissionStringMap[parsedFlags];
          } else {
            return flags;
          }
        };

        BFSEmscriptenFS.prototype.getNodeFS = function getNodeFS() {
          return this.nodefs;
        };

        BFSEmscriptenFS.prototype.getFS = function getFS() {
          return this.FS;
        };

        BFSEmscriptenFS.prototype.getPATH = function getPATH() {
          return this.PATH;
        };

        BFSEmscriptenFS.prototype.getERRNO_CODES = function getERRNO_CODES() {
          return this.ERRNO_CODES;
        };
        /**
         * Basic filesystem class. Most filesystems should extend this class, as it
         * provides default implementations for a handful of methods.
         */


        var BaseFileSystem = function BaseFileSystem() {};

        BaseFileSystem.prototype.supportsLinks = function supportsLinks() {
          return false;
        };

        BaseFileSystem.prototype.diskSpace = function diskSpace(p, cb) {
          cb(0, 0);
        };
        /**
         * Opens the file at path p with the given flag. The file must exist.
         * @param p The path to open.
         * @param flag The flag to use when opening the file.
         */


        BaseFileSystem.prototype.openFile = function openFile(p, flag, cb) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * Create the file at path p with the given mode. Then, open it with the given
         * flag.
         */


        BaseFileSystem.prototype.createFile = function createFile(p, flag, mode, cb) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.open = function open(p, flag, mode, cb) {
          var this$1 = this;

          var mustBeFile = function (e, stats) {
            if (e) {
              // File does not exist.
              switch (flag.pathNotExistsAction()) {
                case ActionType.CREATE_FILE:
                  // Ensure parent exists.
                  return this$1.stat(path.dirname(p), false, function (e, parentStats) {
                    if (e) {
                      cb(e);
                    } else if (parentStats && !parentStats.isDirectory()) {
                      cb(ApiError.ENOTDIR(path.dirname(p)));
                    } else {
                      this$1.createFile(p, flag, mode, cb);
                    }
                  });

                case ActionType.THROW_EXCEPTION:
                  return cb(ApiError.ENOENT(p));

                default:
                  return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.'));
              }
            } else {
              // File exists.
              if (stats && stats.isDirectory()) {
                return cb(ApiError.EISDIR(p));
              }

              switch (flag.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                  return cb(ApiError.EEXIST(p));

                case ActionType.TRUNCATE_FILE:
                  // NOTE: In a previous implementation, we deleted the file and
                  // re-created it. However, this created a race condition if another
                  // asynchronous request was trying to read the file, as the file
                  // would not exist for a small period of time.
                  return this$1.openFile(p, flag, function (e, fd) {
                    if (e) {
                      cb(e);
                    } else if (fd) {
                      fd.truncate(0, function () {
                        fd.sync(function () {
                          cb(null, fd);
                        });
                      });
                    } else {
                      fail();
                    }
                  });

                case ActionType.NOP:
                  return this$1.openFile(p, flag, cb);

                default:
                  return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.'));
              }
            }
          };

          this.stat(p, false, mustBeFile);
        };

        BaseFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.renameSync = function renameSync(oldPath, newPath) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.stat = function stat(p, isLstat, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.statSync = function statSync(p, isLstat) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * Opens the file at path p with the given flag. The file must exist.
         * @param p The path to open.
         * @param flag The flag to use when opening the file.
         * @return A File object corresponding to the opened file.
         */


        BaseFileSystem.prototype.openFileSync = function openFileSync(p, flag, mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * Create the file at path p with the given mode. Then, open it with the given
         * flag.
         */


        BaseFileSystem.prototype.createFileSync = function createFileSync(p, flag, mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.openSync = function openSync(p, flag, mode) {
          // Check if the path exists, and is a file.
          var stats;

          try {
            stats = this.statSync(p, false);
          } catch (e) {
            // File does not exist.
            switch (flag.pathNotExistsAction()) {
              case ActionType.CREATE_FILE:
                // Ensure parent exists.
                var parentStats = this.statSync(path.dirname(p), false);

                if (!parentStats.isDirectory()) {
                  throw ApiError.ENOTDIR(path.dirname(p));
                }

                return this.createFileSync(p, flag, mode);

              case ActionType.THROW_EXCEPTION:
                throw ApiError.ENOENT(p);

              default:
                throw new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.');
            }
          } // File exists.


          if (stats.isDirectory()) {
            throw ApiError.EISDIR(p);
          }

          switch (flag.pathExistsAction()) {
            case ActionType.THROW_EXCEPTION:
              throw ApiError.EEXIST(p);

            case ActionType.TRUNCATE_FILE:
              // Delete file.
              this.unlinkSync(p); // Create file. Use the same mode as the old file.
              // Node itself modifies the ctime when this occurs, so this action
              // will preserve that behavior if the underlying file system
              // supports those properties.

              return this.createFileSync(p, flag, stats.mode);

            case ActionType.NOP:
              return this.openFileSync(p, flag, mode);

            default:
              throw new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.');
          }
        };

        BaseFileSystem.prototype.unlink = function unlink(p, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.unlinkSync = function unlinkSync(p) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.rmdir = function rmdir(p, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.rmdirSync = function rmdirSync(p) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.mkdir = function mkdir(p, mode, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.mkdirSync = function mkdirSync(p, mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.readdir = function readdir(p, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.readdirSync = function readdirSync(p) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.exists = function exists(p, cb) {
          this.stat(p, null, function (err) {
            cb(!err);
          });
        };

        BaseFileSystem.prototype.existsSync = function existsSync(p) {
          try {
            this.statSync(p, true);
            return true;
          } catch (e) {
            return false;
          }
        };

        BaseFileSystem.prototype.realpath = function realpath(p, cache, cb) {
          if (this.supportsLinks()) {
            // The path could contain symlinks. Split up the path,
            // resolve any symlinks, return the resolved string.
            var splitPath = p.split(path.sep); // TODO: Simpler to just pass through file, find sep and such.

            for (var i = 0; i < splitPath.length; i++) {
              var addPaths = splitPath.slice(0, i + 1);
              splitPath[i] = path.join.apply(null, addPaths);
            }
          } else {
            // No symlinks. We just need to verify that it exists.
            this.exists(p, function (doesExist) {
              if (doesExist) {
                cb(null, p);
              } else {
                cb(ApiError.ENOENT(p));
              }
            });
          }
        };

        BaseFileSystem.prototype.realpathSync = function realpathSync(p, cache) {
          if (this.supportsLinks()) {
            // The path could contain symlinks. Split up the path,
            // resolve any symlinks, return the resolved string.
            var splitPath = p.split(path.sep); // TODO: Simpler to just pass through file, find sep and such.

            for (var i = 0; i < splitPath.length; i++) {
              var addPaths = splitPath.slice(0, i + 1);
              splitPath[i] = path.join.apply(path, addPaths);
            }

            return splitPath.join(path.sep);
          } else {
            // No symlinks. We just need to verify that it exists.
            if (this.existsSync(p)) {
              return p;
            } else {
              throw ApiError.ENOENT(p);
            }
          }
        };

        BaseFileSystem.prototype.truncate = function truncate(p, len, cb) {
          this.open(p, FileFlag.getFileFlag('r+'), 0x1a4, function (er, fd) {
            if (er) {
              return cb(er);
            }

            fd.truncate(len, function (er) {
              fd.close(function (er2) {
                cb(er || er2);
              });
            });
          });
        };

        BaseFileSystem.prototype.truncateSync = function truncateSync(p, len) {
          var fd = this.openSync(p, FileFlag.getFileFlag('r+'), 0x1a4); // Need to safely close FD, regardless of whether or not truncate succeeds.

          try {
            fd.truncateSync(len);
          } catch (e) {
            throw e;
          } finally {
            fd.closeSync();
          }
        };

        BaseFileSystem.prototype.readFile = function readFile(fname, encoding, flag, cb) {
          // Wrap cb in file closing code.
          var oldCb = cb; // Get file.

          this.open(fname, flag, 0x1a4, function (err, fd) {
            if (err) {
              return cb(err);
            }

            cb = function (err, arg) {
              fd.close(function (err2) {
                if (!err) {
                  err = err2;
                }

                return oldCb(err, arg);
              });
            };

            fd.stat(function (err, stat) {
              if (err) {
                return cb(err);
              } // Allocate buffer.


              var buf = Buffer.alloc(stat.size);
              fd.read(buf, 0, stat.size, 0, function (err) {
                if (err) {
                  return cb(err);
                } else if (encoding === null) {
                  return cb(err, buf);
                }

                try {
                  cb(null, buf.toString(encoding));
                } catch (e) {
                  cb(e);
                }
              });
            });
          });
        };

        BaseFileSystem.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
          // Get file.
          var fd = this.openSync(fname, flag, 0x1a4);

          try {
            var stat = fd.statSync(); // Allocate buffer.

            var buf = Buffer.alloc(stat.size);
            fd.readSync(buf, 0, stat.size, 0);
            fd.closeSync();

            if (encoding === null) {
              return buf;
            }

            return buf.toString(encoding);
          } finally {
            fd.closeSync();
          }
        };

        BaseFileSystem.prototype.writeFile = function writeFile(fname, data, encoding, flag, mode, cb) {
          // Wrap cb in file closing code.
          var oldCb = cb; // Get file.

          this.open(fname, flag, 0x1a4, function (err, fd) {
            if (err) {
              return cb(err);
            }

            cb = function (err) {
              fd.close(function (err2) {
                oldCb(err ? err : err2);
              });
            };

            try {
              if (typeof data === 'string') {
                data = Buffer.from(data, encoding);
              }
            } catch (e) {
              return cb(e);
            } // Write into file.


            fd.write(data, 0, data.length, 0, cb);
          });
        };

        BaseFileSystem.prototype.writeFileSync = function writeFileSync(fname, data, encoding, flag, mode) {
          // Get file.
          var fd = this.openSync(fname, flag, mode);

          try {
            if (typeof data === 'string') {
              data = Buffer.from(data, encoding);
            } // Write into file.


            fd.writeSync(data, 0, data.length, 0);
          } finally {
            fd.closeSync();
          }
        };

        BaseFileSystem.prototype.appendFile = function appendFile(fname, data, encoding, flag, mode, cb) {
          // Wrap cb in file closing code.
          var oldCb = cb;
          this.open(fname, flag, mode, function (err, fd) {
            if (err) {
              return cb(err);
            }

            cb = function (err) {
              fd.close(function (err2) {
                oldCb(err ? err : err2);
              });
            };

            if (typeof data === 'string') {
              data = Buffer.from(data, encoding);
            }

            fd.write(data, 0, data.length, null, cb);
          });
        };

        BaseFileSystem.prototype.appendFileSync = function appendFileSync(fname, data, encoding, flag, mode) {
          var fd = this.openSync(fname, flag, mode);

          try {
            if (typeof data === 'string') {
              data = Buffer.from(data, encoding);
            }

            fd.writeSync(data, 0, data.length, null);
          } finally {
            fd.closeSync();
          }
        };

        BaseFileSystem.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.utimes = function utimes(p, atime, mtime, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.utimesSync = function utimesSync(p, atime, mtime) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.link = function link(srcpath, dstpath, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.linkSync = function linkSync(srcpath, dstpath) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.readlink = function readlink(p, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.readlinkSync = function readlinkSync(p) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * Implements the asynchronous API in terms of the synchronous API.
         * @class SynchronousFileSystem
         */


        var SynchronousFileSystem = function (BaseFileSystem) {
          function SynchronousFileSystem() {
            BaseFileSystem.apply(this, arguments);
          }

          if (BaseFileSystem) SynchronousFileSystem.__proto__ = BaseFileSystem;
          SynchronousFileSystem.prototype = Object.create(BaseFileSystem && BaseFileSystem.prototype);
          SynchronousFileSystem.prototype.constructor = SynchronousFileSystem;

          SynchronousFileSystem.prototype.supportsSynch = function supportsSynch() {
            return true;
          };

          SynchronousFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
            try {
              this.renameSync(oldPath, newPath);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.stat = function stat(p, isLstat, cb) {
            try {
              cb(null, this.statSync(p, isLstat));
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.open = function open(p, flags, mode, cb) {
            try {
              cb(null, this.openSync(p, flags, mode));
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.unlink = function unlink(p, cb) {
            try {
              this.unlinkSync(p);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.rmdir = function rmdir(p, cb) {
            try {
              this.rmdirSync(p);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.mkdir = function mkdir(p, mode, cb) {
            try {
              this.mkdirSync(p, mode);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.readdir = function readdir(p, cb) {
            try {
              cb(null, this.readdirSync(p));
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
            try {
              this.chmodSync(p, isLchmod, mode);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
            try {
              this.chownSync(p, isLchown, uid, gid);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.utimes = function utimes(p, atime, mtime, cb) {
            try {
              this.utimesSync(p, atime, mtime);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.link = function link(srcpath, dstpath, cb) {
            try {
              this.linkSync(srcpath, dstpath);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
            try {
              this.symlinkSync(srcpath, dstpath, type);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.readlink = function readlink(p, cb) {
            try {
              cb(null, this.readlinkSync(p));
            } catch (e) {
              cb(e);
            }
          };

          return SynchronousFileSystem;
        }(BaseFileSystem);
        /**
         * Base class that contains shared implementations of functions for the file
         * object.
         */


        var BaseFile = function BaseFile() {};

        BaseFile.prototype.sync = function sync(cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFile.prototype.syncSync = function syncSync() {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFile.prototype.datasync = function datasync(cb) {
          this.sync(cb);
        };

        BaseFile.prototype.datasyncSync = function datasyncSync() {
          return this.syncSync();
        };

        BaseFile.prototype.chown = function chown(uid, gid, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFile.prototype.chownSync = function chownSync(uid, gid) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFile.prototype.chmod = function chmod(mode, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFile.prototype.chmodSync = function chmodSync(mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFile.prototype.utimes = function utimes(atime, mtime, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFile.prototype.utimesSync = function utimesSync(atime, mtime) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * An implementation of the File interface that operates on a file that is
         * completely in-memory. PreloadFiles are backed by a Buffer.
         *
         * This is also an abstract class, as it lacks an implementation of 'sync' and
         * 'close'. Each filesystem that wishes to use this file representation must
         * extend this class and implement those two methods.
         * @todo 'close' lever that disables functionality once closed.
         */


        var PreloadFile = function (BaseFile$$1) {
          function PreloadFile(_fs, _path, _flag, _stat, contents) {
            BaseFile$$1.call(this);
            this._pos = 0;
            this._dirty = false;
            this._fs = _fs;
            this._path = _path;
            this._flag = _flag;
            this._stat = _stat;

            if (contents) {
              this._buffer = contents;
            } else {
              // Empty buffer. It'll expand once we write stuff to it.
              this._buffer = emptyBuffer();
            } // Note: This invariant is *not* maintained once the file starts getting
            // modified.
            // Note: Only actually matters if file is readable, as writeable modes may
            // truncate/append to file.


            if (this._stat.size !== this._buffer.length && this._flag.isReadable()) {
              throw new Error("Invalid buffer: Buffer is " + this._buffer.length + " long, yet Stats object specifies that file is " + this._stat.size + " long.");
            }
          }

          if (BaseFile$$1) PreloadFile.__proto__ = BaseFile$$1;
          PreloadFile.prototype = Object.create(BaseFile$$1 && BaseFile$$1.prototype);
          PreloadFile.prototype.constructor = PreloadFile;
          /**
           * NONSTANDARD: Get the underlying buffer for this file. !!DO NOT MUTATE!! Will mess up dirty tracking.
           */

          PreloadFile.prototype.getBuffer = function getBuffer() {
            return this._buffer;
          };
          /**
           * NONSTANDARD: Get underlying stats for this file. !!DO NOT MUTATE!!
           */


          PreloadFile.prototype.getStats = function getStats() {
            return this._stat;
          };

          PreloadFile.prototype.getFlag = function getFlag() {
            return this._flag;
          };
          /**
           * Get the path to this file.
           * @return [String] The path to the file.
           */


          PreloadFile.prototype.getPath = function getPath() {
            return this._path;
          };
          /**
           * Get the current file position.
           *
           * We emulate the following bug mentioned in the Node documentation:
           * > On Linux, positional writes don't work when the file is opened in append
           *   mode. The kernel ignores the position argument and always appends the data
           *   to the end of the file.
           * @return [Number] The current file position.
           */


          PreloadFile.prototype.getPos = function getPos() {
            if (this._flag.isAppendable()) {
              return this._stat.size;
            }

            return this._pos;
          };
          /**
           * Advance the current file position by the indicated number of positions.
           * @param [Number] delta
           */


          PreloadFile.prototype.advancePos = function advancePos(delta) {
            return this._pos += delta;
          };
          /**
           * Set the file position.
           * @param [Number] newPos
           */


          PreloadFile.prototype.setPos = function setPos(newPos) {
            return this._pos = newPos;
          };
          /**
           * **Core**: Asynchronous sync. Must be implemented by subclasses of this
           * class.
           * @param [Function(BrowserFS.ApiError)] cb
           */


          PreloadFile.prototype.sync = function sync(cb) {
            try {
              this.syncSync();
              cb();
            } catch (e) {
              cb(e);
            }
          };
          /**
           * **Core**: Synchronous sync.
           */


          PreloadFile.prototype.syncSync = function syncSync() {
            throw new ApiError(ErrorCode.ENOTSUP);
          };
          /**
           * **Core**: Asynchronous close. Must be implemented by subclasses of this
           * class.
           * @param [Function(BrowserFS.ApiError)] cb
           */


          PreloadFile.prototype.close = function close(cb) {
            try {
              this.closeSync();
              cb();
            } catch (e) {
              cb(e);
            }
          };
          /**
           * **Core**: Synchronous close.
           */


          PreloadFile.prototype.closeSync = function closeSync() {
            throw new ApiError(ErrorCode.ENOTSUP);
          };
          /**
           * Asynchronous `stat`.
           * @param [Function(BrowserFS.ApiError, BrowserFS.node.fs.Stats)] cb
           */


          PreloadFile.prototype.stat = function stat(cb) {
            try {
              cb(null, this._stat.clone());
            } catch (e) {
              cb(e);
            }
          };
          /**
           * Synchronous `stat`.
           */


          PreloadFile.prototype.statSync = function statSync() {
            return this._stat.clone();
          };
          /**
           * Asynchronous truncate.
           * @param [Number] len
           * @param [Function(BrowserFS.ApiError)] cb
           */


          PreloadFile.prototype.truncate = function truncate(len, cb) {
            try {
              this.truncateSync(len);

              if (this._flag.isSynchronous() && !_fsMock.getRootFS().supportsSynch()) {
                this.sync(cb);
              }

              cb();
            } catch (e) {
              return cb(e);
            }
          };
          /**
           * Synchronous truncate.
           * @param [Number] len
           */


          PreloadFile.prototype.truncateSync = function truncateSync(len) {
            this._dirty = true;

            if (!this._flag.isWriteable()) {
              throw new ApiError(ErrorCode.EPERM, 'File not opened with a writeable mode.');
            }

            this._stat.mtime = new Date();

            if (len > this._buffer.length) {
              var buf = Buffer.alloc(len - this._buffer.length, 0); // Write will set @_stat.size for us.

              this.writeSync(buf, 0, buf.length, this._buffer.length);

              if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
                this.syncSync();
              }

              return;
            }

            this._stat.size = len; // Truncate buffer to 'len'.

            var newBuff = Buffer.alloc(len);

            this._buffer.copy(newBuff, 0, 0, len);

            this._buffer = newBuff;

            if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
              this.syncSync();
            }
          };
          /**
           * Write buffer to the file.
           * Note that it is unsafe to use fs.write multiple times on the same file
           * without waiting for the callback.
           * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
           *  the file.
           * @param [Number] offset Offset in the buffer to start reading data from.
           * @param [Number] length The amount of bytes to write to the file.
           * @param [Number] position Offset from the beginning of the file where this
           *   data should be written. If position is null, the data will be written at
           *   the current position.
           * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)]
           *   cb The number specifies the number of bytes written into the file.
           */


          PreloadFile.prototype.write = function write(buffer$$1, offset, length, position, cb) {
            try {
              cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
            } catch (e) {
              cb(e);
            }
          };
          /**
           * Write buffer to the file.
           * Note that it is unsafe to use fs.writeSync multiple times on the same file
           * without waiting for the callback.
           * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
           *  the file.
           * @param [Number] offset Offset in the buffer to start reading data from.
           * @param [Number] length The amount of bytes to write to the file.
           * @param [Number] position Offset from the beginning of the file where this
           *   data should be written. If position is null, the data will be written at
           *   the current position.
           * @return [Number]
           */


          PreloadFile.prototype.writeSync = function writeSync(buffer$$1, offset, length, position) {
            this._dirty = true;

            if (position === undefined || position === null) {
              position = this.getPos();
            }

            if (!this._flag.isWriteable()) {
              throw new ApiError(ErrorCode.EPERM, 'File not opened with a writeable mode.');
            }

            var endFp = position + length;

            if (endFp > this._stat.size) {
              this._stat.size = endFp;

              if (endFp > this._buffer.length) {
                // Extend the buffer!
                var newBuff = Buffer.alloc(endFp);

                this._buffer.copy(newBuff);

                this._buffer = newBuff;
              }
            }

            var len = buffer$$1.copy(this._buffer, position, offset, offset + length);
            this._stat.mtime = new Date();

            if (this._flag.isSynchronous()) {
              this.syncSync();
              return len;
            }

            this.setPos(position + len);
            return len;
          };
          /**
           * Read data from the file.
           * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
           *   written to.
           * @param [Number] offset The offset within the buffer where writing will
           *   start.
           * @param [Number] length An integer specifying the number of bytes to read.
           * @param [Number] position An integer specifying where to begin reading from
           *   in the file. If position is null, data will be read from the current file
           *   position.
           * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)] cb The
           *   number is the number of bytes read
           */


          PreloadFile.prototype.read = function read(buffer$$1, offset, length, position, cb) {
            try {
              cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
            } catch (e) {
              cb(e);
            }
          };
          /**
           * Read data from the file.
           * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
           *   written to.
           * @param [Number] offset The offset within the buffer where writing will
           *   start.
           * @param [Number] length An integer specifying the number of bytes to read.
           * @param [Number] position An integer specifying where to begin reading from
           *   in the file. If position is null, data will be read from the current file
           *   position.
           * @return [Number]
           */


          PreloadFile.prototype.readSync = function readSync(buffer$$1, offset, length, position) {
            if (!this._flag.isReadable()) {
              throw new ApiError(ErrorCode.EPERM, 'File not opened with a readable mode.');
            }

            if (position === undefined || position === null) {
              position = this.getPos();
            }

            var endRead = position + length;

            if (endRead > this._stat.size) {
              length = this._stat.size - position;
            }

            var rv = this._buffer.copy(buffer$$1, offset, position, position + length);

            this._stat.atime = new Date();
            this._pos = position + length;
            return rv;
          };
          /**
           * Asynchronous `fchmod`.
           * @param [Number|String] mode
           * @param [Function(BrowserFS.ApiError)] cb
           */


          PreloadFile.prototype.chmod = function chmod(mode, cb) {
            try {
              this.chmodSync(mode);
              cb();
            } catch (e) {
              cb(e);
            }
          };
          /**
           * Asynchronous `fchmod`.
           * @param [Number] mode
           */


          PreloadFile.prototype.chmodSync = function chmodSync(mode) {
            if (!this._fs.supportsProps()) {
              throw new ApiError(ErrorCode.ENOTSUP);
            }

            this._dirty = true;

            this._stat.chmod(mode);

            this.syncSync();
          };

          PreloadFile.prototype.isDirty = function isDirty() {
            return this._dirty;
          };
          /**
           * Resets the dirty bit. Should only be called after a sync has completed successfully.
           */


          PreloadFile.prototype.resetDirty = function resetDirty() {
            this._dirty = false;
          };

          return PreloadFile;
        }(BaseFile);
        /**
         * File class for the InMemory and XHR file systems.
         * Doesn't sync to anything, so it works nicely for memory-only files.
         */


        var NoSyncFile = function (PreloadFile) {
          function NoSyncFile(_fs, _path, _flag, _stat, contents) {
            PreloadFile.call(this, _fs, _path, _flag, _stat, contents);
          }

          if (PreloadFile) NoSyncFile.__proto__ = PreloadFile;
          NoSyncFile.prototype = Object.create(PreloadFile && PreloadFile.prototype);
          NoSyncFile.prototype.constructor = NoSyncFile;
          /**
           * Asynchronous sync. Doesn't do anything, simply calls the cb.
           * @param [Function(BrowserFS.ApiError)] cb
           */

          NoSyncFile.prototype.sync = function sync(cb) {
            cb();
          };
          /**
           * Synchronous sync. Doesn't do anything.
           */


          NoSyncFile.prototype.syncSync = function syncSync() {// NOP.
          };
          /**
           * Asynchronous close. Doesn't do anything, simply calls the cb.
           * @param [Function(BrowserFS.ApiError)] cb
           */


          NoSyncFile.prototype.close = function close(cb) {
            cb();
          };
          /**
           * Synchronous close. Doesn't do anything.
           */


          NoSyncFile.prototype.closeSync = function closeSync() {// NOP.
          };

          return NoSyncFile;
        }(PreloadFile);
        /**
         * We define our own file to interpose on syncSync() for mirroring purposes.
         */


        var MirrorFile = function (PreloadFile$$1) {
          function MirrorFile(fs, path$$1, flag, stat, data) {
            PreloadFile$$1.call(this, fs, path$$1, flag, stat, data);
          }

          if (PreloadFile$$1) MirrorFile.__proto__ = PreloadFile$$1;
          MirrorFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          MirrorFile.prototype.constructor = MirrorFile;

          MirrorFile.prototype.syncSync = function syncSync() {
            if (this.isDirty()) {
              this._fs._syncSync(this);

              this.resetDirty();
            }
          };

          MirrorFile.prototype.closeSync = function closeSync() {
            this.syncSync();
          };

          return MirrorFile;
        }(PreloadFile);
        /**
         * AsyncMirrorFS mirrors a synchronous filesystem into an asynchronous filesystem
         * by:
         *
         * * Performing operations over the in-memory copy, while asynchronously pipelining them
         *   to the backing store.
         * * During application loading, the contents of the async file system can be reloaded into
         *   the synchronous store, if desired.
         *
         * The two stores will be kept in sync. The most common use-case is to pair a synchronous
         * in-memory filesystem with an asynchronous backing store.
         *
         * Example: Mirroring an IndexedDB file system to an in memory file system. Now, you can use
         * IndexedDB synchronously.
         *
         * ```javascript
         * BrowserFS.configure({
         *   fs: "AsyncMirror",
         *   options: {
         *     sync: { fs: "InMemory" },
         *     async: { fs: "IndexedDB" }
         *   }
         * }, function(e) {
         *   // BrowserFS is initialized and ready-to-use!
         * });
         * ```
         *
         * Or, alternatively:
         *
         * ```javascript
         * BrowserFS.FileSystem.IndexedDB.Create(function(e, idbfs) {
         *   BrowserFS.FileSystem.InMemory.Create(function(e, inMemory) {
         *     BrowserFS.FileSystem.AsyncMirror({
         *       sync: inMemory, async: idbfs
         *     }, function(e, mirrored) {
         *       BrowserFS.initialize(mirrored);
         *     });
         *   });
         * });
         * ```
         */


        var AsyncMirror = function (SynchronousFileSystem$$1) {
          function AsyncMirror(sync, async, deprecateMsg) {
            if (deprecateMsg === void 0) deprecateMsg = true;
            SynchronousFileSystem$$1.call(this);
            /**
             * Queue of pending asynchronous operations.
             */

            this._queue = [];
            this._queueRunning = false;
            this._isInitialized = false;
            this._initializeCallbacks = [];
            this._sync = sync;
            this._async = async;

            if (!sync.supportsSynch()) {
              throw new Error("The first argument to AsyncMirror needs to be a synchronous file system.");
            }

            deprecationMessage(deprecateMsg, AsyncMirror.Name, {
              sync: "sync file system instance",
              async: "async file system instance"
            });
          }

          if (SynchronousFileSystem$$1) AsyncMirror.__proto__ = SynchronousFileSystem$$1;
          AsyncMirror.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
          AsyncMirror.prototype.constructor = AsyncMirror;
          /**
           * Constructs and initializes an AsyncMirror file system with the given options.
           */

          AsyncMirror.Create = function Create(opts, cb) {
            try {
              var fs = new AsyncMirror(opts.sync, opts.async, false);
              fs.initialize(function (e) {
                if (e) {
                  cb(e);
                } else {
                  cb(null, fs);
                }
              }, false);
            } catch (e) {
              cb(e);
            }
          };

          AsyncMirror.isAvailable = function isAvailable() {
            return true;
          };

          AsyncMirror.prototype.getName = function getName() {
            return AsyncMirror.Name;
          };

          AsyncMirror.prototype._syncSync = function _syncSync(fd) {
            this._sync.writeFileSync(fd.getPath(), fd.getBuffer(), null, FileFlag.getFileFlag('w'), fd.getStats().mode);

            this.enqueueOp({
              apiMethod: 'writeFile',
              arguments: [fd.getPath(), fd.getBuffer(), null, fd.getFlag(), fd.getStats().mode]
            });
          };
          /**
           * Called once to load up files from async storage into sync storage.
           */


          AsyncMirror.prototype.initialize = function initialize(userCb, deprecateMsg) {
            var this$1 = this;
            if (deprecateMsg === void 0) deprecateMsg = true;

            if (deprecateMsg) {
              console.warn("[AsyncMirror] AsyncMirror.initialize() is deprecated and will be removed in the next major version. Please use 'AsyncMirror.Create({ sync: (sync file system instance), async: (async file system instance)}, cb)' to create and initialize AsyncMirror instances.");
            }

            var callbacks = this._initializeCallbacks;

            var end = function (e) {
              this$1._isInitialized = !e;
              this$1._initializeCallbacks = [];
              callbacks.forEach(function (cb) {
                return cb(e);
              });
            };

            if (!this._isInitialized) {
              // First call triggers initialization, the rest wait.
              if (callbacks.push(userCb) === 1) {
                var copyDirectory = function (p, mode, cb) {
                  if (p !== '/') {
                    this$1._sync.mkdirSync(p, mode);
                  }

                  this$1._async.readdir(p, function (err, files) {
                    var i = 0; // NOTE: This function must not be in a lexically nested statement,
                    // such as an if or while statement. Safari refuses to run the
                    // script since it is undefined behavior.

                    function copyNextFile(err) {
                      if (err) {
                        cb(err);
                      } else if (i < files.length) {
                        copyItem(path.join(p, files[i]), copyNextFile);
                        i++;
                      } else {
                        cb();
                      }
                    }

                    if (err) {
                      cb(err);
                    } else {
                      copyNextFile();
                    }
                  });
                },
                    copyFile = function (p, mode, cb) {
                  this$1._async.readFile(p, null, FileFlag.getFileFlag('r'), function (err, data) {
                    if (err) {
                      cb(err);
                    } else {
                      try {
                        this$1._sync.writeFileSync(p, data, null, FileFlag.getFileFlag('w'), mode);
                      } catch (e) {
                        err = e;
                      } finally {
                        cb(err);
                      }
                    }
                  });
                },
                    copyItem = function (p, cb) {
                  this$1._async.stat(p, false, function (err, stats) {
                    if (err) {
                      cb(err);
                    } else if (stats.isDirectory()) {
                      copyDirectory(p, stats.mode, cb);
                    } else {
                      copyFile(p, stats.mode, cb);
                    }
                  });
                };

                copyDirectory('/', 0, end);
              }
            } else {
              userCb();
            }
          };

          AsyncMirror.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          AsyncMirror.prototype.supportsSynch = function supportsSynch() {
            return true;
          };

          AsyncMirror.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          AsyncMirror.prototype.supportsProps = function supportsProps() {
            return this._sync.supportsProps() && this._async.supportsProps();
          };

          AsyncMirror.prototype.renameSync = function renameSync(oldPath, newPath) {
            this.checkInitialized();

            this._sync.renameSync(oldPath, newPath);

            this.enqueueOp({
              apiMethod: 'rename',
              arguments: [oldPath, newPath]
            });
          };

          AsyncMirror.prototype.statSync = function statSync(p, isLstat) {
            this.checkInitialized();
            return this._sync.statSync(p, isLstat);
          };

          AsyncMirror.prototype.openSync = function openSync(p, flag, mode) {
            this.checkInitialized(); // Sanity check: Is this open/close permitted?

            var fd = this._sync.openSync(p, flag, mode);

            fd.closeSync();
            return new MirrorFile(this, p, flag, this._sync.statSync(p, false), this._sync.readFileSync(p, null, FileFlag.getFileFlag('r')));
          };

          AsyncMirror.prototype.unlinkSync = function unlinkSync(p) {
            this.checkInitialized();

            this._sync.unlinkSync(p);

            this.enqueueOp({
              apiMethod: 'unlink',
              arguments: [p]
            });
          };

          AsyncMirror.prototype.rmdirSync = function rmdirSync(p) {
            this.checkInitialized();

            this._sync.rmdirSync(p);

            this.enqueueOp({
              apiMethod: 'rmdir',
              arguments: [p]
            });
          };

          AsyncMirror.prototype.mkdirSync = function mkdirSync(p, mode) {
            this.checkInitialized();

            this._sync.mkdirSync(p, mode);

            this.enqueueOp({
              apiMethod: 'mkdir',
              arguments: [p, mode]
            });
          };

          AsyncMirror.prototype.readdirSync = function readdirSync(p) {
            this.checkInitialized();
            return this._sync.readdirSync(p);
          };

          AsyncMirror.prototype.existsSync = function existsSync(p) {
            this.checkInitialized();
            return this._sync.existsSync(p);
          };

          AsyncMirror.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
            this.checkInitialized();

            this._sync.chmodSync(p, isLchmod, mode);

            this.enqueueOp({
              apiMethod: 'chmod',
              arguments: [p, isLchmod, mode]
            });
          };

          AsyncMirror.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
            this.checkInitialized();

            this._sync.chownSync(p, isLchown, uid, gid);

            this.enqueueOp({
              apiMethod: 'chown',
              arguments: [p, isLchown, uid, gid]
            });
          };

          AsyncMirror.prototype.utimesSync = function utimesSync(p, atime, mtime) {
            this.checkInitialized();

            this._sync.utimesSync(p, atime, mtime);

            this.enqueueOp({
              apiMethod: 'utimes',
              arguments: [p, atime, mtime]
            });
          };

          AsyncMirror.prototype.checkInitialized = function checkInitialized() {
            if (!this._isInitialized) {
              throw new ApiError(ErrorCode.EPERM, "AsyncMirrorFS is not initialized. Please initialize AsyncMirrorFS using its initialize() method before using it.");
            }
          };

          AsyncMirror.prototype.enqueueOp = function enqueueOp(op) {
            var this$1 = this;

            this._queue.push(op);

            if (!this._queueRunning) {
              this._queueRunning = true;

              var doNextOp = function (err) {
                if (err) {
                  console.error("WARNING: File system has desynchronized. Received following error: " + err + "\n$");
                }

                if (this$1._queue.length > 0) {
                  var op = this$1._queue.shift(),
                      args = op.arguments;

                  args.push(doNextOp);

                  this$1._async[op.apiMethod].apply(this$1._async, args);
                } else {
                  this$1._queueRunning = false;
                }
              };

              doNextOp();
            }
          };

          return AsyncMirror;
        }(SynchronousFileSystem);

        AsyncMirror.Name = "AsyncMirror";
        AsyncMirror.Options = {
          sync: {
            type: "object",
            description: "The synchronous file system to mirror the asynchronous file system to."
          },
          async: {
            type: "object",
            description: "The asynchronous file system to mirror."
          }
        };
        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */

        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);

            case 1:
              return func.call(thisArg, args[0]);

            case 2:
              return func.call(thisArg, args[0], args[1]);

            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }

          return func.apply(thisArg, args);
        }
        /* Built-in method references for those with the same name as other `lodash` methods. */


        var nativeMax = Math.max;
        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */

        function overRest$1(func, start, transform) {
          start = nativeMax(start === undefined ? func.length - 1 : start, 0);
          return function () {
            var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length);

            while (++index < length) {
              array[index] = args[start + index];
            }

            index = -1;
            var otherArgs = Array(start + 1);

            while (++index < start) {
              otherArgs[index] = args[index];
            }

            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }
        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */


        function identity(value) {
          return value;
        } // Lodash rest function without function.toString()
        // remappings


        function rest(func, start) {
          return overRest$1(func, start, identity);
        }

        var initialParams = function (fn) {
          return rest(function (args
          /*..., callback*/
          ) {
            var callback = args.pop();
            fn.call(this, args, callback);
          });
        };

        function applyEach$1(eachfn) {
          return rest(function (fns, args) {
            var go = initialParams(function (args, callback) {
              var that = this;
              return eachfn(fns, function (fn, cb) {
                fn.apply(that, args.concat(cb));
              }, callback);
            });

            if (args.length) {
              return go.apply(this, args);
            } else {
              return go;
            }
          });
        }
        /** Detect free variable `global` from Node.js. */


        var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
        /** Detect free variable `self`. */

        var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
        /** Used as a reference to the global object. */

        var root = freeGlobal || freeSelf || Function('return this')();
        /** Built-in value references. */

        var Symbol$1 = root.Symbol;
        /** Used for built-in method references. */

        var objectProto = Object.prototype;
        /** Used to check objects for own properties. */

        var hasOwnProperty = objectProto.hasOwnProperty;
        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */

        var nativeObjectToString = objectProto.toString;
        /** Built-in value references. */

        var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;
        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */

        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag$1),
              tag = value[symToStringTag$1];

          try {
            value[symToStringTag$1] = undefined;
            var unmasked = true;
          } catch (e) {}

          var result = nativeObjectToString.call(value);

          if (unmasked) {
            if (isOwn) {
              value[symToStringTag$1] = tag;
            } else {
              delete value[symToStringTag$1];
            }
          }

          return result;
        }
        /** Used for built-in method references. */


        var objectProto$1 = Object.prototype;
        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */

        var nativeObjectToString$1 = objectProto$1.toString;
        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */

        function objectToString(value) {
          return nativeObjectToString$1.call(value);
        }
        /** `Object#toString` result references. */


        var nullTag = '[object Null]';
        var undefinedTag = '[object Undefined]';
        /** Built-in value references. */

        var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */

        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }

          return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */


        function isObject(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }
        /** `Object#toString` result references. */


        var asyncTag = '[object AsyncFunction]';
        var funcTag = '[object Function]';
        var genTag = '[object GeneratorFunction]';
        var proxyTag = '[object Proxy]';
        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */

        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          } // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.


          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        /** Used as references for various `Number` constants. */


        var MAX_SAFE_INTEGER = 9007199254740991;
        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */

        function isLength(value) {
          return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */


        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        } // A temporary value used to identify if the loop should be broken.
        // See #1064, #1293


        var breakLoop = {};
        /**
         * This method returns `undefined`.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Util
         * @example
         *
         * _.times(2, _.noop);
         * // => [undefined, undefined]
         */

        function noop() {// No operation performed.
        }

        function once(fn) {
          return function () {
            if (fn === null) {
              return;
            }

            var callFn = fn;
            fn = null;
            callFn.apply(this, arguments);
          };
        }

        var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

        var getIterator = function (coll) {
          return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
        };
        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */


        function baseTimes(n, iteratee) {
          var index = -1,
              result = Array(n);

          while (++index < n) {
            result[index] = iteratee(index);
          }

          return result;
        }
        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */


        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }
        /** `Object#toString` result references. */


        var argsTag = '[object Arguments]';
        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */

        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        /** Used for built-in method references. */


        var objectProto$3 = Object.prototype;
        /** Used to check objects for own properties. */

        var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
        /** Built-in value references. */

        var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */

        var isArguments = baseIsArguments(function () {
          return arguments;
        }()) ? baseIsArguments : function (value) {
          return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
        };
        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */

        var isArray = Array.isArray;
        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */

        function stubFalse() {
          return false;
        }
        /** Detect free variable `exports`. */


        var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */

        var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */

        var moduleExports = freeModule && freeModule.exports === freeExports;
        /** Built-in value references. */

        var Buffer$1 = moduleExports ? root.Buffer : undefined;
        /* Built-in method references for those with the same name as other `lodash` methods. */

        var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;
        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */

        var isBuffer = nativeIsBuffer || stubFalse;
        /** Used as references for various `Number` constants. */

        var MAX_SAFE_INTEGER$1 = 9007199254740991;
        /** Used to detect unsigned integer values. */

        var reIsUint = /^(?:0|[1-9]\d*)$/;
        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */

        function isIndex(value, length) {
          length = length == null ? MAX_SAFE_INTEGER$1 : length;
          return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        /** `Object#toString` result references. */


        var argsTag$1 = '[object Arguments]';
        var arrayTag = '[object Array]';
        var boolTag = '[object Boolean]';
        var dateTag = '[object Date]';
        var errorTag = '[object Error]';
        var funcTag$1 = '[object Function]';
        var mapTag = '[object Map]';
        var numberTag = '[object Number]';
        var objectTag = '[object Object]';
        var regexpTag = '[object RegExp]';
        var setTag = '[object Set]';
        var stringTag = '[object String]';
        var weakMapTag = '[object WeakMap]';
        var arrayBufferTag = '[object ArrayBuffer]';
        var dataViewTag = '[object DataView]';
        var float32Tag = '[object Float32Array]';
        var float64Tag = '[object Float64Array]';
        var int8Tag = '[object Int8Array]';
        var int16Tag = '[object Int16Array]';
        var int32Tag = '[object Int32Array]';
        var uint8Tag = '[object Uint8Array]';
        var uint8ClampedTag = '[object Uint8ClampedArray]';
        var uint16Tag = '[object Uint16Array]';
        var uint32Tag = '[object Uint32Array]';
        /** Used to identify `toStringTag` values of typed arrays. */

        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */

        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */


        function baseUnary(func) {
          return function (value) {
            return func(value);
          };
        }
        /** Detect free variable `exports`. */


        var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */

        var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */

        var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
        /** Detect free variable `process` from Node.js. */

        var freeProcess = moduleExports$1 && freeGlobal.process;
        /** Used to access faster Node.js helpers. */

        var nodeUtil = function () {
          try {
            return freeProcess && freeProcess.binding && freeProcess.binding('util');
          } catch (e) {}
        }();
        /* Node.js helper references. */


        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */

        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        /** Used for built-in method references. */

        var objectProto$2 = Object.prototype;
        /** Used to check objects for own properties. */

        var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */

        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length;

          for (var key in value) {
            if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
            key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
            isIndex(key, length)))) {
              result.push(key);
            }
          }

          return result;
        }
        /** Used for built-in method references. */


        var objectProto$5 = Object.prototype;
        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */

        function isPrototype(value) {
          var Ctor = value && value.constructor,
              proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$5;
          return value === proto;
        }
        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */


        function overArg(func, transform) {
          return function (arg) {
            return func(transform(arg));
          };
        }
        /* Built-in method references for those with the same name as other `lodash` methods. */


        var nativeKeys = overArg(Object.keys, Object);
        /** Used for built-in method references. */

        var objectProto$4 = Object.prototype;
        /** Used to check objects for own properties. */

        var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */

        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }

          var result = [];

          for (var key in Object(object)) {
            if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
              result.push(key);
            }
          }

          return result;
        }
        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */


        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        function createArrayIterator(coll) {
          var i = -1;
          var len = coll.length;
          return function next() {
            return ++i < len ? {
              value: coll[i],
              key: i
            } : null;
          };
        }

        function createES2015Iterator(iterator) {
          var i = -1;
          return function next() {
            var item = iterator.next();

            if (item.done) {
              return null;
            }

            i++;
            return {
              value: item.value,
              key: i
            };
          };
        }

        function createObjectIterator(obj) {
          var okeys = keys(obj);
          var i = -1;
          var len = okeys.length;
          return function next() {
            var key = okeys[++i];
            return i < len ? {
              value: obj[key],
              key: key
            } : null;
          };
        }

        function iterator(coll) {
          if (isArrayLike(coll)) {
            return createArrayIterator(coll);
          }

          var iterator = getIterator(coll);
          return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
        }

        function onlyOnce(fn) {
          return function () {
            if (fn === null) {
              throw new Error("Callback was already called.");
            }

            var callFn = fn;
            fn = null;
            callFn.apply(this, arguments);
          };
        }

        function _eachOfLimit(limit) {
          return function (obj, iteratee, callback) {
            callback = once(callback || noop);

            if (limit <= 0 || !obj) {
              return callback(null);
            }

            var nextElem = iterator(obj);
            var done = false;
            var running = 0;

            function iterateeCallback(err, value) {
              running -= 1;

              if (err) {
                done = true;
                callback(err);
              } else if (value === breakLoop || done && running <= 0) {
                done = true;
                return callback(null);
              } else {
                replenish();
              }
            }

            function replenish() {
              while (running < limit && !done) {
                var elem = nextElem();

                if (elem === null) {
                  done = true;

                  if (running <= 0) {
                    callback(null);
                  }

                  return;
                }

                running += 1;
                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
              }
            }

            replenish();
          };
        }
        /**
         * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
         * time.
         *
         * @name eachOfLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.eachOf]{@link module:Collections.eachOf}
         * @alias forEachOfLimit
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A function to apply to each
         * item in `coll`. The `key` is the item's key, or index in the case of an
         * array. The iteratee is passed a `callback(err)` which must be called once it
         * has completed. If no error has occurred, the callback should be run without
         * arguments or with an explicit `null` argument. Invoked with
         * (item, key, callback).
         * @param {Function} [callback] - A callback which is called when all
         * `iteratee` functions have finished, or an error occurs. Invoked with (err).
         */


        function eachOfLimit(coll, limit, iteratee, callback) {
          _eachOfLimit(limit)(coll, iteratee, callback);
        }

        function doLimit(fn, limit) {
          return function (iterable, iteratee, callback) {
            return fn(iterable, limit, iteratee, callback);
          };
        } // eachOf implementation optimized for array-likes


        function eachOfArrayLike(coll, iteratee, callback) {
          callback = once(callback || noop);
          var index = 0,
              completed = 0,
              length = coll.length;

          if (length === 0) {
            callback(null);
          }

          function iteratorCallback(err, value) {
            if (err) {
              callback(err);
            } else if (++completed === length || value === breakLoop) {
              callback(null);
            }
          }

          for (; index < length; index++) {
            iteratee(coll[index], index, onlyOnce(iteratorCallback));
          }
        } // a generic version of eachOf which can handle array, object, and iterator cases.


        var eachOfGeneric = doLimit(eachOfLimit, Infinity);
        /**
         * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
         * to the iteratee.
         *
         * @name eachOf
         * @static
         * @memberOf module:Collections
         * @method
         * @alias forEachOf
         * @category Collection
         * @see [async.each]{@link module:Collections.each}
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each
         * item in `coll`. The `key` is the item's key, or index in the case of an
         * array. The iteratee is passed a `callback(err)` which must be called once it
         * has completed. If no error has occurred, the callback should be run without
         * arguments or with an explicit `null` argument. Invoked with
         * (item, key, callback).
         * @param {Function} [callback] - A callback which is called when all
         * `iteratee` functions have finished, or an error occurs. Invoked with (err).
         * @example
         *
         * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
         * var configs = {};
         *
         * async.forEachOf(obj, function (value, key, callback) {
         *     fs.readFile(__dirname + value, "utf8", function (err, data) {
         *         if (err) return callback(err);
         *         try {
         *             configs[key] = JSON.parse(data);
         *         } catch (e) {
         *             return callback(e);
         *         }
         *         callback();
         *     });
         * }, function (err) {
         *     if (err) console.error(err.message);
         *     // configs is now a map of JSON data
         *     doSomethingWith(configs);
         * });
         */

        var eachOf = function (coll, iteratee, callback) {
          var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
          eachOfImplementation(coll, iteratee, callback);
        };

        function doParallel(fn) {
          return function (obj, iteratee, callback) {
            return fn(eachOf, obj, iteratee, callback);
          };
        }

        function _asyncMap(eachfn, arr, iteratee, callback) {
          callback = callback || noop;
          arr = arr || [];
          var results = [];
          var counter = 0;
          eachfn(arr, function (value, _, callback) {
            var index = counter++;
            iteratee(value, function (err, v) {
              results[index] = v;
              callback(err);
            });
          }, function (err) {
            callback(err, results);
          });
        }
        /**
         * Produces a new collection of values by mapping each value in `coll` through
         * the `iteratee` function. The `iteratee` is called with an item from `coll`
         * and a callback for when it has finished processing. Each of these callback
         * takes 2 arguments: an `error`, and the transformed item from `coll`. If
         * `iteratee` passes an error to its callback, the main `callback` (for the
         * `map` function) is immediately called with the error.
         *
         * Note, that since this function applies the `iteratee` to each item in
         * parallel, there is no guarantee that the `iteratee` functions will complete
         * in order. However, the results array will be in the same order as the
         * original `coll`.
         *
         * If `map` is passed an Object, the results will be an Array.  The results
         * will roughly be in the order of the original Objects' keys (but this can
         * vary across JavaScript engines)
         *
         * @name map
         * @static
         * @memberOf module:Collections
         * @method
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, transformed)` which must be called
         * once it has completed with an error (which can be `null`) and a
         * transformed item. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. Results is an Array of the
         * transformed items from the `coll`. Invoked with (err, results).
         * @example
         *
         * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
         *     // results is now an array of stats for each file
         * });
         */


        var map = doParallel(_asyncMap);
        /**
         * Applies the provided arguments to each function in the array, calling
         * `callback` after all functions have completed. If you only provide the first
         * argument, `fns`, then it will return a function which lets you pass in the
         * arguments as if it were a single function call. If more arguments are
         * provided, `callback` is required while `args` is still optional.
         *
         * @name applyEach
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @category Control Flow
         * @param {Array|Iterable|Object} fns - A collection of asynchronous functions
         * to all call with the same arguments
         * @param {...*} [args] - any number of separate arguments to pass to the
         * function.
         * @param {Function} [callback] - the final argument should be the callback,
         * called when all functions have completed processing.
         * @returns {Function} - If only the first argument, `fns`, is provided, it will
         * return a function which lets you pass in the arguments as if it were a single
         * function call. The signature is `(..args, callback)`. If invoked with any
         * arguments, `callback` is required.
         * @example
         *
         * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
         *
         * // partial application example:
         * async.each(
         *     buckets,
         *     async.applyEach([enableSearch, updateSchema]),
         *     callback
         * );
         */

        applyEach$1(map);

        function doParallelLimit(fn) {
          return function (obj, limit, iteratee, callback) {
            return fn(_eachOfLimit(limit), obj, iteratee, callback);
          };
        }
        /**
         * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
         *
         * @name mapLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.map]{@link module:Collections.map}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A function to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, transformed)` which must be called
         * once it has completed with an error (which can be `null`) and a transformed
         * item. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. Results is an array of the
         * transformed items from the `coll`. Invoked with (err, results).
         */


        var mapLimit = doParallelLimit(_asyncMap);
        /**
         * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
         *
         * @name mapSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.map]{@link module:Collections.map}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, transformed)` which must be called
         * once it has completed with an error (which can be `null`) and a
         * transformed item. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. Results is an array of the
         * transformed items from the `coll`. Invoked with (err, results).
         */

        var mapSeries = doLimit(mapLimit, 1);
        /**
         * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
         *
         * @name applyEachSeries
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.applyEach]{@link module:ControlFlow.applyEach}
         * @category Control Flow
         * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all
         * call with the same arguments
         * @param {...*} [args] - any number of separate arguments to pass to the
         * function.
         * @param {Function} [callback] - the final argument should be the callback,
         * called when all functions have completed processing.
         * @returns {Function} - If only the first argument is provided, it will return
         * a function which lets you pass in the arguments as if it were a single
         * function call.
         */

        applyEach$1(mapSeries);
        /**
         * Creates a continuation function with some arguments already applied.
         *
         * Useful as a shorthand when combined with other control flow functions. Any
         * arguments passed to the returned function are added to the arguments
         * originally passed to apply.
         *
         * @name apply
         * @static
         * @memberOf module:Utils
         * @method
         * @category Util
         * @param {Function} function - The function you want to eventually apply all
         * arguments to. Invokes with (arguments...).
         * @param {...*} arguments... - Any number of arguments to automatically apply
         * when the continuation is called.
         * @example
         *
         * // using apply
         * async.parallel([
         *     async.apply(fs.writeFile, 'testfile1', 'test1'),
         *     async.apply(fs.writeFile, 'testfile2', 'test2')
         * ]);
         *
         *
         * // the same process without using apply
         * async.parallel([
         *     function(callback) {
         *         fs.writeFile('testfile1', 'test1', callback);
         *     },
         *     function(callback) {
         *         fs.writeFile('testfile2', 'test2', callback);
         *     }
         * ]);
         *
         * // It's possible to pass any number of additional arguments when calling the
         * // continuation:
         *
         * node> var fn = async.apply(sys.puts, 'one');
         * node> fn('two', 'three');
         * one
         * two
         * three
         */

        rest(function (fn, args) {
          return rest(function (callArgs) {
            return fn.apply(null, args.concat(callArgs));
          });
        });
        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */

        function arrayEach(array, iteratee) {
          var index = -1,
              length = array == null ? 0 : array.length;

          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }

          return array;
        }
        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */


        function createBaseFor(fromRight) {
          return function (object, iteratee, keysFunc) {
            var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length;

            while (length--) {
              var key = props[fromRight ? length : ++index];

              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }

            return object;
          };
        }
        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */


        var baseFor = createBaseFor();
        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */

        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }
        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length,
              index = fromIndex + (fromRight ? 1 : -1);

          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }

          return -1;
        }
        /**
         * The base implementation of `_.isNaN` without support for number objects.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         */


        function baseIsNaN(value) {
          return value !== value;
        }
        /**
         * A specialized version of `_.indexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1,
              length = array.length;

          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }

          return -1;
        }
        /**
         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        /**
         * Determines the best order for running the functions in `tasks`, based on
         * their requirements. Each function can optionally depend on other functions
         * being completed first, and each function is run as soon as its requirements
         * are satisfied.
         *
         * If any of the functions pass an error to their callback, the `auto` sequence
         * will stop. Further tasks will not execute (so any other functions depending
         * on it will not run), and the main `callback` is immediately called with the
         * error.
         *
         * Functions also receive an object containing the results of functions which
         * have completed so far as the first argument, if they have dependencies. If a
         * task function has no dependencies, it will only be passed a callback.
         *
         * @name auto
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @category Control Flow
         * @param {Object} tasks - An object. Each of its properties is either a
         * function or an array of requirements, with the function itself the last item
         * in the array. The object's key of a property serves as the name of the task
         * defined by that property, i.e. can be used when specifying requirements for
         * other tasks. The function receives one or two arguments:
         * * a `results` object, containing the results of the previously executed
         *   functions, only passed if the task has any dependencies,
         * * a `callback(err, result)` function, which must be called when finished,
         *   passing an `error` (which can be `null`) and the result of the function's
         *   execution.
         * @param {number} [concurrency=Infinity] - An optional `integer` for
         * determining the maximum number of tasks that can be run in parallel. By
         * default, as many as possible.
         * @param {Function} [callback] - An optional callback which is called when all
         * the tasks have been completed. It receives the `err` argument if any `tasks`
         * pass an error to their callback. Results are always returned; however, if an
         * error occurs, no further `tasks` will be performed, and the results object
         * will only contain partial results. Invoked with (err, results).
         * @returns undefined
         * @example
         *
         * async.auto({
         *     // this function will just be passed a callback
         *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
         *     showData: ['readData', function(results, cb) {
         *         // results.readData is the file's contents
         *         // ...
         *     }]
         * }, callback);
         *
         * async.auto({
         *     get_data: function(callback) {
         *         console.log('in get_data');
         *         // async code to get some data
         *         callback(null, 'data', 'converted to array');
         *     },
         *     make_folder: function(callback) {
         *         console.log('in make_folder');
         *         // async code to create a directory to store a file in
         *         // this is run at the same time as getting the data
         *         callback(null, 'folder');
         *     },
         *     write_file: ['get_data', 'make_folder', function(results, callback) {
         *         console.log('in write_file', JSON.stringify(results));
         *         // once there is some data and the directory exists,
         *         // write the data to a file in the directory
         *         callback(null, 'filename');
         *     }],
         *     email_link: ['write_file', function(results, callback) {
         *         console.log('in email_link', JSON.stringify(results));
         *         // once the file is written let's email a link to it...
         *         // results.write_file contains the filename returned by write_file.
         *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
         *     }]
         * }, function(err, results) {
         *     console.log('err = ', err);
         *     console.log('results = ', results);
         * });
         */

        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */

        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */

        /**
         * Converts an ASCII `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */

        /** Used to compose unicode character classes. */

        /** Used to compose unicode character classes. */


        var rsAstralRange$1 = '\\ud800-\\udfff';
        var rsComboMarksRange$1 = '\\u0300-\\u036f';
        var reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f';
        var rsComboSymbolsRange$1 = '\\u20d0-\\u20ff';
        var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
        var rsVarRange$1 = '\\ufe0e\\ufe0f';
        /** Used to compose unicode capture groups. */

        var rsAstral = '[' + rsAstralRange$1 + ']';
        var rsCombo = '[' + rsComboRange$1 + ']';
        var rsFitz = '\\ud83c[\\udffb-\\udfff]';
        var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
        var rsNonAstral = '[^' + rsAstralRange$1 + ']';
        var rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
        var rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
        var rsZWJ$1 = '\\u200d';
        /** Used to compose unicode regexes. */

        var reOptMod = rsModifier + '?';
        var rsOptVar = '[' + rsVarRange$1 + ']?';
        var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
        var rsSeq = rsOptVar + reOptMod + rsOptJoin;
        var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
        var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
        var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

        function fallback(fn) {
          setTimeout(fn, 0);
        }

        function wrap(defer) {
          return rest(function (fn, args) {
            defer(function () {
              fn.apply(null, args);
            });
          });
        }

        var _defer;

        if (hasSetImmediate) {
          _defer = setImmediate;
        } else if (hasNextTick) {
          _defer = process.nextTick;
        } else {
          _defer = fallback;
        }

        wrap(_defer); // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
        // used for queues. This implementation assumes that the node provided by the user can be modified
        // to adjust the next and last properties. We implement only the minimal functionality
        // for queue support.

        /**
         * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
         *
         * @name eachOfSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.eachOf]{@link module:Collections.eachOf}
         * @alias forEachOfSeries
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item in `coll`. The
         * `key` is the item's key, or index in the case of an array. The iteratee is
         * passed a `callback(err)` which must be called once it has completed. If no
         * error has occurred, the callback should be run without arguments or with an
         * explicit `null` argument. Invoked with (item, key, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. Invoked with (err).
         */

        var eachOfSeries = doLimit(eachOfLimit, 1);
        /**
         * Reduces `coll` into a single value using an async `iteratee` to return each
         * successive step. `memo` is the initial state of the reduction. This function
         * only operates in series.
         *
         * For performance reasons, it may make sense to split a call to this function
         * into a parallel map, and then use the normal `Array.prototype.reduce` on the
         * results. This function is for situations where each step in the reduction
         * needs to be async; if you can get the data before reducing it, then it's
         * probably a good idea to do so.
         *
         * @name reduce
         * @static
         * @memberOf module:Collections
         * @method
         * @alias inject
         * @alias foldl
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {*} memo - The initial state of the reduction.
         * @param {Function} iteratee - A function applied to each item in the
         * array to produce the next step in the reduction. The `iteratee` is passed a
         * `callback(err, reduction)` which accepts an optional error as its first
         * argument, and the state of the reduction as the second. If an error is
         * passed to the callback, the reduction is stopped and the main `callback` is
         * immediately called with the error. Invoked with (memo, item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Result is the reduced value. Invoked with
         * (err, result).
         * @example
         *
         * async.reduce([1,2,3], 0, function(memo, item, callback) {
         *     // pointless async:
         *     process.nextTick(function() {
         *         callback(null, memo + item)
         *     });
         * }, function(err, result) {
         *     // result is now equal to the last value of memo, which is 6
         * });
         */

        function reduce(coll, memo, iteratee, callback) {
          callback = once(callback || noop);
          eachOfSeries(coll, function (x, i, callback) {
            iteratee(memo, x, function (err, v) {
              memo = v;
              callback(err);
            });
          }, function (err) {
            callback(err, memo);
          });
        }
        /**
         * Version of the compose function that is more natural to read. Each function
         * consumes the return value of the previous function. It is the equivalent of
         * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
         *
         * Each function is executed with the `this` binding of the composed function.
         *
         * @name seq
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.compose]{@link module:ControlFlow.compose}
         * @category Control Flow
         * @param {...Function} functions - the asynchronous functions to compose
         * @returns {Function} a function that composes the `functions` in order
         * @example
         *
         * // Requires lodash (or underscore), express3 and dresende's orm2.
         * // Part of an app, that fetches cats of the logged user.
         * // This example uses `seq` function to avoid overnesting and error
         * // handling clutter.
         * app.get('/cats', function(request, response) {
         *     var User = request.models.User;
         *     async.seq(
         *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
         *         function(user, fn) {
         *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
         *         }
         *     )(req.session.user_id, function (err, cats) {
         *         if (err) {
         *             console.error(err);
         *             response.json({ status: 'error', message: err.message });
         *         } else {
         *             response.json({ status: 'ok', message: 'Cats found', data: cats });
         *         }
         *     });
         * });
         */


        var seq = rest(function seq(functions) {
          return rest(function (args) {
            var that = this;
            var cb = args[args.length - 1];

            if (typeof cb == 'function') {
              args.pop();
            } else {
              cb = noop;
            }

            reduce(functions, args, function (newargs, fn, cb) {
              fn.apply(that, newargs.concat(rest(function (err, nextargs) {
                cb(err, nextargs);
              })));
            }, function (err, results) {
              cb.apply(that, [err].concat(results));
            });
          });
        });
        /**
         * Creates a function which is a composition of the passed asynchronous
         * functions. Each function consumes the return value of the function that
         * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
         * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
         *
         * Each function is executed with the `this` binding of the composed function.
         *
         * @name compose
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @category Control Flow
         * @param {...Function} functions - the asynchronous functions to compose
         * @returns {Function} an asynchronous function that is the composed
         * asynchronous `functions`
         * @example
         *
         * function add1(n, callback) {
         *     setTimeout(function () {
         *         callback(null, n + 1);
         *     }, 10);
         * }
         *
         * function mul3(n, callback) {
         *     setTimeout(function () {
         *         callback(null, n * 3);
         *     }, 10);
         * }
         *
         * var add1mul3 = async.compose(mul3, add1);
         * add1mul3(4, function (err, result) {
         *     // result now equals 15
         * });
         */

        rest(function (args) {
          return seq.apply(null, args.reverse());
        });
        /**
         * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
         * the concatenated list. The `iteratee`s are called in parallel, and the
         * results are concatenated as they return. There is no guarantee that the
         * results array will be returned in the original order of `coll` passed to the
         * `iteratee` function.
         *
         * @name concat
         * @static
         * @memberOf module:Collections
         * @method
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, results)` which must be called once
         * it has completed with an error (which can be `null`) and an array of results.
         * Invoked with (item, callback).
         * @param {Function} [callback(err)] - A callback which is called after all the
         * `iteratee` functions have finished, or an error occurs. Results is an array
         * containing the concatenated results of the `iteratee` function. Invoked with
         * (err, results).
         * @example
         *
         * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
         *     // files is now a list of filenames that exist in the 3 directories
         * });
         */

        /**
         * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
         *
         * @name concatSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.concat]{@link module:Collections.concat}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, results)` which must be called once
         * it has completed with an error (which can be `null`) and an array of results.
         * Invoked with (item, callback).
         * @param {Function} [callback(err)] - A callback which is called after all the
         * `iteratee` functions have finished, or an error occurs. Results is an array
         * containing the concatenated results of the `iteratee` function. Invoked with
         * (err, results).
         */

        /**
         * Returns a function that when called, calls-back with the values provided.
         * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
         * [`auto`]{@link module:ControlFlow.auto}.
         *
         * @name constant
         * @static
         * @memberOf module:Utils
         * @method
         * @category Util
         * @param {...*} arguments... - Any number of arguments to automatically invoke
         * callback with.
         * @returns {Function} Returns a function that when invoked, automatically
         * invokes the callback with the previous given arguments.
         * @example
         *
         * async.waterfall([
         *     async.constant(42),
         *     function (value, next) {
         *         // value === 42
         *     },
         *     //...
         * ], callback);
         *
         * async.waterfall([
         *     async.constant(filename, "utf8"),
         *     fs.readFile,
         *     function (fileData, next) {
         *         //...
         *     }
         *     //...
         * ], callback);
         *
         * async.auto({
         *     hostname: async.constant("https://server.net/"),
         *     port: findFreePort,
         *     launchServer: ["hostname", "port", function (options, cb) {
         *         startServer(options, cb);
         *     }],
         *     //...
         * }, callback);
         */

        rest(function (values) {
          var args = [null].concat(values);
          return initialParams(function (ignoredArgs, callback) {
            return callback.apply(this, args);
          });
        });
        /**
         * Returns the first value in `coll` that passes an async truth test. The
         * `iteratee` is applied in parallel, meaning the first iteratee to return
         * `true` will fire the detect `callback` with that result. That means the
         * result might not be the first item in the original `coll` (in terms of order)
         * that passes the test.
        
         * If order within the original `coll` is important, then look at
         * [`detectSeries`]{@link module:Collections.detectSeries}.
         *
         * @name detect
         * @static
         * @memberOf module:Collections
         * @method
         * @alias find
         * @category Collections
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, truthValue)` which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the `iteratee` functions have finished.
         * Result will be the first item in the array that passes the truth test
         * (iteratee) or the value `undefined` if none passed. Invoked with
         * (err, result).
         * @example
         *
         * async.detect(['file1','file2','file3'], function(filePath, callback) {
         *     fs.access(filePath, function(err) {
         *         callback(null, !err)
         *     });
         * }, function(err, result) {
         *     // result now equals the first file in the list that exists
         * });
         */

        /**
         * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
         * time.
         *
         * @name detectLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.detect]{@link module:Collections.detect}
         * @alias findLimit
         * @category Collections
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, truthValue)` which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the `iteratee` functions have finished.
         * Result will be the first item in the array that passes the truth test
         * (iteratee) or the value `undefined` if none passed. Invoked with
         * (err, result).
         */

        /**
         * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
         *
         * @name detectSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.detect]{@link module:Collections.detect}
         * @alias findSeries
         * @category Collections
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, truthValue)` which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the `iteratee` functions have finished.
         * Result will be the first item in the array that passes the truth test
         * (iteratee) or the value `undefined` if none passed. Invoked with
         * (err, result).
         */

        function consoleFunc(name) {
          return rest(function (fn, args) {
            fn.apply(null, args.concat(rest(function (err, args) {
              if (typeof console === 'object') {
                if (err) {
                  if (console.error) {
                    console.error(err);
                  }
                } else if (console[name]) {
                  arrayEach(args, function (x) {
                    console[name](x);
                  });
                }
              }
            })));
          });
        }
        /**
         * Logs the result of an `async` function to the `console` using `console.dir`
         * to display the properties of the resulting object. Only works in Node.js or
         * in browsers that support `console.dir` and `console.error` (such as FF and
         * Chrome). If multiple arguments are returned from the async function,
         * `console.dir` is called on each argument in order.
         *
         * @name dir
         * @static
         * @memberOf module:Utils
         * @method
         * @category Util
         * @param {Function} function - The function you want to eventually apply all
         * arguments to.
         * @param {...*} arguments... - Any number of arguments to apply to the function.
         * @example
         *
         * // in a module
         * var hello = function(name, callback) {
         *     setTimeout(function() {
         *         callback(null, {hello: name});
         *     }, 1000);
         * };
         *
         * // in the node repl
         * node> async.dir(hello, 'world');
         * {hello: 'world'}
         */


        consoleFunc('dir');

        function _withoutIndex(iteratee) {
          return function (value, index, callback) {
            return iteratee(value, callback);
          };
        }
        /**
         * Applies the function `iteratee` to each item in `coll`, in parallel.
         * The `iteratee` is called with an item from the list, and a callback for when
         * it has finished. If the `iteratee` passes an error to its `callback`, the
         * main `callback` (for the `each` function) is immediately called with the
         * error.
         *
         * Note, that since this function applies `iteratee` to each item in parallel,
         * there is no guarantee that the iteratee functions will complete in order.
         *
         * @name each
         * @static
         * @memberOf module:Collections
         * @method
         * @alias forEach
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item
         * in `coll`. The iteratee is passed a `callback(err)` which must be called once
         * it has completed. If no error has occurred, the `callback` should be run
         * without arguments or with an explicit `null` argument. The array index is not
         * passed to the iteratee. Invoked with (item, callback). If you need the index,
         * use `eachOf`.
         * @param {Function} [callback] - A callback which is called when all
         * `iteratee` functions have finished, or an error occurs. Invoked with (err).
         * @example
         *
         * // assuming openFiles is an array of file names and saveFile is a function
         * // to save the modified contents of that file:
         *
         * async.each(openFiles, saveFile, function(err){
         *   // if any of the saves produced an error, err would equal that error
         * });
         *
         * // assuming openFiles is an array of file names
         * async.each(openFiles, function(file, callback) {
         *
         *     // Perform operation on file here.
         *     console.log('Processing file ' + file);
         *
         *     if( file.length > 32 ) {
         *       console.log('This file name is too long');
         *       callback('File name too long');
         *     } else {
         *       // Do work to process file here
         *       console.log('File processed');
         *       callback();
         *     }
         * }, function(err) {
         *     // if any of the file processing produced an error, err would equal that error
         *     if( err ) {
         *       // One of the iterations produced an error.
         *       // All processing will now stop.
         *       console.log('A file failed to process');
         *     } else {
         *       console.log('All files have been processed successfully');
         *     }
         * });
         */


        function eachLimit(coll, iteratee, callback) {
          eachOf(coll, _withoutIndex(iteratee), callback);
        }
        /**
         * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
         *
         * @name eachSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.each]{@link module:Collections.each}
         * @alias forEachSeries
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each
         * item in `coll`. The iteratee is passed a `callback(err)` which must be called
         * once it has completed. If no error has occurred, the `callback` should be run
         * without arguments or with an explicit `null` argument. The array index is
         * not passed to the iteratee. Invoked with (item, callback). If you need the
         * index, use `eachOfSeries`.
         * @param {Function} [callback] - A callback which is called when all
         * `iteratee` functions have finished, or an error occurs. Invoked with (err).
         */

        /**
         * Returns `true` if every element in `coll` satisfies an async test. If any
         * iteratee call returns `false`, the main `callback` is immediately called.
         *
         * @name every
         * @static
         * @memberOf module:Collections
         * @method
         * @alias all
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in the
         * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
         * which must be called with a  boolean argument once it has completed. Invoked
         * with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Result will be either `true` or `false`
         * depending on the values of the async tests. Invoked with (err, result).
         * @example
         *
         * async.every(['file1','file2','file3'], function(filePath, callback) {
         *     fs.access(filePath, function(err) {
         *         callback(null, !err)
         *     });
         * }, function(err, result) {
         *     // if result is true then every file exists
         * });
         */

        /**
         * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
         *
         * @name everyLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.every]{@link module:Collections.every}
         * @alias allLimit
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A truth test to apply to each item in the
         * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
         * which must be called with a  boolean argument once it has completed. Invoked
         * with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Result will be either `true` or `false`
         * depending on the values of the async tests. Invoked with (err, result).
         */

        /**
         * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
         *
         * @name everySeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.every]{@link module:Collections.every}
         * @alias allSeries
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in the
         * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
         * which must be called with a  boolean argument once it has completed. Invoked
         * with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Result will be either `true` or `false`
         * depending on the values of the async tests. Invoked with (err, result).
         */

        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */

        /**
         * Returns a new array of all the values in `coll` which pass an async truth
         * test. This operation is performed in parallel, but the results array will be
         * in the same order as the original.
         *
         * @name filter
         * @static
         * @memberOf module:Collections
         * @method
         * @alias select
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results).
         * @example
         *
         * async.filter(['file1','file2','file3'], function(filePath, callback) {
         *     fs.access(filePath, function(err) {
         *         callback(null, !err)
         *     });
         * }, function(err, results) {
         *     // results now equals an array of the existing files
         * });
         */

        /**
         * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
         * time.
         *
         * @name filterLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.filter]{@link module:Collections.filter}
         * @alias selectLimit
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results).
         */

        /**
         * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
         *
         * @name filterSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.filter]{@link module:Collections.filter}
         * @alias selectSeries
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results)
         */

        /**
         * Logs the result of an `async` function to the `console`. Only works in
         * Node.js or in browsers that support `console.log` and `console.error` (such
         * as FF and Chrome). If multiple arguments are returned from the async
         * function, `console.log` is called on each argument in order.
         *
         * @name log
         * @static
         * @memberOf module:Utils
         * @method
         * @category Util
         * @param {Function} function - The function you want to eventually apply all
         * arguments to.
         * @param {...*} arguments... - Any number of arguments to apply to the function.
         * @example
         *
         * // in a module
         * var hello = function(name, callback) {
         *     setTimeout(function() {
         *         callback(null, 'hello ' + name);
         *     }, 1000);
         * };
         *
         * // in the node repl
         * node> async.log(hello, 'world');
         * 'hello world'
         */


        consoleFunc('log');
        /**
         * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
         *
         * Produces a new Object by mapping each value of `obj` through the `iteratee`
         * function. The `iteratee` is called each `value` and `key` from `obj` and a
         * callback for when it has finished processing. Each of these callbacks takes
         * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
         * passes an error to its callback, the main `callback` (for the `mapValues`
         * function) is immediately called with the error.
         *
         * Note, the order of the keys in the result is not guaranteed.  The keys will
         * be roughly in the order they complete, (but this is very engine-specific)
         *
         * @name mapValues
         * @static
         * @memberOf module:Collections
         * @method
         * @category Collection
         * @param {Object} obj - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each value and key in
         * `coll`. The iteratee is passed a `callback(err, transformed)` which must be
         * called once it has completed with an error (which can be `null`) and a
         * transformed value. Invoked with (value, key, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. `result` is a new object consisting
         * of each key from `obj`, with each transformed value on the right-hand side.
         * Invoked with (err, result).
         * @example
         *
         * async.mapValues({
         *     f1: 'file1',
         *     f2: 'file2',
         *     f3: 'file3'
         * }, function (file, key, callback) {
         *   fs.stat(file, callback);
         * }, function(err, result) {
         *     // result is now a map of stats for each file, e.g.
         *     // {
         *     //     f1: [stats for file1],
         *     //     f2: [stats for file2],
         *     //     f3: [stats for file3]
         *     // }
         * });
         */

        /**
         * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
         *
         * @name mapValuesSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.mapValues]{@link module:Collections.mapValues}
         * @category Collection
         * @param {Object} obj - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each value in `obj`.
         * The iteratee is passed a `callback(err, transformed)` which must be called
         * once it has completed with an error (which can be `null`) and a
         * transformed value. Invoked with (value, key, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. `result` is a new object consisting
         * of each key from `obj`, with each transformed value on the right-hand side.
         * Invoked with (err, result).
         */

        /**
         * Calls `callback` on a later loop around the event loop. In Node.js this just
         * calls `setImmediate`.  In the browser it will use `setImmediate` if
         * available, otherwise `setTimeout(callback, 0)`, which means other higher
         * priority events may precede the execution of `callback`.
         *
         * This is used internally for browser-compatibility purposes.
         *
         * @name nextTick
         * @static
         * @memberOf module:Utils
         * @method
         * @alias setImmediate
         * @category Util
         * @param {Function} callback - The function to call on a later loop around
         * the event loop. Invoked with (args...).
         * @param {...*} args... - any number of additional arguments to pass to the
         * callback on the next tick.
         * @example
         *
         * var call_order = [];
         * async.nextTick(function() {
         *     call_order.push('two');
         *     // call_order now equals ['one','two']
         * });
         * call_order.push('one');
         *
         * async.setImmediate(function (a, b, c) {
         *     // a, b, and c equal 1, 2, and 3
         * }, 1, 2, 3);
         */

        var _defer$1;

        if (hasNextTick) {
          _defer$1 = process.nextTick;
        } else if (hasSetImmediate) {
          _defer$1 = setImmediate;
        } else {
          _defer$1 = fallback;
        }

        wrap(_defer$1);
        /**
         * Calls `callback` on a later loop around the event loop. In Node.js this just
         * calls `setImmediate`.  In the browser it will use `setImmediate` if
         * available, otherwise `setTimeout(callback, 0)`, which means other higher
         * priority events may precede the execution of `callback`.
         *
         * This is used internally for browser-compatibility purposes.
         *
         * @name setImmediate
         * @static
         * @memberOf module:Utils
         * @method
         * @alias nextTick
         * @category Util
         * @param {Function} callback - The function to call on a later loop around
         * the event loop. Invoked with (args...).
         * @param {...*} args... - any number of additional arguments to pass to the
         * callback on the next tick.
         * @example
         *
         * var call_order = [];
         * async.nextTick(function() {
         *     call_order.push('two');
         *     // call_order now equals ['one','two']
         * });
         * call_order.push('one');
         *
         * async.setImmediate(function (a, b, c) {
         *     // a, b, and c equal 1, 2, and 3
         * }, 1, 2, 3);
         */

        /**
         * A queue of tasks for the worker function to complete.
         * @typedef {Object} QueueObject
         * @memberOf module:ControlFlow
         * @property {Function} length - a function returning the number of items
         * waiting to be processed. Invoke with `queue.length()`.
         * @property {boolean} started - a boolean indicating whether or not any
         * items have been pushed and processed by the queue.
         * @property {Function} running - a function returning the number of items
         * currently being processed. Invoke with `queue.running()`.
         * @property {Function} workersList - a function returning the array of items
         * currently being processed. Invoke with `queue.workersList()`.
         * @property {Function} idle - a function returning false if there are items
         * waiting or being processed, or true if not. Invoke with `queue.idle()`.
         * @property {number} concurrency - an integer for determining how many `worker`
         * functions should be run in parallel. This property can be changed after a
         * `queue` is created to alter the concurrency on-the-fly.
         * @property {Function} push - add a new task to the `queue`. Calls `callback`
         * once the `worker` has finished processing the task. Instead of a single task,
         * a `tasks` array can be submitted. The respective callback is used for every
         * task in the list. Invoke with `queue.push(task, [callback])`,
         * @property {Function} unshift - add a new task to the front of the `queue`.
         * Invoke with `queue.unshift(task, [callback])`.
         * @property {Function} saturated - a callback that is called when the number of
         * running workers hits the `concurrency` limit, and further tasks will be
         * queued.
         * @property {Function} unsaturated - a callback that is called when the number
         * of running workers is less than the `concurrency` & `buffer` limits, and
         * further tasks will not be queued.
         * @property {number} buffer - A minimum threshold buffer in order to say that
         * the `queue` is `unsaturated`.
         * @property {Function} empty - a callback that is called when the last item
         * from the `queue` is given to a `worker`.
         * @property {Function} drain - a callback that is called when the last item
         * from the `queue` has returned from the `worker`.
         * @property {Function} error - a callback that is called when a task errors.
         * Has the signature `function(error, task)`.
         * @property {boolean} paused - a boolean for determining whether the queue is
         * in a paused state.
         * @property {Function} pause - a function that pauses the processing of tasks
         * until `resume()` is called. Invoke with `queue.pause()`.
         * @property {Function} resume - a function that resumes the processing of
         * queued tasks when the queue is paused. Invoke with `queue.resume()`.
         * @property {Function} kill - a function that removes the `drain` callback and
         * empties remaining tasks from the queue forcing it to go idle. Invoke with `queue.kill()`.
         */

        /**
         * Creates a `queue` object with the specified `concurrency`. Tasks added to the
         * `queue` are processed in parallel (up to the `concurrency` limit). If all
         * `worker`s are in progress, the task is queued until one becomes available.
         * Once a `worker` completes a `task`, that `task`'s callback is called.
         *
         * @name queue
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @category Control Flow
         * @param {Function} worker - An asynchronous function for processing a queued
         * task, which must call its `callback(err)` argument when finished, with an
         * optional `error` as an argument.  If you want to handle errors from an
         * individual task, pass a callback to `q.push()`. Invoked with
         * (task, callback).
         * @param {number} [concurrency=1] - An `integer` for determining how many
         * `worker` functions should be run in parallel.  If omitted, the concurrency
         * defaults to `1`.  If the concurrency is `0`, an error is thrown.
         * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
         * attached as certain properties to listen for specific events during the
         * lifecycle of the queue.
         * @example
         *
         * // create a queue object with concurrency 2
         * var q = async.queue(function(task, callback) {
         *     console.log('hello ' + task.name);
         *     callback();
         * }, 2);
         *
         * // assign a callback
         * q.drain = function() {
         *     console.log('all items have been processed');
         * };
         *
         * // add some items to the queue
         * q.push({name: 'foo'}, function(err) {
         *     console.log('finished processing foo');
         * });
         * q.push({name: 'bar'}, function (err) {
         *     console.log('finished processing bar');
         * });
         *
         * // add some items to the queue (batch-wise)
         * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
         *     console.log('finished processing item');
         * });
         *
         * // add some items to the front of the queue
         * q.unshift({name: 'bar'}, function (err) {
         *     console.log('finished processing bar');
         * });
         */

        /**
         * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
         * completed in ascending priority order.
         *
         * @name priorityQueue
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.queue]{@link module:ControlFlow.queue}
         * @category Control Flow
         * @param {Function} worker - An asynchronous function for processing a queued
         * task, which must call its `callback(err)` argument when finished, with an
         * optional `error` as an argument.  If you want to handle errors from an
         * individual task, pass a callback to `q.push()`. Invoked with
         * (task, callback).
         * @param {number} concurrency - An `integer` for determining how many `worker`
         * functions should be run in parallel.  If omitted, the concurrency defaults to
         * `1`.  If the concurrency is `0`, an error is thrown.
         * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
         * differences between `queue` and `priorityQueue` objects:
         * * `push(task, priority, [callback])` - `priority` should be a number. If an
         *   array of `tasks` is given, all tasks will be assigned the same priority.
         * * The `unshift` method was removed.
         */

        /**
         * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
         *
         * @name reject
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.filter]{@link module:Collections.filter}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results).
         * @example
         *
         * async.reject(['file1','file2','file3'], function(filePath, callback) {
         *     fs.access(filePath, function(err) {
         *         callback(null, !err)
         *     });
         * }, function(err, results) {
         *     // results now equals an array of missing files
         *     createFiles(results);
         * });
         */

        /**
         * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
         * time.
         *
         * @name rejectLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.reject]{@link module:Collections.reject}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results).
         */

        /**
         * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
         *
         * @name rejectSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.reject]{@link module:Collections.reject}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results).
         */

        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */

        /**
         * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method wraps a task and makes it
         * retryable, rather than immediately calling it with retries.
         *
         * @name retryable
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.retry]{@link module:ControlFlow.retry}
         * @category Control Flow
         * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
         * options, exactly the same as from `retry`
         * @param {Function} task - the asynchronous function to wrap
         * @returns {Functions} The wrapped function, which when invoked, will retry on
         * an error, based on the parameters specified in `opts`.
         * @example
         *
         * async.auto({
         *     dep1: async.retryable(3, getFromFlakyService),
         *     process: ["dep1", async.retryable(3, function (results, cb) {
         *         maybeProcessData(results.dep1, cb);
         *     })]
         * }, callback);
         */

        /**
         * Returns `true` if at least one element in the `coll` satisfies an async test.
         * If any iteratee call returns `true`, the main `callback` is immediately
         * called.
         *
         * @name some
         * @static
         * @memberOf module:Collections
         * @method
         * @alias any
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in the array
         * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
         * be called with a boolean argument once it has completed. Invoked with
         * (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the iteratee functions have finished.
         * Result will be either `true` or `false` depending on the values of the async
         * tests. Invoked with (err, result).
         * @example
         *
         * async.some(['file1','file2','file3'], function(filePath, callback) {
         *     fs.access(filePath, function(err) {
         *         callback(null, !err)
         *     });
         * }, function(err, result) {
         *     // if result is true then at least one of the files exists
         * });
         */

        /**
         * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
         *
         * @name someLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.some]{@link module:Collections.some}
         * @alias anyLimit
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A truth test to apply to each item in the array
         * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
         * be called with a boolean argument once it has completed. Invoked with
         * (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the iteratee functions have finished.
         * Result will be either `true` or `false` depending on the values of the async
         * tests. Invoked with (err, result).
         */

        /**
         * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
         *
         * @name someSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.some]{@link module:Collections.some}
         * @alias anySeries
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in the array
         * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
         * be called with a boolean argument once it has completed. Invoked with
         * (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the iteratee functions have finished.
         * Result will be either `true` or `false` depending on the values of the async
         * tests. Invoked with (err, result).
         */

        /* Built-in method references for those with the same name as other `lodash` methods. */

        var nativeCeil = Math.ceil;
        var nativeMax$1 = Math.max;
        /**
         * Calls the `iteratee` function `n` times, and accumulates results in the same
         * manner you would use with [map]{@link module:Collections.map}.
         *
         * @name times
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.map]{@link module:Collections.map}
         * @category Control Flow
         * @param {number} n - The number of times to run the function.
         * @param {Function} iteratee - The function to call `n` times. Invoked with the
         * iteration index and a callback (n, next).
         * @param {Function} callback - see {@link module:Collections.map}.
         * @example
         *
         * // Pretend this is some complicated async factory
         * var createUser = function(id, callback) {
         *     callback(null, {
         *         id: 'user' + id
         *     });
         * };
         *
         * // generate 5 users
         * async.times(5, function(n, next) {
         *     createUser(n, function(err, user) {
         *         next(err, user);
         *     });
         * }, function(err, users) {
         *     // we should now have 5 users
         * });
         */

        /**
         * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
         *
         * @name timesSeries
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.times]{@link module:ControlFlow.times}
         * @category Control Flow
         * @param {number} n - The number of times to run the function.
         * @param {Function} iteratee - The function to call `n` times. Invoked with the
         * iteration index and a callback (n, next).
         * @param {Function} callback - see {@link module:Collections.map}.
         */

        /**
         * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
         * unmemoized form. Handy for testing.
         *
         * @name unmemoize
         * @static
         * @memberOf module:Utils
         * @method
         * @see [async.memoize]{@link module:Utils.memoize}
         * @category Util
         * @param {Function} fn - the memoized function
         * @returns {Function} a function that calls the original unmemoized function
         */

        /**
         * Runs the `tasks` array of functions in series, each passing their results to
         * the next in the array. However, if any of the `tasks` pass an error to their
         * own callback, the next function is not executed, and the main `callback` is
         * immediately called with the error.
         *
         * @name waterfall
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @category Control Flow
         * @param {Array} tasks - An array of functions to run, each function is passed
         * a `callback(err, result1, result2, ...)` it must call on completion. The
         * first argument is an error (which can be `null`) and any further arguments
         * will be passed as arguments in order to the next task.
         * @param {Function} [callback] - An optional callback to run once all the
         * functions have completed. This will be passed the results of the last task's
         * callback. Invoked with (err, [results]).
         * @returns undefined
         * @example
         *
         * async.waterfall([
         *     function(callback) {
         *         callback(null, 'one', 'two');
         *     },
         *     function(arg1, arg2, callback) {
         *         // arg1 now equals 'one' and arg2 now equals 'two'
         *         callback(null, 'three');
         *     },
         *     function(arg1, callback) {
         *         // arg1 now equals 'three'
         *         callback(null, 'done');
         *     }
         * ], function (err, result) {
         *     // result now equals 'done'
         * });
         *
         * // Or, with named functions:
         * async.waterfall([
         *     myFirstFunction,
         *     mySecondFunction,
         *     myLastFunction,
         * ], function (err, result) {
         *     // result now equals 'done'
         * });
         * function myFirstFunction(callback) {
         *     callback(null, 'one', 'two');
         * }
         * function mySecondFunction(arg1, arg2, callback) {
         *     // arg1 now equals 'one' and arg2 now equals 'two'
         *     callback(null, 'three');
         * }
         * function myLastFunction(arg1, callback) {
         *     // arg1 now equals 'three'
         *     callback(null, 'done');
         * }
         */

        /**
         * Async is a utility module which provides straight-forward, powerful functions
         * for working with asynchronous JavaScript. Although originally designed for
         * use with [Node.js](http://nodejs.org) and installable via
         * `npm install --save async`, it can also be used directly in the browser.
         * @module async
         */

        /**
         * A collection of `async` functions for manipulating collections, such as
         * arrays and objects.
         * @module Collections
         */

        /**
         * A collection of `async` functions for controlling the flow through a script.
         * @module ControlFlow
         */

        /**
         * A collection of `async` utility functions.
         * @module Utils
         */

        /**
         * @hidden
         */

        var errorCodeLookup;
        /**
         * Lazily construct error code lookup, since DropboxJS might be loaded *after* BrowserFS (or not at all!)
         * @hidden
         */

        function constructErrorCodeLookup() {
          if (errorCodeLookup) {
            return;
          }

          errorCodeLookup = {}; // This indicates a network transmission error on modern browsers. Internet Explorer might cause this code to be reported on some API server errors.

          errorCodeLookup[Dropbox.ApiError.NETWORK_ERROR] = ErrorCode.EIO; // This happens when the contentHash parameter passed to a Dropbox.Client#readdir or Dropbox.Client#stat matches the most recent content, so the API call response is omitted, to save bandwidth.
          // errorCodeLookup[Dropbox.ApiError.NO_CONTENT];
          // The error property on {Dropbox.ApiError#response} should indicate which input parameter is invalid and why.

          errorCodeLookup[Dropbox.ApiError.INVALID_PARAM] = ErrorCode.EINVAL; // The OAuth token used for the request will never become valid again, so the user should be re-authenticated.

          errorCodeLookup[Dropbox.ApiError.INVALID_TOKEN] = ErrorCode.EPERM; // This indicates a bug in dropbox.js and should never occur under normal circumstances.
          // ^ Actually, that's false. This occurs when you try to move folders to themselves, or move a file over another file.

          errorCodeLookup[Dropbox.ApiError.OAUTH_ERROR] = ErrorCode.EPERM; // This happens when trying to read from a non-existing file, readdir a non-existing directory, write a file into a non-existing directory, etc.

          errorCodeLookup[Dropbox.ApiError.NOT_FOUND] = ErrorCode.ENOENT; // This indicates a bug in dropbox.js and should never occur under normal circumstances.

          errorCodeLookup[Dropbox.ApiError.INVALID_METHOD] = ErrorCode.EINVAL; // This happens when a Dropbox.Client#readdir or Dropbox.Client#stat call would return more than a maximum amount of directory entries.

          errorCodeLookup[Dropbox.ApiError.NOT_ACCEPTABLE] = ErrorCode.EINVAL; // This is used by some backend methods to indicate that the client needs to download server-side changes and perform conflict resolution. Under normal usage, errors with this code should never surface to the code using dropbox.js.

          errorCodeLookup[Dropbox.ApiError.CONFLICT] = ErrorCode.EINVAL; // Status value indicating that the application is making too many requests.

          errorCodeLookup[Dropbox.ApiError.RATE_LIMITED] = ErrorCode.EBUSY; // The request should be retried after some time.

          errorCodeLookup[Dropbox.ApiError.SERVER_ERROR] = ErrorCode.EBUSY; // Status value indicating that the user's Dropbox is over its storage quota.

          errorCodeLookup[Dropbox.ApiError.OVER_QUOTA] = ErrorCode.ENOSPC;
        }
        /**
         * @hidden
         */


        function isFileInfo(cache) {
          return cache && cache.stat.isFile;
        }
        /**
         * @hidden
         */


        function isDirInfo(cache) {
          return cache && cache.stat.isFolder;
        }
        /**
         * @hidden
         */


        function isArrayBuffer(ab) {
          // Accept null / undefined, too.
          return ab === null || ab === undefined || typeof ab === 'object' && typeof ab['byteLength'] === 'number';
        }
        /**
         * Wraps a Dropbox client and caches operations.
         * @hidden
         */


        var CachedDropboxClient = function CachedDropboxClient(client) {
          this._cache = {};
          this._client = client;
        };

        CachedDropboxClient.prototype.readdir = function readdir(p, cb) {
          var this$1 = this;
          var cacheInfo = this.getCachedDirInfo(p);

          this._wrap(function (interceptCb) {
            if (cacheInfo !== null && cacheInfo.contents) {
              this$1._client.readdir(p, {
                contentHash: cacheInfo.stat.contentHash
              }, interceptCb);
            } else {
              this$1._client.readdir(p, interceptCb);
            }
          }, function (err, filenames, stat, folderEntries) {
            if (err) {
              if (err.status === Dropbox.ApiError.NO_CONTENT && cacheInfo !== null) {
                cb(null, cacheInfo.contents.slice(0));
              } else {
                cb(err);
              }
            } else {
              this$1.updateCachedDirInfo(p, stat, filenames.slice(0));
              folderEntries.forEach(function (entry) {
                this$1.updateCachedInfo(path.join(p, entry.name), entry);
              });
              cb(null, filenames);
            }
          });
        };

        CachedDropboxClient.prototype.remove = function remove(p, cb) {
          var this$1 = this;

          this._wrap(function (interceptCb) {
            this$1._client.remove(p, interceptCb);
          }, function (err, stat) {
            if (!err) {
              this$1.updateCachedInfo(p, stat);
            }

            cb(err);
          });
        };

        CachedDropboxClient.prototype.move = function move(src, dest, cb) {
          var this$1 = this;

          this._wrap(function (interceptCb) {
            this$1._client.move(src, dest, interceptCb);
          }, function (err, stat) {
            if (!err) {
              this$1.deleteCachedInfo(src);
              this$1.updateCachedInfo(dest, stat);
            }

            cb(err);
          });
        };

        CachedDropboxClient.prototype.stat = function stat(p, cb) {
          var this$1 = this;

          this._wrap(function (interceptCb) {
            this$1._client.stat(p, interceptCb);
          }, function (err, stat) {
            if (!err) {
              this$1.updateCachedInfo(p, stat);
            }

            cb(err, stat);
          });
        };

        CachedDropboxClient.prototype.readFile = function readFile(p, cb) {
          var this$1 = this;
          var cacheInfo = this.getCachedFileInfo(p);

          if (cacheInfo !== null && cacheInfo.contents !== null) {
            // Try to use cached info; issue a stat to see if contents are up-to-date.
            this.stat(p, function (error, stat) {
              if (error) {
                cb(error);
              } else if (stat.contentHash === cacheInfo.stat.contentHash) {
                // No file changes.
                cb(error, cacheInfo.contents.slice(0), cacheInfo.stat);
              } else {
                // File changes; rerun to trigger actual readFile.
                this$1.readFile(p, cb);
              }
            });
          } else {
            this._wrap(function (interceptCb) {
              this$1._client.readFile(p, {
                arrayBuffer: true
              }, interceptCb);
            }, function (err, contents, stat) {
              if (!err) {
                this$1.updateCachedInfo(p, stat, contents.slice(0));
              }

              cb(err, contents, stat);
            });
          }
        };

        CachedDropboxClient.prototype.writeFile = function writeFile(p, contents, cb) {
          var this$1 = this;

          this._wrap(function (interceptCb) {
            this$1._client.writeFile(p, contents, interceptCb);
          }, function (err, stat) {
            if (!err) {
              this$1.updateCachedInfo(p, stat, contents.slice(0));
            }

            cb(err, stat);
          });
        };

        CachedDropboxClient.prototype.mkdir = function mkdir(p, cb) {
          var this$1 = this;

          this._wrap(function (interceptCb) {
            this$1._client.mkdir(p, interceptCb);
          }, function (err, stat) {
            if (!err) {
              this$1.updateCachedInfo(p, stat, []);
            }

            cb(err);
          });
        };
        /**
         * Wraps an operation such that we retry a failed operation 3 times.
         * Necessary to deal with Dropbox rate limiting.
         *
         * @param performOp Function that performs the operation. Will be called up to three times.
         * @param cb Called when the operation succeeds, fails in a non-temporary manner, or fails three times.
         */


        CachedDropboxClient.prototype._wrap = function _wrap(performOp, cb) {
          var numRun = 0;

          var interceptCb = function (error) {
            // Timeout duration, in seconds.
            var timeoutDuration = 2;

            if (error && 3 > ++numRun) {
              switch (error.status) {
                case Dropbox.ApiError.SERVER_ERROR:
                case Dropbox.ApiError.NETWORK_ERROR:
                case Dropbox.ApiError.RATE_LIMITED:
                  setTimeout(function () {
                    performOp(interceptCb);
                  }, timeoutDuration * 1000);
                  break;

                default:
                  cb.apply(null, arguments);
                  break;
              }
            } else {
              cb.apply(null, arguments);
            }
          };

          performOp(interceptCb);
        };

        CachedDropboxClient.prototype.getCachedInfo = function getCachedInfo(p) {
          return this._cache[p.toLowerCase()];
        };

        CachedDropboxClient.prototype.putCachedInfo = function putCachedInfo(p, cache) {
          this._cache[p.toLowerCase()] = cache;
        };

        CachedDropboxClient.prototype.deleteCachedInfo = function deleteCachedInfo(p) {
          delete this._cache[p.toLowerCase()];
        };

        CachedDropboxClient.prototype.getCachedDirInfo = function getCachedDirInfo(p) {
          var info = this.getCachedInfo(p);

          if (isDirInfo(info)) {
            return info;
          } else {
            return null;
          }
        };

        CachedDropboxClient.prototype.getCachedFileInfo = function getCachedFileInfo(p) {
          var info = this.getCachedInfo(p);

          if (isFileInfo(info)) {
            return info;
          } else {
            return null;
          }
        };

        CachedDropboxClient.prototype.updateCachedDirInfo = function updateCachedDirInfo(p, stat, contents) {
          if (contents === void 0) contents = null;
          var cachedInfo = this.getCachedInfo(p); // Dropbox uses the *contentHash* property for directories.
          // Ignore stat objects w/o a contentHash defined; those actually exist!!!
          // (Example: readdir returns an array of stat objs; stat objs for dirs in that context have no contentHash)

          if (stat.contentHash !== null && (cachedInfo === undefined || cachedInfo.stat.contentHash !== stat.contentHash)) {
            this.putCachedInfo(p, {
              stat: stat,
              contents: contents
            });
          }
        };

        CachedDropboxClient.prototype.updateCachedFileInfo = function updateCachedFileInfo(p, stat, contents) {
          if (contents === void 0) contents = null;
          var cachedInfo = this.getCachedInfo(p); // Dropbox uses the *versionTag* property for files.
          // Ignore stat objects w/o a versionTag defined.

          if (stat.versionTag !== null && (cachedInfo === undefined || cachedInfo.stat.versionTag !== stat.versionTag)) {
            this.putCachedInfo(p, {
              stat: stat,
              contents: contents
            });
          }
        };

        CachedDropboxClient.prototype.updateCachedInfo = function updateCachedInfo(p, stat, contents) {
          if (contents === void 0) contents = null;

          if (stat.isFile && isArrayBuffer(contents)) {
            this.updateCachedFileInfo(p, stat, contents);
          } else if (stat.isFolder && Array.isArray(contents)) {
            this.updateCachedDirInfo(p, stat, contents);
          }
        };

        var DropboxFile = function (PreloadFile$$1) {
          function DropboxFile(_fs, _path, _flag, _stat, contents) {
            PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
          }

          if (PreloadFile$$1) DropboxFile.__proto__ = PreloadFile$$1;
          DropboxFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          DropboxFile.prototype.constructor = DropboxFile;

          DropboxFile.prototype.sync = function sync(cb) {
            var this$1 = this;

            if (this.isDirty()) {
              var buffer$$1 = this.getBuffer(),
                  arrayBuffer = buffer2ArrayBuffer(buffer$$1);

              this._fs._writeFileStrict(this.getPath(), arrayBuffer, function (e) {
                if (!e) {
                  this$1.resetDirty();
                }

                cb(e);
              });
            } else {
              cb();
            }
          };

          DropboxFile.prototype.close = function close(cb) {
            this.sync(cb);
          };

          return DropboxFile;
        }(PreloadFile);
        /**
         * A read/write file system backed by Dropbox cloud storage.
         *
         * Uses the Dropbox V1 API.
         *
         * NOTE: You must use the v0.10 version of the [Dropbox JavaScript SDK](https://www.npmjs.com/package/dropbox).
         */


        var DropboxFileSystem = function (BaseFileSystem$$1) {
          function DropboxFileSystem(client, deprecateMsg) {
            if (deprecateMsg === void 0) deprecateMsg = true;
            BaseFileSystem$$1.call(this);
            this._client = new CachedDropboxClient(client);
            deprecationMessage(deprecateMsg, DropboxFileSystem.Name, {
              client: "authenticated dropbox client instance"
            });
            constructErrorCodeLookup();
          }

          if (BaseFileSystem$$1) DropboxFileSystem.__proto__ = BaseFileSystem$$1;
          DropboxFileSystem.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          DropboxFileSystem.prototype.constructor = DropboxFileSystem;
          /**
           * Creates a new DropboxFileSystem instance with the given options.
           * Must be given an *authenticated* DropboxJS client from the old v0.10 version of the Dropbox JS SDK.
           */

          DropboxFileSystem.Create = function Create(opts, cb) {
            cb(null, new DropboxFileSystem(opts.client, false));
          };

          DropboxFileSystem.isAvailable = function isAvailable() {
            // Checks if the Dropbox library is loaded.
            return typeof Dropbox !== 'undefined';
          };

          DropboxFileSystem.prototype.getName = function getName() {
            return DropboxFileSystem.Name;
          };

          DropboxFileSystem.prototype.isReadOnly = function isReadOnly() {
            return false;
          }; // Dropbox doesn't support symlinks, properties, or synchronous calls


          DropboxFileSystem.prototype.supportsSymlinks = function supportsSymlinks() {
            return false;
          };

          DropboxFileSystem.prototype.supportsProps = function supportsProps() {
            return false;
          };

          DropboxFileSystem.prototype.supportsSynch = function supportsSynch() {
            return false;
          };

          DropboxFileSystem.prototype.empty = function empty(mainCb) {
            var this$1 = this;

            this._client.readdir('/', function (error, files) {
              if (error) {
                mainCb(this$1.convert(error, '/'));
              } else {
                var deleteFile = function (file, cb) {
                  var p = path.join('/', file);

                  this$1._client.remove(p, function (err) {
                    cb(err ? this$1.convert(err, p) : null);
                  });
                };

                var finished = function (err) {
                  if (err) {
                    mainCb(err);
                  } else {
                    mainCb();
                  }
                }; // XXX: <any> typing is to get around overly-restrictive ErrorCallback typing.


                eachLimit(files, deleteFile, finished);
              }
            });
          };

          DropboxFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
            var this$1 = this;

            this._client.move(oldPath, newPath, function (error) {
              if (error) {
                // the move is permitted if newPath is a file.
                // Check if this is the case, and remove if so.
                this$1._client.stat(newPath, function (error2, stat) {
                  if (error2 || stat.isFolder) {
                    var missingPath = error.response.error.indexOf(oldPath) > -1 ? oldPath : newPath;
                    cb(this$1.convert(error, missingPath));
                  } else {
                    // Delete file, repeat rename.
                    this$1._client.remove(newPath, function (error2) {
                      if (error2) {
                        cb(this$1.convert(error2, newPath));
                      } else {
                        this$1.rename(oldPath, newPath, cb);
                      }
                    });
                  }
                });
              } else {
                cb();
              }
            });
          };

          DropboxFileSystem.prototype.stat = function stat(path$$1, isLstat, cb) {
            var this$1 = this; // Ignore lstat case -- Dropbox doesn't support symlinks
            // Stat the file

            this._client.stat(path$$1, function (error, stat) {
              if (error) {
                cb(this$1.convert(error, path$$1));
              } else if (stat && stat.isRemoved) {
                // Dropbox keeps track of deleted files, so if a file has existed in the
                // past but doesn't any longer, you wont get an error
                cb(ApiError.FileError(ErrorCode.ENOENT, path$$1));
              } else {
                var stats = new Stats(this$1._statType(stat), stat.size);
                return cb(null, stats);
              }
            });
          };

          DropboxFileSystem.prototype.open = function open(path$$1, flags, mode, cb) {
            var this$1 = this; // Try and get the file's contents

            this._client.readFile(path$$1, function (error, content, dbStat) {
              if (error) {
                // If the file's being opened for reading and doesn't exist, return an
                // error
                if (flags.isReadable()) {
                  cb(this$1.convert(error, path$$1));
                } else {
                  switch (error.status) {
                    // If it's being opened for writing or appending, create it so that
                    // it can be written to
                    case Dropbox.ApiError.NOT_FOUND:
                      var ab = new ArrayBuffer(0);
                      return this$1._writeFileStrict(path$$1, ab, function (error2, stat) {
                        if (error2) {
                          cb(error2);
                        } else {
                          var file = this$1._makeFile(path$$1, flags, stat, arrayBuffer2Buffer(ab));

                          cb(null, file);
                        }
                      });

                    default:
                      return cb(this$1.convert(error, path$$1));
                  }
                }
              } else {
                // No error
                var buffer$$1; // Dropbox.js seems to set `content` to `null` rather than to an empty
                // buffer when reading an empty file. Not sure why this is.

                if (content === null) {
                  buffer$$1 = emptyBuffer();
                } else {
                  buffer$$1 = arrayBuffer2Buffer(content);
                }

                var file = this$1._makeFile(path$$1, flags, dbStat, buffer$$1);

                return cb(null, file);
              }
            });
          };

          DropboxFileSystem.prototype._writeFileStrict = function _writeFileStrict(p, data, cb) {
            var this$1 = this;
            var parent = path.dirname(p);
            this.stat(parent, false, function (error, stat) {
              if (error) {
                cb(ApiError.FileError(ErrorCode.ENOENT, parent));
              } else {
                this$1._client.writeFile(p, data, function (error2, stat) {
                  if (error2) {
                    cb(this$1.convert(error2, p));
                  } else {
                    cb(null, stat);
                  }
                });
              }
            });
          };
          /**
           * Private
           * Returns a BrowserFS object representing the type of a Dropbox.js stat object
           */


          DropboxFileSystem.prototype._statType = function _statType(stat) {
            return stat.isFile ? FileType.FILE : FileType.DIRECTORY;
          };
          /**
           * Private
           * Returns a BrowserFS object representing a File, created from the data
           * returned by calls to the Dropbox API.
           */


          DropboxFileSystem.prototype._makeFile = function _makeFile(path$$1, flag, stat, buffer$$1) {
            var type = this._statType(stat);

            var stats = new Stats(type, stat.size);
            return new DropboxFile(this, path$$1, flag, stats, buffer$$1);
          };
          /**
           * Private
           * Delete a file or directory from Dropbox
           * isFile should reflect which call was made to remove the it (`unlink` or
           * `rmdir`). If this doesn't match what's actually at `path`, an error will be
           * returned
           */


          DropboxFileSystem.prototype._remove = function _remove(path$$1, cb, isFile) {
            var this$1 = this;

            this._client.stat(path$$1, function (error, stat) {
              if (error) {
                cb(this$1.convert(error, path$$1));
              } else {
                if (stat.isFile && !isFile) {
                  cb(ApiError.FileError(ErrorCode.ENOTDIR, path$$1));
                } else if (!stat.isFile && isFile) {
                  cb(ApiError.FileError(ErrorCode.EISDIR, path$$1));
                } else {
                  this$1._client.remove(path$$1, function (error) {
                    if (error) {
                      cb(this$1.convert(error, path$$1));
                    } else {
                      cb(null);
                    }
                  });
                }
              }
            });
          };
          /**
           * Delete a file
           */


          DropboxFileSystem.prototype.unlink = function unlink(path$$1, cb) {
            this._remove(path$$1, cb, true);
          };
          /**
           * Delete a directory
           */


          DropboxFileSystem.prototype.rmdir = function rmdir(path$$1, cb) {
            this._remove(path$$1, cb, false);
          };
          /**
           * Create a directory
           */


          DropboxFileSystem.prototype.mkdir = function mkdir(p, mode, cb) {
            var this$1 = this; // Dropbox.js' client.mkdir() behaves like `mkdir -p`, i.e. it creates a
            // directory and all its ancestors if they don't exist.
            // Node's fs.mkdir() behaves like `mkdir`, i.e. it throws an error if an attempt
            // is made to create a directory without a parent.
            // To handle this inconsistency, a check for the existence of `path`'s parent
            // must be performed before it is created, and an error thrown if it does
            // not exist

            var parent = path.dirname(p);

            this._client.stat(parent, function (error, stat) {
              if (error) {
                cb(this$1.convert(error, parent));
              } else {
                this$1._client.mkdir(p, function (error) {
                  if (error) {
                    cb(ApiError.FileError(ErrorCode.EEXIST, p));
                  } else {
                    cb(null);
                  }
                });
              }
            });
          };
          /**
           * Get the names of the files in a directory
           */


          DropboxFileSystem.prototype.readdir = function readdir(path$$1, cb) {
            var this$1 = this;

            this._client.readdir(path$$1, function (error, files) {
              if (error) {
                return cb(this$1.convert(error));
              } else {
                return cb(null, files);
              }
            });
          };
          /**
           * Converts a Dropbox-JS error into a BFS error.
           */


          DropboxFileSystem.prototype.convert = function convert(err, path$$1) {
            if (path$$1 === void 0) path$$1 = null;
            var errorCode = errorCodeLookup[err.status];

            if (errorCode === undefined) {
              errorCode = ErrorCode.EIO;
            }

            if (!path$$1) {
              return new ApiError(errorCode);
            } else {
              return ApiError.FileError(errorCode, path$$1);
            }
          };

          return DropboxFileSystem;
        }(BaseFileSystem);

        DropboxFileSystem.Name = "Dropbox";
        DropboxFileSystem.Options = {
          client: {
            type: "object",
            description: "An *authenticated* Dropbox client. Must be from the 0.10 JS SDK.",
            validator: function (opt, cb) {
              if (opt.isAuthenticated && opt.isAuthenticated()) {
                cb();
              } else {
                cb(new ApiError(ErrorCode.EINVAL, "'client' option must be an authenticated Dropbox client from the v0.10 JS SDK."));
              }
            }
          }
        };
        /**
         * @hidden
         */

        function convertError(e, path$$1) {
          if (path$$1 === void 0) path$$1 = '';
          var errno = e.errno;
          var parent = e.node;
          var paths = [];

          while (parent) {
            paths.unshift(parent.name);

            if (parent === parent.parent) {
              break;
            }

            parent = parent.parent;
          }

          return new ApiError(errno, ErrorStrings[errno], paths.length > 0 ? '/' + paths.join('/') : path$$1);
        }

        var EmscriptenFile = function (BaseFile$$1) {
          function EmscriptenFile(_fs, _FS, _path, _stream) {
            BaseFile$$1.call(this);
            this._fs = _fs;
            this._FS = _FS;
            this._path = _path;
            this._stream = _stream;
          }

          if (BaseFile$$1) EmscriptenFile.__proto__ = BaseFile$$1;
          EmscriptenFile.prototype = Object.create(BaseFile$$1 && BaseFile$$1.prototype);
          EmscriptenFile.prototype.constructor = EmscriptenFile;

          EmscriptenFile.prototype.getPos = function getPos() {
            return undefined;
          };

          EmscriptenFile.prototype.close = function close(cb) {
            var err = null;

            try {
              this.closeSync();
            } catch (e) {
              err = e;
            } finally {
              cb(err);
            }
          };

          EmscriptenFile.prototype.closeSync = function closeSync() {
            try {
              this._FS.close(this._stream);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.stat = function stat(cb) {
            try {
              cb(null, this.statSync());
            } catch (e) {
              cb(e);
            }
          };

          EmscriptenFile.prototype.statSync = function statSync() {
            try {
              return this._fs.statSync(this._path, false);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.truncate = function truncate(len, cb) {
            var err = null;

            try {
              this.truncateSync(len);
            } catch (e) {
              err = e;
            } finally {
              cb(err);
            }
          };

          EmscriptenFile.prototype.truncateSync = function truncateSync(len) {
            try {
              this._FS.ftruncate(this._stream.fd, len);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.write = function write(buffer$$1, offset, length, position, cb) {
            try {
              cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
            } catch (e) {
              cb(e);
            }
          };

          EmscriptenFile.prototype.writeSync = function writeSync(buffer$$1, offset, length, position) {
            try {
              var u8 = buffer2Uint8array(buffer$$1); // Emscripten is particular about what position is set to.

              var emPosition = position === null ? undefined : position;
              return this._FS.write(this._stream, u8, offset, length, emPosition);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.read = function read(buffer$$1, offset, length, position, cb) {
            try {
              cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
            } catch (e) {
              cb(e);
            }
          };

          EmscriptenFile.prototype.readSync = function readSync(buffer$$1, offset, length, position) {
            try {
              var u8 = buffer2Uint8array(buffer$$1); // Emscripten is particular about what position is set to.

              var emPosition = position === null ? undefined : position;
              return this._FS.read(this._stream, u8, offset, length, emPosition);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.sync = function sync(cb) {
            // NOP.
            cb();
          };

          EmscriptenFile.prototype.syncSync = function syncSync() {// NOP.
          };

          EmscriptenFile.prototype.chown = function chown(uid, gid, cb) {
            var err = null;

            try {
              this.chownSync(uid, gid);
            } catch (e) {
              err = e;
            } finally {
              cb(err);
            }
          };

          EmscriptenFile.prototype.chownSync = function chownSync(uid, gid) {
            try {
              this._FS.fchown(this._stream.fd, uid, gid);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.chmod = function chmod(mode, cb) {
            var err = null;

            try {
              this.chmodSync(mode);
            } catch (e) {
              err = e;
            } finally {
              cb(err);
            }
          };

          EmscriptenFile.prototype.chmodSync = function chmodSync(mode) {
            try {
              this._FS.fchmod(this._stream.fd, mode);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.utimes = function utimes(atime, mtime, cb) {
            var err = null;

            try {
              this.utimesSync(atime, mtime);
            } catch (e) {
              err = e;
            } finally {
              cb(err);
            }
          };

          EmscriptenFile.prototype.utimesSync = function utimesSync(atime, mtime) {
            this._fs.utimesSync(this._path, atime, mtime);
          };

          return EmscriptenFile;
        }(BaseFile);
        /**
         * Mounts an Emscripten file system into the BrowserFS file system.
         */


        var EmscriptenFileSystem = function (SynchronousFileSystem$$1) {
          function EmscriptenFileSystem(_FS) {
            SynchronousFileSystem$$1.call(this);
            this._FS = _FS;
          }

          if (SynchronousFileSystem$$1) EmscriptenFileSystem.__proto__ = SynchronousFileSystem$$1;
          EmscriptenFileSystem.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
          EmscriptenFileSystem.prototype.constructor = EmscriptenFileSystem;
          /**
           * Create an EmscriptenFileSystem instance with the given options.
           */

          EmscriptenFileSystem.Create = function Create(opts, cb) {
            cb(null, new EmscriptenFileSystem(opts.FS));
          };

          EmscriptenFileSystem.isAvailable = function isAvailable() {
            return true;
          };

          EmscriptenFileSystem.prototype.getName = function getName() {
            return this._FS.DB_NAME();
          };

          EmscriptenFileSystem.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          EmscriptenFileSystem.prototype.supportsLinks = function supportsLinks() {
            return true;
          };

          EmscriptenFileSystem.prototype.supportsProps = function supportsProps() {
            return true;
          };

          EmscriptenFileSystem.prototype.supportsSynch = function supportsSynch() {
            return true;
          };

          EmscriptenFileSystem.prototype.renameSync = function renameSync(oldPath, newPath) {
            try {
              this._FS.rename(oldPath, newPath);
            } catch (e) {
              if (e.errno === ErrorCode.ENOENT) {
                throw convertError(e, this.existsSync(oldPath) ? newPath : oldPath);
              } else {
                throw convertError(e);
              }
            }
          };

          EmscriptenFileSystem.prototype.statSync = function statSync(p, isLstat) {
            try {
              var stats = isLstat ? this._FS.lstat(p) : this._FS.stat(p);
              var itemType = this.modeToFileType(stats.mode);
              return new Stats(itemType, stats.size, stats.mode, stats.atime, stats.mtime, stats.ctime);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.openSync = function openSync(p, flag, mode) {
            try {
              var stream = this._FS.open(p, flag.getFlagString(), mode);

              if (this._FS.isDir(stream.node.mode)) {
                this._FS.close(stream);

                throw ApiError.EISDIR(p);
              }

              return new EmscriptenFile(this, this._FS, p, stream);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.unlinkSync = function unlinkSync(p) {
            try {
              this._FS.unlink(p);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.rmdirSync = function rmdirSync(p) {
            try {
              this._FS.rmdir(p);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.mkdirSync = function mkdirSync(p, mode) {
            try {
              this._FS.mkdir(p, mode);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.readdirSync = function readdirSync(p) {
            try {
              // Emscripten returns items for '.' and '..'. Node does not.
              return this._FS.readdir(p).filter(function (p) {
                return p !== '.' && p !== '..';
              });
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.truncateSync = function truncateSync(p, len) {
            try {
              this._FS.truncate(p, len);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.readFileSync = function readFileSync(p, encoding, flag) {
            try {
              var data = this._FS.readFile(p, {
                flags: flag.getFlagString()
              });

              var buff = uint8Array2Buffer(data);

              if (encoding) {
                return buff.toString(encoding);
              } else {
                return buff;
              }
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.writeFileSync = function writeFileSync(p, data, encoding, flag, mode) {
            try {
              if (encoding) {
                data = Buffer.from(data, encoding);
              }

              var u8 = buffer2Uint8array(data);

              this._FS.writeFile(p, u8, {
                flags: flag.getFlagString(),
                encoding: 'binary'
              });

              this._FS.chmod(p, mode);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
            try {
              isLchmod ? this._FS.lchmod(p, mode) : this._FS.chmod(p, mode);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
            try {
              isLchown ? this._FS.lchown(p, uid, gid) : this._FS.chown(p, uid, gid);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
            try {
              this._FS.symlink(srcpath, dstpath);
            } catch (e) {
              throw convertError(e);
            }
          };

          EmscriptenFileSystem.prototype.readlinkSync = function readlinkSync(p) {
            try {
              return this._FS.readlink(p);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.utimesSync = function utimesSync(p, atime, mtime) {
            try {
              this._FS.utime(p, atime.getTime(), mtime.getTime());
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.modeToFileType = function modeToFileType(mode) {
            if (this._FS.isDir(mode)) {
              return FileType.DIRECTORY;
            } else if (this._FS.isFile(mode)) {
              return FileType.FILE;
            } else if (this._FS.isLink(mode)) {
              return FileType.SYMLINK;
            } else {
              throw ApiError.EPERM("Invalid mode: " + mode);
            }
          };

          return EmscriptenFileSystem;
        }(SynchronousFileSystem);

        EmscriptenFileSystem.Name = "EmscriptenFileSystem";
        EmscriptenFileSystem.Options = {
          FS: {
            type: "object",
            description: "The Emscripten file system to use (the `FS` variable)"
          }
        };
        /**
         * The FolderAdapter file system wraps a file system, and scopes all interactions to a subfolder of that file system.
         *
         * Example: Given a file system `foo` with folder `bar` and file `bar/baz`...
         *
         * ```javascript
         * BrowserFS.configure({
         *   fs: "FolderAdapter",
         *   options: {
         *     folder: "bar",
         *     wrapped: foo
         *   }
         * }, function(e) {
         *   var fs = BrowserFS.BFSRequire('fs');
         *   fs.readdirSync('/'); // ['baz']
         * });
         * ```
         */

        var FolderAdapter = function (BaseFileSystem$$1) {
          function FolderAdapter(folder, wrapped) {
            BaseFileSystem$$1.call(this);
            this._folder = folder;
            this._wrapped = wrapped;
          }

          if (BaseFileSystem$$1) FolderAdapter.__proto__ = BaseFileSystem$$1;
          FolderAdapter.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          FolderAdapter.prototype.constructor = FolderAdapter;
          /**
           * Creates a FolderAdapter instance with the given options.
           */

          FolderAdapter.Create = function Create(opts, cb) {
            cb(null, new FolderAdapter(opts.folder, opts.wrapped));
          };

          FolderAdapter.isAvailable = function isAvailable() {
            return true;
          };
          /**
           * Initialize the file system. Ensures that the wrapped file system
           * has the given folder.
           */


          FolderAdapter.prototype.initialize = function initialize(cb) {
            var this$1 = this;

            this._wrapped.exists(this._folder, function (exists) {
              if (exists) {
                cb();
              } else if (this$1._wrapped.isReadOnly()) {
                cb(ApiError.ENOENT(this$1._folder));
              } else {
                this$1._wrapped.mkdir(this$1._folder, 0x1ff, cb);
              }
            });
          };

          FolderAdapter.prototype.getName = function getName() {
            return this._wrapped.getName();
          };

          FolderAdapter.prototype.isReadOnly = function isReadOnly() {
            return this._wrapped.isReadOnly();
          };

          FolderAdapter.prototype.supportsProps = function supportsProps() {
            return this._wrapped.supportsProps();
          };

          FolderAdapter.prototype.supportsSynch = function supportsSynch() {
            return this._wrapped.supportsSynch();
          };

          FolderAdapter.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          return FolderAdapter;
        }(BaseFileSystem);

        FolderAdapter.Name = "FolderAdapter";
        FolderAdapter.Options = {
          folder: {
            type: "string",
            description: "The folder to use as the root directory"
          },
          wrapped: {
            type: "object",
            description: "The file system to wrap"
          }
        };
        /**
         * @hidden
         */

        function translateError(folder, e) {
          if (e !== null && typeof e === 'object') {
            var err = e;
            var p = err.path;

            if (p) {
              p = '/' + path.relative(folder, p);
              err.message = err.message.replace(err.path, p);
              err.path = p;
            }
          }

          return e;
        }
        /**
         * @hidden
         */


        function wrapCallback(folder, cb) {
          if (typeof cb === 'function') {
            return function (err) {
              if (arguments.length > 0) {
                arguments[0] = translateError(folder, err);
              }

              cb.apply(null, arguments);
            };
          } else {
            return cb;
          }
        }
        /**
         * @hidden
         */


        function wrapFunction(name, wrapFirst, wrapSecond) {
          if (name.slice(name.length - 4) !== 'Sync') {
            // Async function. Translate error in callback.
            return function () {
              if (arguments.length > 0) {
                if (wrapFirst) {
                  arguments[0] = path.join(this._folder, arguments[0]);
                }

                if (wrapSecond) {
                  arguments[1] = path.join(this._folder, arguments[1]);
                }

                arguments[arguments.length - 1] = wrapCallback(this._folder, arguments[arguments.length - 1]);
              }

              return this._wrapped[name].apply(this._wrapped, arguments);
            };
          } else {
            // Sync function. Translate error in catch.
            return function () {
              try {
                if (wrapFirst) {
                  arguments[0] = path.join(this._folder, arguments[0]);
                }

                if (wrapSecond) {
                  arguments[1] = path.join(this._folder, arguments[1]);
                }

                return this._wrapped[name].apply(this._wrapped, arguments);
              } catch (e) {
                throw translateError(this._folder, e);
              }
            };
          }
        } // First argument is a path.


        ['diskSpace', 'stat', 'statSync', 'open', 'openSync', 'unlink', 'unlinkSync', 'rmdir', 'rmdirSync', 'mkdir', 'mkdirSync', 'readdir', 'readdirSync', 'exists', 'existsSync', 'realpath', 'realpathSync', 'truncate', 'truncateSync', 'readFile', 'readFileSync', 'writeFile', 'writeFileSync', 'appendFile', 'appendFileSync', 'chmod', 'chmodSync', 'chown', 'chownSync', 'utimes', 'utimesSync', 'readlink', 'readlinkSync'].forEach(function (name) {
          FolderAdapter.prototype[name] = wrapFunction(name, true, false);
        }); // First and second arguments are paths.

        ['rename', 'renameSync', 'link', 'linkSync', 'symlink', 'symlinkSync'].forEach(function (name) {
          FolderAdapter.prototype[name] = wrapFunction(name, true, true);
        });
        /**
         * @hidden
         */

        var toExport;

        if (typeof window !== 'undefined') {
          toExport = window;
        } else if (typeof self !== 'undefined') {
          toExport = self;
        } else {
          toExport = global;
        }

        var global$1 = toExport;
        /**
         * @hidden
         */

        function isDirectoryEntry(entry) {
          return entry.isDirectory;
        }
        /**
         * @hidden
         */


        var _getFS = global$1.webkitRequestFileSystem || global$1.requestFileSystem || null;
        /**
         * @hidden
         */


        function _requestQuota(type, size, success, errorCallback) {
          // We cast navigator and window to '<any>' because everything here is
          // nonstandard functionality, despite the fact that Chrome has the only
          // implementation of the HTML5FS and is likely driving the standardization
          // process. Thus, these objects defined off of navigator and window are not
          // present in the DefinitelyTyped TypeScript typings for FileSystem.
          if (typeof navigator['webkitPersistentStorage'] !== 'undefined') {
            switch (type) {
              case global$1.PERSISTENT:
                navigator.webkitPersistentStorage.requestQuota(size, success, errorCallback);
                break;

              case global$1.TEMPORARY:
                navigator.webkitTemporaryStorage.requestQuota(size, success, errorCallback);
                break;

              default:
                errorCallback(new TypeError("Invalid storage type: " + type));
                break;
            }
          } else {
            global$1.webkitStorageInfo.requestQuota(type, size, success, errorCallback);
          }
        }
        /**
         * @hidden
         */


        function _toArray(list) {
          return Array.prototype.slice.call(list || [], 0);
        }
        /**
         * Converts the given DOMError into an appropriate ApiError.
         * @url https://developer.mozilla.org/en-US/docs/Web/API/DOMError
         * @hidden
         */


        function convertError$1(err, p, expectedDir) {
          switch (err.name) {
            /* The user agent failed to create a file or directory due to the existence of a file or
                directory with the same path.  */
            case "PathExistsError":
              return ApiError.EEXIST(p);

            /* The operation failed because it would cause the application to exceed its storage quota.  */

            case 'QuotaExceededError':
              return ApiError.FileError(ErrorCode.ENOSPC, p);

            /*  A required file or directory could not be found at the time an operation was processed.   */

            case 'NotFoundError':
              return ApiError.ENOENT(p);

            /* This is a security error code to be used in situations not covered by any other error codes.
                - A required file was unsafe for access within a Web application
                - Too many calls are being made on filesystem resources */

            case 'SecurityError':
              return ApiError.FileError(ErrorCode.EACCES, p);

            /* The modification requested was illegal. Examples of invalid modifications include moving a
                directory into its own child, moving a file into its parent directory without changing its name,
                or copying a directory to a path occupied by a file.  */

            case 'InvalidModificationError':
              return ApiError.FileError(ErrorCode.EPERM, p);

            /* The user has attempted to look up a file or directory, but the Entry found is of the wrong type
                [e.g. is a DirectoryEntry when the user requested a FileEntry].  */

            case 'TypeMismatchError':
              return ApiError.FileError(expectedDir ? ErrorCode.ENOTDIR : ErrorCode.EISDIR, p);

            /* A path or URL supplied to the API was malformed.  */

            case "EncodingError":
            /* An operation depended on state cached in an interface object, but that state that has changed
                since it was read from disk.  */

            case "InvalidStateError":
            /* The user attempted to write to a file or directory which could not be modified due to the state
                of the underlying filesystem.  */

            case "NoModificationAllowedError":
            default:
              return ApiError.FileError(ErrorCode.EINVAL, p);
          }
        } // A note about getFile and getDirectory options:
        // These methods are called at numerous places in this file, and are passed
        // some combination of these two options:
        //   - create: If true, the entry will be created if it doesn't exist.
        //             If false, an error will be thrown if it doesn't exist.
        //   - exclusive: If true, only create the entry if it doesn't already exist,
        //                and throw an error if it does.


        var HTML5FSFile = function (PreloadFile$$1) {
          function HTML5FSFile(fs, entry, path$$1, flag, stat, contents) {
            PreloadFile$$1.call(this, fs, path$$1, flag, stat, contents);
            this._entry = entry;
          }

          if (PreloadFile$$1) HTML5FSFile.__proto__ = PreloadFile$$1;
          HTML5FSFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          HTML5FSFile.prototype.constructor = HTML5FSFile;

          HTML5FSFile.prototype.sync = function sync(cb) {
            var this$1 = this;

            if (!this.isDirty()) {
              return cb();
            }

            this._entry.createWriter(function (writer) {
              var buffer$$1 = this$1.getBuffer();
              var blob = new Blob([buffer2ArrayBuffer(buffer$$1)]);
              var length = blob.size;

              writer.onwriteend = function (err) {
                writer.onwriteend = null;
                writer.onerror = null;
                writer.truncate(length);
                this$1.resetDirty();
                cb();
              };

              writer.onerror = function (err) {
                cb(convertError$1(err, this$1.getPath(), false));
              };

              writer.write(blob);
            });
          };

          HTML5FSFile.prototype.close = function close(cb) {
            this.sync(cb);
          };

          return HTML5FSFile;
        }(PreloadFile);
        /**
         * A read-write filesystem backed by the HTML5 FileSystem API.
         *
         * As the HTML5 FileSystem is only implemented in Blink, this interface is
         * only available in Chrome.
         */


        var HTML5FS = function (BaseFileSystem$$1) {
          function HTML5FS(size, type, deprecateMsg) {
            if (size === void 0) size = 5;
            if (type === void 0) type = global$1.PERSISTENT;
            if (deprecateMsg === void 0) deprecateMsg = true;
            BaseFileSystem$$1.call(this); // Convert MB to bytes.

            this.size = 1024 * 1024 * size;
            this.type = type;
            deprecationMessage(deprecateMsg, HTML5FS.Name, {
              size: size,
              type: type
            });
          }

          if (BaseFileSystem$$1) HTML5FS.__proto__ = BaseFileSystem$$1;
          HTML5FS.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          HTML5FS.prototype.constructor = HTML5FS;
          /**
           * Creates an HTML5FS instance with the given options.
           */

          HTML5FS.Create = function Create(opts, cb) {
            var fs = new HTML5FS(opts.size, opts.type, false);
            fs.allocate(function (e) {
              return e ? cb(e) : cb(null, fs);
            }, false);
          };

          HTML5FS.isAvailable = function isAvailable() {
            return !!_getFS;
          };

          HTML5FS.prototype.getName = function getName() {
            return HTML5FS.Name;
          };

          HTML5FS.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          HTML5FS.prototype.supportsSymlinks = function supportsSymlinks() {
            return false;
          };

          HTML5FS.prototype.supportsProps = function supportsProps() {
            return false;
          };

          HTML5FS.prototype.supportsSynch = function supportsSynch() {
            return false;
          };
          /**
           * **Deprecated. Please use Create() method instead to create and allocate an HTML5FS.**
           *
           * Requests a storage quota from the browser to back this FS.
           * Must be called before file system can be used!
           */


          HTML5FS.prototype.allocate = function allocate(cb, deprecateMsg) {
            var this$1 = this;
            if (cb === void 0) cb = function () {};
            if (deprecateMsg === void 0) deprecateMsg = true;

            if (deprecateMsg) {
              console.warn("[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use 'HTML5FS.Create({type: " + this.type + ", size: " + this.size + "}, cb)' to create and allocate HTML5FS instances.");
            }

            var success = function (fs) {
              this$1.fs = fs;
              cb();
            };

            var error = function (err) {
              cb(convertError$1(err, "/", true));
            };

            if (this.type === global$1.PERSISTENT) {
              _requestQuota(this.type, this.size, function (granted) {
                _getFS(this$1.type, granted, success, error);
              }, error);
            } else {
              _getFS(this.type, this.size, success, error);
            }
          };
          /**
           * Deletes everything in the FS. Used for testing.
           * Karma clears the storage after you quit it but not between runs of the test
           * suite, and the tests expect an empty FS every time.
           */


          HTML5FS.prototype.empty = function empty(mainCb) {
            // Get a list of all entries in the root directory to delete them
            this._readdir('/', function (err, entries) {
              if (err) {
                console.error('Failed to empty FS');
                mainCb(err);
              } else {
                // Called when every entry has been operated on
                var finished = function (er) {
                  if (err) {
                    console.error("Failed to empty FS");
                    mainCb(err);
                  } else {
                    mainCb();
                  }
                }; // Removes files and recursively removes directories


                var deleteEntry = function (entry, cb) {
                  var succ = function () {
                    cb();
                  };

                  var error = function (err) {
                    cb(convertError$1(err, entry.fullPath, !entry.isDirectory));
                  };

                  if (isDirectoryEntry(entry)) {
                    entry.removeRecursively(succ, error);
                  } else {
                    entry.remove(succ, error);
                  }
                }; // Loop through the entries and remove them, then call the callback
                // when they're all finished.


                eachLimit(entries, deleteEntry, finished);
              }
            });
          };

          HTML5FS.prototype.rename = function rename(oldPath, newPath, cb) {
            var this$1 = this;
            var semaphore = 2;
            var successCount = 0;
            var root = this.fs.root;
            var currentPath = oldPath;

            var error = function (err) {
              if (--semaphore <= 0) {
                cb(convertError$1(err, currentPath, false));
              }
            };

            var success = function (file) {
              if (++successCount === 2) {
                return cb(new ApiError(ErrorCode.EINVAL, "Something was identified as both a file and a directory. This should never happen."));
              } // SPECIAL CASE: If newPath === oldPath, and the path exists, then
              // this operation trivially succeeds.


              if (oldPath === newPath) {
                return cb();
              } // Get the new parent directory.


              currentPath = path.dirname(newPath);
              root.getDirectory(currentPath, {}, function (parentDir) {
                currentPath = path.basename(newPath);
                file.moveTo(parentDir, currentPath, function (entry) {
                  cb();
                }, function (err) {
                  // SPECIAL CASE: If oldPath is a directory, and newPath is a
                  // file, rename should delete the file and perform the move.
                  if (file.isDirectory) {
                    currentPath = newPath; // Unlink only works on files. Try to delete newPath.

                    this$1.unlink(newPath, function (e) {
                      if (e) {
                        // newPath is probably a directory.
                        error(err);
                      } else {
                        // Recur, now that newPath doesn't exist.
                        this$1.rename(oldPath, newPath, cb);
                      }
                    });
                  } else {
                    error(err);
                  }
                });
              }, error);
            }; // We don't know if oldPath is a *file* or a *directory*, and there's no
            // way to stat items. So launch both requests, see which one succeeds.


            root.getFile(oldPath, {}, success, error);
            root.getDirectory(oldPath, {}, success, error);
          };

          HTML5FS.prototype.stat = function stat(path$$1, isLstat, cb) {
            var this$1 = this; // Throw an error if the entry doesn't exist, because then there's nothing
            // to stat.

            var opts = {
              create: false
            }; // Called when the path has been successfully loaded as a file.

            var loadAsFile = function (entry) {
              var fileFromEntry = function (file) {
                var stat = new Stats(FileType.FILE, file.size);
                cb(null, stat);
              };

              entry.file(fileFromEntry, failedToLoad);
            }; // Called when the path has been successfully loaded as a directory.


            var loadAsDir = function (dir$$1) {
              // Directory entry size can't be determined from the HTML5 FS API, and is
              // implementation-dependant anyway, so a dummy value is used.
              var size = 4096;
              var stat = new Stats(FileType.DIRECTORY, size);
              cb(null, stat);
            }; // Called when the path couldn't be opened as a directory or a file.


            var failedToLoad = function (err) {
              cb(convertError$1(err, path$$1, false
              /* Unknown / irrelevant */
              ));
            }; // Called when the path couldn't be opened as a file, but might still be a
            // directory.


            var failedToLoadAsFile = function () {
              this$1.fs.root.getDirectory(path$$1, opts, loadAsDir, failedToLoad);
            }; // No method currently exists to determine whether a path refers to a
            // directory or a file, so this implementation tries both and uses the first
            // one that succeeds.


            this.fs.root.getFile(path$$1, opts, loadAsFile, failedToLoadAsFile);
          };

          HTML5FS.prototype.open = function open(p, flags, mode, cb) {
            var this$1 = this; // XXX: err is a DOMError

            var error = function (err) {
              if (err.name === 'InvalidModificationError' && flags.isExclusive()) {
                cb(ApiError.EEXIST(p));
              } else {
                cb(convertError$1(err, p, false));
              }
            };

            this.fs.root.getFile(p, {
              create: flags.pathNotExistsAction() === ActionType.CREATE_FILE,
              exclusive: flags.isExclusive()
            }, function (entry) {
              // Try to fetch corresponding file.
              entry.file(function (file) {
                var reader = new FileReader();

                reader.onloadend = function (event) {
                  var bfsFile = this$1._makeFile(p, entry, flags, file, reader.result);

                  cb(null, bfsFile);
                };

                reader.onerror = function (ev) {
                  error(reader.error);
                };

                reader.readAsArrayBuffer(file);
              }, error);
            }, error);
          };

          HTML5FS.prototype.unlink = function unlink(path$$1, cb) {
            this._remove(path$$1, cb, true);
          };

          HTML5FS.prototype.rmdir = function rmdir(path$$1, cb) {
            var this$1 = this; // Check if directory is non-empty, first.

            this.readdir(path$$1, function (e, files) {
              if (e) {
                cb(e);
              } else if (files.length > 0) {
                cb(ApiError.ENOTEMPTY(path$$1));
              } else {
                this$1._remove(path$$1, cb, false);
              }
            });
          };

          HTML5FS.prototype.mkdir = function mkdir(path$$1, mode, cb) {
            // Create the directory, but throw an error if it already exists, as per
            // mkdir(1)
            var opts = {
              create: true,
              exclusive: true
            };

            var success = function (dir$$1) {
              cb();
            };

            var error = function (err) {
              cb(convertError$1(err, path$$1, true));
            };

            this.fs.root.getDirectory(path$$1, opts, success, error);
          };
          /**
           * Map _readdir's list of `FileEntry`s to their names and return that.
           */


          HTML5FS.prototype.readdir = function readdir(path$$1, cb) {
            this._readdir(path$$1, function (e, entries) {
              if (entries) {
                var rv = [];

                for (var i = 0, list = entries; i < list.length; i += 1) {
                  var entry = list[i];
                  rv.push(entry.name);
                }

                cb(null, rv);
              } else {
                return cb(e);
              }
            });
          };
          /**
           * Returns a BrowserFS object representing a File.
           */


          HTML5FS.prototype._makeFile = function _makeFile(path$$1, entry, flag, stat, data) {
            if (data === void 0) data = new ArrayBuffer(0);
            var stats = new Stats(FileType.FILE, stat.size);
            var buffer$$1 = arrayBuffer2Buffer(data);
            return new HTML5FSFile(this, entry, path$$1, flag, stats, buffer$$1);
          };
          /**
           * Returns an array of `FileEntry`s. Used internally by empty and readdir.
           */


          HTML5FS.prototype._readdir = function _readdir(path$$1, cb) {
            var error = function (err) {
              cb(convertError$1(err, path$$1, true));
            }; // Grab the requested directory.


            this.fs.root.getDirectory(path$$1, {
              create: false
            }, function (dirEntry) {
              var reader = dirEntry.createReader();
              var entries = []; // Call the reader.readEntries() until no more results are returned.

              var readEntries = function () {
                reader.readEntries(function (results) {
                  if (results.length) {
                    entries = entries.concat(_toArray(results));
                    readEntries();
                  } else {
                    cb(null, entries);
                  }
                }, error);
              };

              readEntries();
            }, error);
          };
          /**
           * Delete a file or directory from the file system
           * isFile should reflect which call was made to remove the it (`unlink` or
           * `rmdir`). If this doesn't match what's actually at `path`, an error will be
           * returned
           */


          HTML5FS.prototype._remove = function _remove(path$$1, cb, isFile) {
            var success = function (entry) {
              var succ = function () {
                cb();
              };

              var err = function (err) {
                cb(convertError$1(err, path$$1, !isFile));
              };

              entry.remove(succ, err);
            };

            var error = function (err) {
              cb(convertError$1(err, path$$1, !isFile));
            }; // Deleting the entry, so don't create it


            var opts = {
              create: false
            };

            if (isFile) {
              this.fs.root.getFile(path$$1, opts, success, error);
            } else {
              this.fs.root.getDirectory(path$$1, opts, success, error);
            }
          };

          return HTML5FS;
        }(BaseFileSystem);

        HTML5FS.Name = "HTML5FS";
        HTML5FS.Options = {
          size: {
            type: "number",
            optional: true,
            description: "Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."
          },
          type: {
            type: "number",
            optional: true,
            description: "window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."
          }
        };
        /**
         * Generic inode definition that can easily be serialized.
         */

        var Inode = function Inode(id, size, mode, atime, mtime, ctime) {
          this.id = id;
          this.size = size;
          this.mode = mode;
          this.atime = atime;
          this.mtime = mtime;
          this.ctime = ctime;
        };
        /**
         * Converts the buffer into an Inode.
         */


        Inode.fromBuffer = function fromBuffer(buffer$$1) {
          if (buffer$$1 === undefined) {
            throw new Error("NO");
          }

          return new Inode(buffer$$1.toString('ascii', 30), buffer$$1.readUInt32LE(0), buffer$$1.readUInt16LE(4), buffer$$1.readDoubleLE(6), buffer$$1.readDoubleLE(14), buffer$$1.readDoubleLE(22));
        };
        /**
         * Handy function that converts the Inode to a Node Stats object.
         */


        Inode.prototype.toStats = function toStats() {
          return new Stats((this.mode & 0xF000) === FileType.DIRECTORY ? FileType.DIRECTORY : FileType.FILE, this.size, this.mode, new Date(this.atime), new Date(this.mtime), new Date(this.ctime));
        };
        /**
         * Get the size of this Inode, in bytes.
         */


        Inode.prototype.getSize = function getSize() {
          // ASSUMPTION: ID is ASCII (1 byte per char).
          return 30 + this.id.length;
        };
        /**
         * Writes the inode into the start of the buffer.
         */


        Inode.prototype.toBuffer = function toBuffer(buff) {
          if (buff === void 0) buff = Buffer.alloc(this.getSize());
          buff.writeUInt32LE(this.size, 0);
          buff.writeUInt16LE(this.mode, 4);
          buff.writeDoubleLE(this.atime, 6);
          buff.writeDoubleLE(this.mtime, 14);
          buff.writeDoubleLE(this.ctime, 22);
          buff.write(this.id, 30, this.id.length, 'ascii');
          return buff;
        };
        /**
         * Updates the Inode using information from the stats object. Used by file
         * systems at sync time, e.g.:
         * - Program opens file and gets a File object.
         * - Program mutates file. File object is responsible for maintaining
         *   metadata changes locally -- typically in a Stats object.
         * - Program closes file. File object's metadata changes are synced with the
         *   file system.
         * @return True if any changes have occurred.
         */


        Inode.prototype.update = function update(stats) {
          var hasChanged = false;

          if (this.size !== stats.size) {
            this.size = stats.size;
            hasChanged = true;
          }

          if (this.mode !== stats.mode) {
            this.mode = stats.mode;
            hasChanged = true;
          }

          var atimeMs = stats.atime.getTime();

          if (this.atime !== atimeMs) {
            this.atime = atimeMs;
            hasChanged = true;
          }

          var mtimeMs = stats.mtime.getTime();

          if (this.mtime !== mtimeMs) {
            this.mtime = mtimeMs;
            hasChanged = true;
          }

          var ctimeMs = stats.ctime.getTime();

          if (this.ctime !== ctimeMs) {
            this.ctime = ctimeMs;
            hasChanged = true;
          }

          return hasChanged;
        }; // XXX: Copied from Stats. Should reconcile these two into something more
        //  compact.

        /**
         * @return [Boolean] True if this item is a file.
         */


        Inode.prototype.isFile = function isFile() {
          return (this.mode & 0xF000) === FileType.FILE;
        };
        /**
         * @return [Boolean] True if this item is a directory.
         */


        Inode.prototype.isDirectory = function isDirectory() {
          return (this.mode & 0xF000) === FileType.DIRECTORY;
        };
        /**
         * @hidden
         */


        var ROOT_NODE_ID = "/";
        /**
         * @hidden
         */

        var emptyDirNode = null;
        /**
         * Returns an empty directory node.
         * @hidden
         */

        function getEmptyDirNode() {
          if (emptyDirNode) {
            return emptyDirNode;
          }

          return emptyDirNode = Buffer.from("{}");
        }
        /**
         * Generates a random ID.
         * @hidden
         */


        function GenerateRandomID() {
          // From http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c === 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
          });
        }
        /**
         * Helper function. Checks if 'e' is defined. If so, it triggers the callback
         * with 'e' and returns false. Otherwise, returns true.
         * @hidden
         */


        function noError(e, cb) {
          if (e) {
            cb(e);
            return false;
          }

          return true;
        }
        /**
         * Helper function. Checks if 'e' is defined. If so, it aborts the transaction,
         * triggers the callback with 'e', and returns false. Otherwise, returns true.
         * @hidden
         */


        function noErrorTx(e, tx, cb) {
          if (e) {
            tx.abort(function () {
              cb(e);
            });
            return false;
          }

          return true;
        }
        /**
         * A simple RW transaction for simple synchronous key-value stores.
         */


        var SimpleSyncRWTransaction = function SimpleSyncRWTransaction(store) {
          this.store = store;
          /**
           * Stores data in the keys we modify prior to modifying them.
           * Allows us to roll back commits.
           */

          this.originalData = {};
          /**
           * List of keys modified in this transaction, if any.
           */

          this.modifiedKeys = [];
        };

        SimpleSyncRWTransaction.prototype.get = function get(key) {
          var val = this.store.get(key);
          this.stashOldValue(key, val);
          return val;
        };

        SimpleSyncRWTransaction.prototype.put = function put(key, data, overwrite) {
          this.markModified(key);
          return this.store.put(key, data, overwrite);
        };

        SimpleSyncRWTransaction.prototype.del = function del(key) {
          this.markModified(key);
          this.store.del(key);
        };

        SimpleSyncRWTransaction.prototype.commit = function commit() {};

        SimpleSyncRWTransaction.prototype.abort = function abort() {
          var this$1 = this; // Rollback old values.

          for (var i = 0, list = this$1.modifiedKeys; i < list.length; i += 1) {
            var key = list[i];
            var value = this$1.originalData[key];

            if (!value) {
              // Key didn't exist.
              this$1.store.del(key);
            } else {
              // Key existed. Store old value.
              this$1.store.put(key, value, true);
            }
          }
        };
        /**
         * Stashes given key value pair into `originalData` if it doesn't already
         * exist. Allows us to stash values the program is requesting anyway to
         * prevent needless `get` requests if the program modifies the data later
         * on during the transaction.
         */


        SimpleSyncRWTransaction.prototype.stashOldValue = function stashOldValue(key, value) {
          // Keep only the earliest value in the transaction.
          if (!this.originalData.hasOwnProperty(key)) {
            this.originalData[key] = value;
          }
        };
        /**
         * Marks the given key as modified, and stashes its value if it has not been
         * stashed already.
         */


        SimpleSyncRWTransaction.prototype.markModified = function markModified(key) {
          if (this.modifiedKeys.indexOf(key) === -1) {
            this.modifiedKeys.push(key);

            if (!this.originalData.hasOwnProperty(key)) {
              this.originalData[key] = this.store.get(key);
            }
          }
        };

        var SyncKeyValueFile = function (PreloadFile$$1) {
          function SyncKeyValueFile(_fs, _path, _flag, _stat, contents) {
            PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
          }

          if (PreloadFile$$1) SyncKeyValueFile.__proto__ = PreloadFile$$1;
          SyncKeyValueFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          SyncKeyValueFile.prototype.constructor = SyncKeyValueFile;

          SyncKeyValueFile.prototype.syncSync = function syncSync() {
            if (this.isDirty()) {
              this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());

              this.resetDirty();
            }
          };

          SyncKeyValueFile.prototype.closeSync = function closeSync() {
            this.syncSync();
          };

          return SyncKeyValueFile;
        }(PreloadFile);
        /**
         * A "Synchronous key-value file system". Stores data to/retrieves data from an
         * underlying key-value store.
         *
         * We use a unique ID for each node in the file system. The root node has a
         * fixed ID.
         * @todo Introduce Node ID caching.
         * @todo Check modes.
         */


        var SyncKeyValueFileSystem = function (SynchronousFileSystem$$1) {
          function SyncKeyValueFileSystem(options) {
            SynchronousFileSystem$$1.call(this);
            this.store = options.store; // INVARIANT: Ensure that the root exists.

            this.makeRootDirectory();
          }

          if (SynchronousFileSystem$$1) SyncKeyValueFileSystem.__proto__ = SynchronousFileSystem$$1;
          SyncKeyValueFileSystem.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
          SyncKeyValueFileSystem.prototype.constructor = SyncKeyValueFileSystem;

          SyncKeyValueFileSystem.isAvailable = function isAvailable() {
            return true;
          };

          SyncKeyValueFileSystem.prototype.getName = function getName() {
            return this.store.name();
          };

          SyncKeyValueFileSystem.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          SyncKeyValueFileSystem.prototype.supportsSymlinks = function supportsSymlinks() {
            return false;
          };

          SyncKeyValueFileSystem.prototype.supportsProps = function supportsProps() {
            return false;
          };

          SyncKeyValueFileSystem.prototype.supportsSynch = function supportsSynch() {
            return true;
          };
          /**
           * Delete all contents stored in the file system.
           */


          SyncKeyValueFileSystem.prototype.empty = function empty() {
            this.store.clear(); // INVARIANT: Root always exists.

            this.makeRootDirectory();
          };

          SyncKeyValueFileSystem.prototype.renameSync = function renameSync(oldPath, newPath) {
            var tx = this.store.beginTransaction('readwrite'),
                oldParent = path.dirname(oldPath),
                oldName = path.basename(oldPath),
                newParent = path.dirname(newPath),
                newName = path.basename(newPath),
                // Remove oldPath from parent's directory listing.
            oldDirNode = this.findINode(tx, oldParent),
                oldDirList = this.getDirListing(tx, oldParent, oldDirNode);

            if (!oldDirList[oldName]) {
              throw ApiError.ENOENT(oldPath);
            }

            var nodeId = oldDirList[oldName];
            delete oldDirList[oldName]; // Invariant: Can't move a folder inside itself.
            // This funny little hack ensures that the check passes only if oldPath
            // is a subpath of newParent. We append '/' to avoid matching folders that
            // are a substring of the bottom-most folder in the path.

            if ((newParent + '/').indexOf(oldPath + '/') === 0) {
              throw new ApiError(ErrorCode.EBUSY, oldParent);
            } // Add newPath to parent's directory listing.


            var newDirNode, newDirList;

            if (newParent === oldParent) {
              // Prevent us from re-grabbing the same directory listing, which still
              // contains oldName.
              newDirNode = oldDirNode;
              newDirList = oldDirList;
            } else {
              newDirNode = this.findINode(tx, newParent);
              newDirList = this.getDirListing(tx, newParent, newDirNode);
            }

            if (newDirList[newName]) {
              // If it's a file, delete it.
              var newNameNode = this.getINode(tx, newPath, newDirList[newName]);

              if (newNameNode.isFile()) {
                try {
                  tx.del(newNameNode.id);
                  tx.del(newDirList[newName]);
                } catch (e) {
                  tx.abort();
                  throw e;
                }
              } else {
                // If it's a directory, throw a permissions error.
                throw ApiError.EPERM(newPath);
              }
            }

            newDirList[newName] = nodeId; // Commit the two changed directory listings.

            try {
              tx.put(oldDirNode.id, Buffer.from(JSON.stringify(oldDirList)), true);
              tx.put(newDirNode.id, Buffer.from(JSON.stringify(newDirList)), true);
            } catch (e) {
              tx.abort();
              throw e;
            }

            tx.commit();
          };

          SyncKeyValueFileSystem.prototype.statSync = function statSync(p, isLstat) {
            // Get the inode to the item, convert it into a Stats object.
            return this.findINode(this.store.beginTransaction('readonly'), p).toStats();
          };

          SyncKeyValueFileSystem.prototype.createFileSync = function createFileSync(p, flag, mode) {
            var tx = this.store.beginTransaction('readwrite'),
                data = emptyBuffer(),
                newFile = this.commitNewFile(tx, p, FileType.FILE, mode, data); // Open the file.

            return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);
          };

          SyncKeyValueFileSystem.prototype.openFileSync = function openFileSync(p, flag) {
            var tx = this.store.beginTransaction('readonly'),
                node = this.findINode(tx, p),
                data = tx.get(node.id);

            if (data === undefined) {
              throw ApiError.ENOENT(p);
            }

            return new SyncKeyValueFile(this, p, flag, node.toStats(), data);
          };

          SyncKeyValueFileSystem.prototype.unlinkSync = function unlinkSync(p) {
            this.removeEntry(p, false);
          };

          SyncKeyValueFileSystem.prototype.rmdirSync = function rmdirSync(p) {
            // Check first if directory is empty.
            if (this.readdirSync(p).length > 0) {
              throw ApiError.ENOTEMPTY(p);
            } else {
              this.removeEntry(p, true);
            }
          };

          SyncKeyValueFileSystem.prototype.mkdirSync = function mkdirSync(p, mode) {
            var tx = this.store.beginTransaction('readwrite'),
                data = Buffer.from('{}');
            this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data);
          };

          SyncKeyValueFileSystem.prototype.readdirSync = function readdirSync(p) {
            var tx = this.store.beginTransaction('readonly');
            return Object.keys(this.getDirListing(tx, p, this.findINode(tx, p)));
          };

          SyncKeyValueFileSystem.prototype._syncSync = function _syncSync(p, data, stats) {
            // @todo Ensure mtime updates properly, and use that to determine if a data
            //       update is required.
            var tx = this.store.beginTransaction('readwrite'),
                // We use the _findInode helper because we actually need the INode id.
            fileInodeId = this._findINode(tx, path.dirname(p), path.basename(p)),
                fileInode = this.getINode(tx, p, fileInodeId),
                inodeChanged = fileInode.update(stats);

            try {
              // Sync data.
              tx.put(fileInode.id, data, true); // Sync metadata.

              if (inodeChanged) {
                tx.put(fileInodeId, fileInode.toBuffer(), true);
              }
            } catch (e) {
              tx.abort();
              throw e;
            }

            tx.commit();
          };
          /**
           * Checks if the root directory exists. Creates it if it doesn't.
           */


          SyncKeyValueFileSystem.prototype.makeRootDirectory = function makeRootDirectory() {
            var tx = this.store.beginTransaction('readwrite');

            if (tx.get(ROOT_NODE_ID) === undefined) {
              // Create new inode.
              var currTime = new Date().getTime(),
                  // Mode 0666
              dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime); // If the root doesn't exist, the first random ID shouldn't exist,
              // either.

              tx.put(dirInode.id, getEmptyDirNode(), false);
              tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);
              tx.commit();
            }
          };
          /**
           * Helper function for findINode.
           * @param parent The parent directory of the file we are attempting to find.
           * @param filename The filename of the inode we are attempting to find, minus
           *   the parent.
           * @return string The ID of the file's inode in the file system.
           */


          SyncKeyValueFileSystem.prototype._findINode = function _findINode(tx, parent, filename) {
            var this$1 = this;

            var readDirectory = function (inode) {
              // Get the root's directory listing.
              var dirList = this$1.getDirListing(tx, parent, inode); // Get the file's ID.

              if (dirList[filename]) {
                return dirList[filename];
              } else {
                throw ApiError.ENOENT(path.resolve(parent, filename));
              }
            };

            if (parent === '/') {
              if (filename === '') {
                // BASE CASE #1: Return the root's ID.
                return ROOT_NODE_ID;
              } else {
                // BASE CASE #2: Find the item in the root ndoe.
                return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));
              }
            } else {
              return readDirectory(this.getINode(tx, parent + path.sep + filename, this._findINode(tx, path.dirname(parent), path.basename(parent))));
            }
          };
          /**
           * Finds the Inode of the given path.
           * @param p The path to look up.
           * @return The Inode of the path p.
           * @todo memoize/cache
           */


          SyncKeyValueFileSystem.prototype.findINode = function findINode(tx, p) {
            return this.getINode(tx, p, this._findINode(tx, path.dirname(p), path.basename(p)));
          };
          /**
           * Given the ID of a node, retrieves the corresponding Inode.
           * @param tx The transaction to use.
           * @param p The corresponding path to the file (used for error messages).
           * @param id The ID to look up.
           */


          SyncKeyValueFileSystem.prototype.getINode = function getINode(tx, p, id) {
            var inode = tx.get(id);

            if (inode === undefined) {
              throw ApiError.ENOENT(p);
            }

            return Inode.fromBuffer(inode);
          };
          /**
           * Given the Inode of a directory, retrieves the corresponding directory
           * listing.
           */


          SyncKeyValueFileSystem.prototype.getDirListing = function getDirListing(tx, p, inode) {
            if (!inode.isDirectory()) {
              throw ApiError.ENOTDIR(p);
            }

            var data = tx.get(inode.id);

            if (data === undefined) {
              throw ApiError.ENOENT(p);
            }

            return JSON.parse(data.toString());
          };
          /**
           * Creates a new node under a random ID. Retries 5 times before giving up in
           * the exceedingly unlikely chance that we try to reuse a random GUID.
           * @return The GUID that the data was stored under.
           */


          SyncKeyValueFileSystem.prototype.addNewNode = function addNewNode(tx, data) {
            var retries = 0;
            var currId;

            while (retries < 5) {
              try {
                currId = GenerateRandomID();
                tx.put(currId, data, false);
                return currId;
              } catch (e) {// Ignore and reroll.
              }
            }

            throw new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.');
          };
          /**
           * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
           * the given mode.
           * Note: This will commit the transaction.
           * @param p The path to the new file.
           * @param type The type of the new file.
           * @param mode The mode to create the new file with.
           * @param data The data to store at the file's data node.
           * @return The Inode for the new file.
           */


          SyncKeyValueFileSystem.prototype.commitNewFile = function commitNewFile(tx, p, type, mode, data) {
            var parentDir = path.dirname(p),
                fname = path.basename(p),
                parentNode = this.findINode(tx, parentDir),
                dirListing = this.getDirListing(tx, parentDir, parentNode),
                currTime = new Date().getTime(); // Invariant: The root always exists.
            // If we don't check this prior to taking steps below, we will create a
            // file with name '' in root should p == '/'.

            if (p === '/') {
              throw ApiError.EEXIST(p);
            } // Check if file already exists.


            if (dirListing[fname]) {
              throw ApiError.EEXIST(p);
            }

            var fileNode;

            try {
              // Commit data.
              var dataId = this.addNewNode(tx, data);
              fileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime); // Commit file node.

              var fileNodeId = this.addNewNode(tx, fileNode.toBuffer()); // Update and commit parent directory listing.

              dirListing[fname] = fileNodeId;
              tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true);
            } catch (e) {
              tx.abort();
              throw e;
            }

            tx.commit();
            return fileNode;
          };
          /**
           * Remove all traces of the given path from the file system.
           * @param p The path to remove from the file system.
           * @param isDir Does the path belong to a directory, or a file?
           * @todo Update mtime.
           */


          SyncKeyValueFileSystem.prototype.removeEntry = function removeEntry(p, isDir) {
            var tx = this.store.beginTransaction('readwrite'),
                parent = path.dirname(p),
                parentNode = this.findINode(tx, parent),
                parentListing = this.getDirListing(tx, parent, parentNode),
                fileName = path.basename(p);

            if (!parentListing[fileName]) {
              throw ApiError.ENOENT(p);
            } // Remove from directory listing of parent.


            var fileNodeId = parentListing[fileName];
            delete parentListing[fileName]; // Get file inode.

            var fileNode = this.getINode(tx, p, fileNodeId);

            if (!isDir && fileNode.isDirectory()) {
              throw ApiError.EISDIR(p);
            } else if (isDir && !fileNode.isDirectory()) {
              throw ApiError.ENOTDIR(p);
            }

            try {
              // Delete data.
              tx.del(fileNode.id); // Delete node.

              tx.del(fileNodeId); // Update directory listing.

              tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true);
            } catch (e) {
              tx.abort();
              throw e;
            } // Success.


            tx.commit();
          };

          return SyncKeyValueFileSystem;
        }(SynchronousFileSystem);

        var AsyncKeyValueFile = function (PreloadFile$$1) {
          function AsyncKeyValueFile(_fs, _path, _flag, _stat, contents) {
            PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
          }

          if (PreloadFile$$1) AsyncKeyValueFile.__proto__ = PreloadFile$$1;
          AsyncKeyValueFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          AsyncKeyValueFile.prototype.constructor = AsyncKeyValueFile;

          AsyncKeyValueFile.prototype.sync = function sync(cb) {
            var this$1 = this;

            if (this.isDirty()) {
              this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), function (e) {
                if (!e) {
                  this$1.resetDirty();
                }

                cb(e);
              });
            } else {
              cb();
            }
          };

          AsyncKeyValueFile.prototype.close = function close(cb) {
            this.sync(cb);
          };

          return AsyncKeyValueFile;
        }(PreloadFile);
        /**
         * An "Asynchronous key-value file system". Stores data to/retrieves data from
         * an underlying asynchronous key-value store.
         */


        var AsyncKeyValueFileSystem = function (BaseFileSystem$$1) {
          function AsyncKeyValueFileSystem() {
            BaseFileSystem$$1.apply(this, arguments);
          }

          if (BaseFileSystem$$1) AsyncKeyValueFileSystem.__proto__ = BaseFileSystem$$1;
          AsyncKeyValueFileSystem.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          AsyncKeyValueFileSystem.prototype.constructor = AsyncKeyValueFileSystem;

          AsyncKeyValueFileSystem.isAvailable = function isAvailable() {
            return true;
          };
          /**
           * Initializes the file system. Typically called by subclasses' async
           * constructors.
           */


          AsyncKeyValueFileSystem.prototype.init = function init(store, cb) {
            this.store = store; // INVARIANT: Ensure that the root exists.

            this.makeRootDirectory(cb);
          };

          AsyncKeyValueFileSystem.prototype.getName = function getName() {
            return this.store.name();
          };

          AsyncKeyValueFileSystem.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          AsyncKeyValueFileSystem.prototype.supportsSymlinks = function supportsSymlinks() {
            return false;
          };

          AsyncKeyValueFileSystem.prototype.supportsProps = function supportsProps() {
            return false;
          };

          AsyncKeyValueFileSystem.prototype.supportsSynch = function supportsSynch() {
            return false;
          };
          /**
           * Delete all contents stored in the file system.
           */


          AsyncKeyValueFileSystem.prototype.empty = function empty(cb) {
            var this$1 = this;
            this.store.clear(function (e) {
              if (noError(e, cb)) {
                // INVARIANT: Root always exists.
                this$1.makeRootDirectory(cb);
              }
            });
          };

          AsyncKeyValueFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
            var this$1 = this;
            var tx = this.store.beginTransaction('readwrite');
            var oldParent = path.dirname(oldPath),
                oldName = path.basename(oldPath);
            var newParent = path.dirname(newPath),
                newName = path.basename(newPath);
            var inodes = {};
            var lists = {};
            var errorOccurred = false; // Invariant: Can't move a folder inside itself.
            // This funny little hack ensures that the check passes only if oldPath
            // is a subpath of newParent. We append '/' to avoid matching folders that
            // are a substring of the bottom-most folder in the path.

            if ((newParent + '/').indexOf(oldPath + '/') === 0) {
              return cb(new ApiError(ErrorCode.EBUSY, oldParent));
            }
            /**
             * Responsible for Phase 2 of the rename operation: Modifying and
             * committing the directory listings. Called once we have successfully
             * retrieved both the old and new parent's inodes and listings.
             */


            var theOleSwitcharoo = function () {
              // Sanity check: Ensure both paths are present, and no error has occurred.
              if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {
                return;
              }

              var oldParentList = lists[oldParent],
                  oldParentINode = inodes[oldParent],
                  newParentList = lists[newParent],
                  newParentINode = inodes[newParent]; // Delete file from old parent.

              if (!oldParentList[oldName]) {
                cb(ApiError.ENOENT(oldPath));
              } else {
                var fileId = oldParentList[oldName];
                delete oldParentList[oldName]; // Finishes off the renaming process by adding the file to the new
                // parent.

                var completeRename = function () {
                  newParentList[newName] = fileId; // Commit old parent's list.

                  tx.put(oldParentINode.id, Buffer.from(JSON.stringify(oldParentList)), true, function (e) {
                    if (noErrorTx(e, tx, cb)) {
                      if (oldParent === newParent) {
                        // DONE!
                        tx.commit(cb);
                      } else {
                        // Commit new parent's list.
                        tx.put(newParentINode.id, Buffer.from(JSON.stringify(newParentList)), true, function (e) {
                          if (noErrorTx(e, tx, cb)) {
                            tx.commit(cb);
                          }
                        });
                      }
                    }
                  });
                };

                if (newParentList[newName]) {
                  // 'newPath' already exists. Check if it's a file or a directory, and
                  // act accordingly.
                  this$1.getINode(tx, newPath, newParentList[newName], function (e, inode) {
                    if (noErrorTx(e, tx, cb)) {
                      if (inode.isFile()) {
                        // Delete the file and continue.
                        tx.del(inode.id, function (e) {
                          if (noErrorTx(e, tx, cb)) {
                            tx.del(newParentList[newName], function (e) {
                              if (noErrorTx(e, tx, cb)) {
                                completeRename();
                              }
                            });
                          }
                        });
                      } else {
                        // Can't overwrite a directory using rename.
                        tx.abort(function (e) {
                          cb(ApiError.EPERM(newPath));
                        });
                      }
                    }
                  });
                } else {
                  completeRename();
                }
              }
            };
            /**
             * Grabs a path's inode and directory listing, and shoves it into the
             * inodes and lists hashes.
             */


            var processInodeAndListings = function (p) {
              this$1.findINodeAndDirListing(tx, p, function (e, node, dirList) {
                if (e) {
                  if (!errorOccurred) {
                    errorOccurred = true;
                    tx.abort(function () {
                      cb(e);
                    });
                  } // If error has occurred already, just stop here.

                } else {
                  inodes[p] = node;
                  lists[p] = dirList;
                  theOleSwitcharoo();
                }
              });
            };

            processInodeAndListings(oldParent);

            if (oldParent !== newParent) {
              processInodeAndListings(newParent);
            }
          };

          AsyncKeyValueFileSystem.prototype.stat = function stat(p, isLstat, cb) {
            var tx = this.store.beginTransaction('readonly');
            this.findINode(tx, p, function (e, inode) {
              if (noError(e, cb)) {
                cb(null, inode.toStats());
              }
            });
          };

          AsyncKeyValueFileSystem.prototype.createFile = function createFile(p, flag, mode, cb) {
            var this$1 = this;
            var tx = this.store.beginTransaction('readwrite'),
                data = emptyBuffer();
            this.commitNewFile(tx, p, FileType.FILE, mode, data, function (e, newFile) {
              if (noError(e, cb)) {
                cb(null, new AsyncKeyValueFile(this$1, p, flag, newFile.toStats(), data));
              }
            });
          };

          AsyncKeyValueFileSystem.prototype.openFile = function openFile(p, flag, cb) {
            var this$1 = this;
            var tx = this.store.beginTransaction('readonly'); // Step 1: Grab the file's inode.

            this.findINode(tx, p, function (e, inode) {
              if (noError(e, cb)) {
                // Step 2: Grab the file's data.
                tx.get(inode.id, function (e, data) {
                  if (noError(e, cb)) {
                    if (data === undefined) {
                      cb(ApiError.ENOENT(p));
                    } else {
                      cb(null, new AsyncKeyValueFile(this$1, p, flag, inode.toStats(), data));
                    }
                  }
                });
              }
            });
          };

          AsyncKeyValueFileSystem.prototype.unlink = function unlink(p, cb) {
            this.removeEntry(p, false, cb);
          };

          AsyncKeyValueFileSystem.prototype.rmdir = function rmdir(p, cb) {
            var this$1 = this; // Check first if directory is empty.

            this.readdir(p, function (err, files) {
              if (err) {
                cb(err);
              } else if (files.length > 0) {
                cb(ApiError.ENOTEMPTY(p));
              } else {
                this$1.removeEntry(p, true, cb);
              }
            });
          };

          AsyncKeyValueFileSystem.prototype.mkdir = function mkdir(p, mode, cb) {
            var tx = this.store.beginTransaction('readwrite'),
                data = Buffer.from('{}');
            this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data, cb);
          };

          AsyncKeyValueFileSystem.prototype.readdir = function readdir(p, cb) {
            var this$1 = this;
            var tx = this.store.beginTransaction('readonly');
            this.findINode(tx, p, function (e, inode) {
              if (noError(e, cb)) {
                this$1.getDirListing(tx, p, inode, function (e, dirListing) {
                  if (noError(e, cb)) {
                    cb(null, Object.keys(dirListing));
                  }
                });
              }
            });
          };

          AsyncKeyValueFileSystem.prototype._sync = function _sync(p, data, stats, cb) {
            var this$1 = this; // @todo Ensure mtime updates properly, and use that to determine if a data
            //       update is required.

            var tx = this.store.beginTransaction('readwrite'); // Step 1: Get the file node's ID.

            this._findINode(tx, path.dirname(p), path.basename(p), function (e, fileInodeId) {
              if (noErrorTx(e, tx, cb)) {
                // Step 2: Get the file inode.
                this$1.getINode(tx, p, fileInodeId, function (e, fileInode) {
                  if (noErrorTx(e, tx, cb)) {
                    var inodeChanged = fileInode.update(stats); // Step 3: Sync the data.

                    tx.put(fileInode.id, data, true, function (e) {
                      if (noErrorTx(e, tx, cb)) {
                        // Step 4: Sync the metadata (if it changed)!
                        if (inodeChanged) {
                          tx.put(fileInodeId, fileInode.toBuffer(), true, function (e) {
                            if (noErrorTx(e, tx, cb)) {
                              tx.commit(cb);
                            }
                          });
                        } else {
                          // No need to sync metadata; return.
                          tx.commit(cb);
                        }
                      }
                    });
                  }
                });
              }
            });
          };
          /**
           * Checks if the root directory exists. Creates it if it doesn't.
           */


          AsyncKeyValueFileSystem.prototype.makeRootDirectory = function makeRootDirectory(cb) {
            var tx = this.store.beginTransaction('readwrite');
            tx.get(ROOT_NODE_ID, function (e, data) {
              if (e || data === undefined) {
                // Create new inode.
                var currTime = new Date().getTime(),
                    // Mode 0666
                dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime); // If the root doesn't exist, the first random ID shouldn't exist,
                // either.

                tx.put(dirInode.id, getEmptyDirNode(), false, function (e) {
                  if (noErrorTx(e, tx, cb)) {
                    tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, function (e) {
                      if (e) {
                        tx.abort(function () {
                          cb(e);
                        });
                      } else {
                        tx.commit(cb);
                      }
                    });
                  }
                });
              } else {
                // We're good.
                tx.commit(cb);
              }
            });
          };
          /**
           * Helper function for findINode.
           * @param parent The parent directory of the file we are attempting to find.
           * @param filename The filename of the inode we are attempting to find, minus
           *   the parent.
           * @param cb Passed an error or the ID of the file's inode in the file system.
           */


          AsyncKeyValueFileSystem.prototype._findINode = function _findINode(tx, parent, filename, cb) {
            var this$1 = this;

            var handleDirectoryListings = function (e, inode, dirList) {
              if (e) {
                cb(e);
              } else if (dirList[filename]) {
                cb(null, dirList[filename]);
              } else {
                cb(ApiError.ENOENT(path.resolve(parent, filename)));
              }
            };

            if (parent === '/') {
              if (filename === '') {
                // BASE CASE #1: Return the root's ID.
                cb(null, ROOT_NODE_ID);
              } else {
                // BASE CASE #2: Find the item in the root node.
                this.getINode(tx, parent, ROOT_NODE_ID, function (e, inode) {
                  if (noError(e, cb)) {
                    this$1.getDirListing(tx, parent, inode, function (e, dirList) {
                      // handle_directory_listings will handle e for us.
                      handleDirectoryListings(e, inode, dirList);
                    });
                  }
                });
              }
            } else {
              // Get the parent directory's INode, and find the file in its directory
              // listing.
              this.findINodeAndDirListing(tx, parent, handleDirectoryListings);
            }
          };
          /**
           * Finds the Inode of the given path.
           * @param p The path to look up.
           * @param cb Passed an error or the Inode of the path p.
           * @todo memoize/cache
           */


          AsyncKeyValueFileSystem.prototype.findINode = function findINode(tx, p, cb) {
            var this$1 = this;

            this._findINode(tx, path.dirname(p), path.basename(p), function (e, id) {
              if (noError(e, cb)) {
                this$1.getINode(tx, p, id, cb);
              }
            });
          };
          /**
           * Given the ID of a node, retrieves the corresponding Inode.
           * @param tx The transaction to use.
           * @param p The corresponding path to the file (used for error messages).
           * @param id The ID to look up.
           * @param cb Passed an error or the inode under the given id.
           */


          AsyncKeyValueFileSystem.prototype.getINode = function getINode(tx, p, id, cb) {
            tx.get(id, function (e, data) {
              if (noError(e, cb)) {
                if (data === undefined) {
                  cb(ApiError.ENOENT(p));
                } else {
                  cb(null, Inode.fromBuffer(data));
                }
              }
            });
          };
          /**
           * Given the Inode of a directory, retrieves the corresponding directory
           * listing.
           */


          AsyncKeyValueFileSystem.prototype.getDirListing = function getDirListing(tx, p, inode, cb) {
            if (!inode.isDirectory()) {
              cb(ApiError.ENOTDIR(p));
            } else {
              tx.get(inode.id, function (e, data) {
                if (noError(e, cb)) {
                  try {
                    cb(null, JSON.parse(data.toString()));
                  } catch (e) {
                    // Occurs when data is undefined, or corresponds to something other
                    // than a directory listing. The latter should never occur unless
                    // the file system is corrupted.
                    cb(ApiError.ENOENT(p));
                  }
                }
              });
            }
          };
          /**
           * Given a path to a directory, retrieves the corresponding INode and
           * directory listing.
           */


          AsyncKeyValueFileSystem.prototype.findINodeAndDirListing = function findINodeAndDirListing(tx, p, cb) {
            var this$1 = this;
            this.findINode(tx, p, function (e, inode) {
              if (noError(e, cb)) {
                this$1.getDirListing(tx, p, inode, function (e, listing) {
                  if (noError(e, cb)) {
                    cb(null, inode, listing);
                  }
                });
              }
            });
          };
          /**
           * Adds a new node under a random ID. Retries 5 times before giving up in
           * the exceedingly unlikely chance that we try to reuse a random GUID.
           * @param cb Passed an error or the GUID that the data was stored under.
           */


          AsyncKeyValueFileSystem.prototype.addNewNode = function addNewNode(tx, data, cb) {
            var retries = 0,
                currId;

            var reroll = function () {
              if (++retries === 5) {
                // Max retries hit. Return with an error.
                cb(new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.'));
              } else {
                // Try again.
                currId = GenerateRandomID();
                tx.put(currId, data, false, function (e, committed) {
                  if (e || !committed) {
                    reroll();
                  } else {
                    // Successfully stored under 'currId'.
                    cb(null, currId);
                  }
                });
              }
            };

            reroll();
          };
          /**
           * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
           * the given mode.
           * Note: This will commit the transaction.
           * @param p The path to the new file.
           * @param type The type of the new file.
           * @param mode The mode to create the new file with.
           * @param data The data to store at the file's data node.
           * @param cb Passed an error or the Inode for the new file.
           */


          AsyncKeyValueFileSystem.prototype.commitNewFile = function commitNewFile(tx, p, type, mode, data, cb) {
            var this$1 = this;
            var parentDir = path.dirname(p),
                fname = path.basename(p),
                currTime = new Date().getTime(); // Invariant: The root always exists.
            // If we don't check this prior to taking steps below, we will create a
            // file with name '' in root should p == '/'.

            if (p === '/') {
              return cb(ApiError.EEXIST(p));
            } // Let's build a pyramid of code!
            // Step 1: Get the parent directory's inode and directory listing


            this.findINodeAndDirListing(tx, parentDir, function (e, parentNode, dirListing) {
              if (noErrorTx(e, tx, cb)) {
                if (dirListing[fname]) {
                  // File already exists.
                  tx.abort(function () {
                    cb(ApiError.EEXIST(p));
                  });
                } else {
                  // Step 2: Commit data to store.
                  this$1.addNewNode(tx, data, function (e, dataId) {
                    if (noErrorTx(e, tx, cb)) {
                      // Step 3: Commit the file's inode to the store.
                      var fileInode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
                      this$1.addNewNode(tx, fileInode.toBuffer(), function (e, fileInodeId) {
                        if (noErrorTx(e, tx, cb)) {
                          // Step 4: Update parent directory's listing.
                          dirListing[fname] = fileInodeId;
                          tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true, function (e) {
                            if (noErrorTx(e, tx, cb)) {
                              // Step 5: Commit and return the new inode.
                              tx.commit(function (e) {
                                if (noErrorTx(e, tx, cb)) {
                                  cb(null, fileInode);
                                }
                              });
                            }
                          });
                        }
                      });
                    }
                  });
                }
              }
            });
          };
          /**
           * Remove all traces of the given path from the file system.
           * @param p The path to remove from the file system.
           * @param isDir Does the path belong to a directory, or a file?
           * @todo Update mtime.
           */


          AsyncKeyValueFileSystem.prototype.removeEntry = function removeEntry(p, isDir, cb) {
            var this$1 = this;
            var tx = this.store.beginTransaction('readwrite'),
                parent = path.dirname(p),
                fileName = path.basename(p); // Step 1: Get parent directory's node and directory listing.

            this.findINodeAndDirListing(tx, parent, function (e, parentNode, parentListing) {
              if (noErrorTx(e, tx, cb)) {
                if (!parentListing[fileName]) {
                  tx.abort(function () {
                    cb(ApiError.ENOENT(p));
                  });
                } else {
                  // Remove from directory listing of parent.
                  var fileNodeId = parentListing[fileName];
                  delete parentListing[fileName]; // Step 2: Get file inode.

                  this$1.getINode(tx, p, fileNodeId, function (e, fileNode) {
                    if (noErrorTx(e, tx, cb)) {
                      if (!isDir && fileNode.isDirectory()) {
                        tx.abort(function () {
                          cb(ApiError.EISDIR(p));
                        });
                      } else if (isDir && !fileNode.isDirectory()) {
                        tx.abort(function () {
                          cb(ApiError.ENOTDIR(p));
                        });
                      } else {
                        // Step 3: Delete data.
                        tx.del(fileNode.id, function (e) {
                          if (noErrorTx(e, tx, cb)) {
                            // Step 4: Delete node.
                            tx.del(fileNodeId, function (e) {
                              if (noErrorTx(e, tx, cb)) {
                                // Step 5: Update directory listing.
                                tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true, function (e) {
                                  if (noErrorTx(e, tx, cb)) {
                                    tx.commit(cb);
                                  }
                                });
                              }
                            });
                          }
                        });
                      }
                    }
                  });
                }
              }
            });
          };

          return AsyncKeyValueFileSystem;
        }(BaseFileSystem);
        /**
         * A simple in-memory key-value store backed by a JavaScript object.
         */


        var InMemoryStore = function InMemoryStore() {
          this.store = {};
        };

        InMemoryStore.prototype.name = function name() {
          return InMemoryFileSystem.Name;
        };

        InMemoryStore.prototype.clear = function clear() {
          this.store = {};
        };

        InMemoryStore.prototype.beginTransaction = function beginTransaction(type) {
          return new SimpleSyncRWTransaction(this);
        };

        InMemoryStore.prototype.get = function get(key) {
          return this.store[key];
        };

        InMemoryStore.prototype.put = function put(key, data, overwrite) {
          if (!overwrite && this.store.hasOwnProperty(key)) {
            return false;
          }

          this.store[key] = data;
          return true;
        };

        InMemoryStore.prototype.del = function del(key) {
          delete this.store[key];
        };
        /**
         * A simple in-memory file system backed by an InMemoryStore.
         * Files are not persisted across page loads.
         */


        var InMemoryFileSystem = function (SyncKeyValueFileSystem$$1) {
          function InMemoryFileSystem() {
            SyncKeyValueFileSystem$$1.call(this, {
              store: new InMemoryStore()
            });
          }

          if (SyncKeyValueFileSystem$$1) InMemoryFileSystem.__proto__ = SyncKeyValueFileSystem$$1;
          InMemoryFileSystem.prototype = Object.create(SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype);
          InMemoryFileSystem.prototype.constructor = InMemoryFileSystem;
          /**
           * Creates an InMemoryFileSystem instance.
           */

          InMemoryFileSystem.Create = function Create(options, cb) {
            cb(null, new InMemoryFileSystem());
          };

          return InMemoryFileSystem;
        }(SyncKeyValueFileSystem);

        InMemoryFileSystem.Name = "InMemory";
        InMemoryFileSystem.Options = {};
        /**
         * Get the indexedDB constructor for the current browser.
         * @hidden
         */

        var indexedDB = global$1.indexedDB || global$1.mozIndexedDB || global$1.webkitIndexedDB || global$1.msIndexedDB;
        /**
         * Converts a DOMException or a DOMError from an IndexedDB event into a
         * standardized BrowserFS API error.
         * @hidden
         */

        function convertError$2(e, message) {
          if (message === void 0) message = e.toString();

          switch (e.name) {
            case "NotFoundError":
              return new ApiError(ErrorCode.ENOENT, message);

            case "QuotaExceededError":
              return new ApiError(ErrorCode.ENOSPC, message);

            default:
              // The rest do not seem to map cleanly to standard error codes.
              return new ApiError(ErrorCode.EIO, message);
          }
        }
        /**
         * Produces a new onerror handler for IDB. Our errors are always fatal, so we
         * handle them generically: Call the user-supplied callback with a translated
         * version of the error, and let the error bubble up.
         * @hidden
         */


        function onErrorHandler(cb, code, message) {
          if (code === void 0) code = ErrorCode.EIO;
          if (message === void 0) message = null;
          return function (e) {
            // Prevent the error from canceling the transaction.
            e.preventDefault();
            cb(new ApiError(code, message !== null ? message : undefined));
          };
        }
        /**
         * @hidden
         */


        var IndexedDBROTransaction = function IndexedDBROTransaction(tx, store) {
          this.tx = tx;
          this.store = store;
        };

        IndexedDBROTransaction.prototype.get = function get(key, cb) {
          try {
            var r = this.store.get(key);
            r.onerror = onErrorHandler(cb);

            r.onsuccess = function (event) {
              // IDB returns the value 'undefined' when you try to get keys that
              // don't exist. The caller expects this behavior.
              var result = event.target.result;

              if (result === undefined) {
                cb(null, result);
              } else {
                // IDB data is stored as an ArrayBuffer
                cb(null, arrayBuffer2Buffer(result));
              }
            };
          } catch (e) {
            cb(convertError$2(e));
          }
        };
        /**
         * @hidden
         */


        var IndexedDBRWTransaction = function (IndexedDBROTransaction) {
          function IndexedDBRWTransaction(tx, store) {
            IndexedDBROTransaction.call(this, tx, store);
          }

          if (IndexedDBROTransaction) IndexedDBRWTransaction.__proto__ = IndexedDBROTransaction;
          IndexedDBRWTransaction.prototype = Object.create(IndexedDBROTransaction && IndexedDBROTransaction.prototype);
          IndexedDBRWTransaction.prototype.constructor = IndexedDBRWTransaction;

          IndexedDBRWTransaction.prototype.put = function put(key, data, overwrite, cb) {
            try {
              var arraybuffer = buffer2ArrayBuffer(data);
              var r;

              if (overwrite) {
                r = this.store.put(arraybuffer, key);
              } else {
                // 'add' will never overwrite an existing key.
                r = this.store.add(arraybuffer, key);
              } // XXX: NEED TO RETURN FALSE WHEN ADD HAS A KEY CONFLICT. NO ERROR.


              r.onerror = onErrorHandler(cb);

              r.onsuccess = function (event) {
                cb(null, true);
              };
            } catch (e) {
              cb(convertError$2(e));
            }
          };

          IndexedDBRWTransaction.prototype.del = function del(key, cb) {
            try {
              // NOTE: IE8 has a bug with identifiers named 'delete' unless used as a string
              // like this.
              // http://stackoverflow.com/a/26479152
              var r = this.store['delete'](key);
              r.onerror = onErrorHandler(cb);

              r.onsuccess = function (event) {
                cb();
              };
            } catch (e) {
              cb(convertError$2(e));
            }
          };

          IndexedDBRWTransaction.prototype.commit = function commit(cb) {
            // Return to the event loop to commit the transaction.
            setTimeout(cb, 0);
          };

          IndexedDBRWTransaction.prototype.abort = function abort(cb) {
            var _e = null;

            try {
              this.tx.abort();
            } catch (e) {
              _e = convertError$2(e);
            } finally {
              cb(_e);
            }
          };

          return IndexedDBRWTransaction;
        }(IndexedDBROTransaction);

        var IndexedDBStore = function IndexedDBStore(cb, storeName) {
          var this$1 = this;
          if (storeName === void 0) storeName = 'browserfs';
          this.storeName = storeName;
          var openReq = indexedDB.open(this.storeName, 1);

          openReq.onupgradeneeded = function (event) {
            var db = event.target.result; // Huh. This should never happen; we're at version 1. Why does another
            // database exist?

            if (db.objectStoreNames.contains(this$1.storeName)) {
              db.deleteObjectStore(this$1.storeName);
            }

            db.createObjectStore(this$1.storeName);
          };

          openReq.onsuccess = function (event) {
            this$1.db = event.target.result;
            cb(null, this$1);
          };

          openReq.onerror = onErrorHandler(cb, ErrorCode.EACCES);
        };

        IndexedDBStore.prototype.name = function name() {
          return IndexedDBFileSystem.Name + " - " + this.storeName;
        };

        IndexedDBStore.prototype.clear = function clear(cb) {
          try {
            var tx = this.db.transaction(this.storeName, 'readwrite'),
                objectStore = tx.objectStore(this.storeName),
                r = objectStore.clear();

            r.onsuccess = function (event) {
              // Use setTimeout to commit transaction.
              setTimeout(cb, 0);
            };

            r.onerror = onErrorHandler(cb);
          } catch (e) {
            cb(convertError$2(e));
          }
        };

        IndexedDBStore.prototype.beginTransaction = function beginTransaction(type) {
          if (type === void 0) type = 'readonly';
          var tx = this.db.transaction(this.storeName, type),
              objectStore = tx.objectStore(this.storeName);

          if (type === 'readwrite') {
            return new IndexedDBRWTransaction(tx, objectStore);
          } else if (type === 'readonly') {
            return new IndexedDBROTransaction(tx, objectStore);
          } else {
            throw new ApiError(ErrorCode.EINVAL, 'Invalid transaction type.');
          }
        };
        /**
         * A file system that uses the IndexedDB key value file system.
         */


        var IndexedDBFileSystem = function (AsyncKeyValueFileSystem$$1) {
          function IndexedDBFileSystem(cb, storeName, deprecateMsg) {
            var this$1 = this;
            if (deprecateMsg === void 0) deprecateMsg = true;
            AsyncKeyValueFileSystem$$1.call(this);
            this.store = new IndexedDBStore(function (e) {
              if (e) {
                cb(e);
              } else {
                this$1.init(this$1.store, function (e) {
                  cb(e, this$1);
                });
              }
            }, storeName);
            deprecationMessage(deprecateMsg, IndexedDBFileSystem.Name, {
              storeName: storeName
            });
          }

          if (AsyncKeyValueFileSystem$$1) IndexedDBFileSystem.__proto__ = AsyncKeyValueFileSystem$$1;
          IndexedDBFileSystem.prototype = Object.create(AsyncKeyValueFileSystem$$1 && AsyncKeyValueFileSystem$$1.prototype);
          IndexedDBFileSystem.prototype.constructor = IndexedDBFileSystem;
          /**
           * Constructs an IndexedDB file system with the given options.
           */

          IndexedDBFileSystem.Create = function Create(opts, cb) {
            // tslint:disable-next-line:no-unused-new
            new IndexedDBFileSystem(cb, opts.storeName, false); // tslint:enable-next-line:no-unused-new
          };

          IndexedDBFileSystem.isAvailable = function isAvailable() {
            // In Safari's private browsing mode, indexedDB.open returns NULL.
            // In Firefox, it throws an exception.
            // In Chrome, it "just works", and clears the database when you leave the page.
            // Untested: Opera, IE.
            try {
              return typeof indexedDB !== 'undefined' && null !== indexedDB.open("__browserfs_test__");
            } catch (e) {
              return false;
            }
          };

          return IndexedDBFileSystem;
        }(AsyncKeyValueFileSystem);

        IndexedDBFileSystem.Name = "IndexedDB";
        IndexedDBFileSystem.Options = {
          storeName: {
            type: "string",
            optional: true,
            description: "The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."
          }
        };
        /**
         * Some versions of FF and all versions of IE do not support the full range of
         * 16-bit numbers encoded as characters, as they enforce UTF-16 restrictions.
         * @url http://stackoverflow.com/questions/11170716/are-there-any-characters-that-are-not-allowed-in-localstorage/11173673#11173673
         * @hidden
         */

        var supportsBinaryString = false;
        var binaryEncoding;

        try {
          global$1.localStorage.setItem("__test__", String.fromCharCode(0xD800));
          supportsBinaryString = global$1.localStorage.getItem("__test__") === String.fromCharCode(0xD800);
        } catch (e) {
          // IE throws an exception.
          supportsBinaryString = false;
        }

        binaryEncoding = supportsBinaryString ? 'binary_string' : 'binary_string_ie';

        if (!Buffer.isEncoding(binaryEncoding)) {
          // Fallback for non BrowserFS implementations of buffer that lack a
          // binary_string format.
          binaryEncoding = "base64";
        }
        /**
         * A synchronous key-value store backed by localStorage.
         */


        var LocalStorageStore = function LocalStorageStore() {};

        LocalStorageStore.prototype.name = function name() {
          return LocalStorageFileSystem.Name;
        };

        LocalStorageStore.prototype.clear = function clear() {
          global$1.localStorage.clear();
        };

        LocalStorageStore.prototype.beginTransaction = function beginTransaction(type) {
          // No need to differentiate.
          return new SimpleSyncRWTransaction(this);
        };

        LocalStorageStore.prototype.get = function get(key) {
          try {
            var data = global$1.localStorage.getItem(key);

            if (data !== null) {
              return Buffer.from(data, binaryEncoding);
            }
          } catch (e) {} // Do nothing.
          // Key doesn't exist, or a failure occurred.


          return undefined;
        };

        LocalStorageStore.prototype.put = function put(key, data, overwrite) {
          try {
            if (!overwrite && global$1.localStorage.getItem(key) !== null) {
              // Don't want to overwrite the key!
              return false;
            }

            global$1.localStorage.setItem(key, data.toString(binaryEncoding));
            return true;
          } catch (e) {
            throw new ApiError(ErrorCode.ENOSPC, "LocalStorage is full.");
          }
        };

        LocalStorageStore.prototype.del = function del(key) {
          try {
            global$1.localStorage.removeItem(key);
          } catch (e) {
            throw new ApiError(ErrorCode.EIO, "Unable to delete key " + key + ": " + e);
          }
        };
        /**
         * A synchronous file system backed by localStorage. Connects our
         * LocalStorageStore to our SyncKeyValueFileSystem.
         */


        var LocalStorageFileSystem = function (SyncKeyValueFileSystem$$1) {
          function LocalStorageFileSystem() {
            SyncKeyValueFileSystem$$1.call(this, {
              store: new LocalStorageStore()
            });
          }

          if (SyncKeyValueFileSystem$$1) LocalStorageFileSystem.__proto__ = SyncKeyValueFileSystem$$1;
          LocalStorageFileSystem.prototype = Object.create(SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype);
          LocalStorageFileSystem.prototype.constructor = LocalStorageFileSystem;
          /**
           * Creates a LocalStorageFileSystem instance.
           */

          LocalStorageFileSystem.Create = function Create(options, cb) {
            cb(null, new LocalStorageFileSystem());
          };

          LocalStorageFileSystem.isAvailable = function isAvailable() {
            return typeof global$1.localStorage !== 'undefined';
          };

          return LocalStorageFileSystem;
        }(SyncKeyValueFileSystem);

        LocalStorageFileSystem.Name = "LocalStorage";
        LocalStorageFileSystem.Options = {};
        /**
         * The MountableFileSystem allows you to mount multiple backend types or
         * multiple instantiations of the same backend into a single file system tree.
         * The file systems do not need to know about each other; all interactions are
         * automatically facilitated through this interface.
         *
         * For example, if a file system is mounted at /mnt/blah, and a request came in
         * for /mnt/blah/foo.txt, the file system would see a request for /foo.txt.
         *
         * You can mount file systems when you configure the file system:
         * ```javascript
         * BrowserFS.configure({
         *   fs: "MountableFileSystem",
         *   options: {
         *     '/data': { fs: 'XmlHttpRequest', options: { index: "http://mysite.com/files/index.json" } },
         *     '/home': { fs: 'LocalStorage' }
         *   }
         * }, function(e) {
         *
         * });
         * ```
         *
         * For advanced users, you can also mount file systems *after* MFS is constructed:
         * ```javascript
         * BrowserFS.FileSystem.XmlHttpRequest.Create({
         *   index: "http://mysite.com/files/index.json"
         * }, function(e, xhrfs) {
         *   BrowserFS.FileSystem.MountableFileSystem.Create({
         *     '/data': xhrfs
         *   }, function(e, mfs) {
         *     BrowserFS.initialize(mfs);
         *
         *     // Added after-the-fact...
         *     BrowserFS.FileSystem.LocalStorage.Create(function(e, lsfs) {
         *       mfs.mount('/home', lsfs);
         *     });
         *   });
         * });
         * ```
         *
         * Since MountableFileSystem simply proxies requests to mounted file systems, it supports all of the operations that the mounted file systems support.
         *
         * With no mounted file systems, `MountableFileSystem` acts as a simple `InMemory` filesystem.
         */

        var MountableFileSystem = function (BaseFileSystem$$1) {
          function MountableFileSystem() {
            BaseFileSystem$$1.call(this); // Contains the list of mount points in mntMap, sorted by string length in decreasing order.
            // Ensures that we scan the most specific mount points for a match first, which lets us
            // nest mount points.

            this.mountList = [];
            this.mntMap = {}; // The InMemory file system serves purely to provide directory listings for
            // mounted file systems.

            this.rootFs = new InMemoryFileSystem();
          }

          if (BaseFileSystem$$1) MountableFileSystem.__proto__ = BaseFileSystem$$1;
          MountableFileSystem.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          MountableFileSystem.prototype.constructor = MountableFileSystem;
          /**
           * Creates a MountableFileSystem instance with the given options.
           */

          MountableFileSystem.Create = function Create(opts, cb) {
            var fs = new MountableFileSystem();
            Object.keys(opts).forEach(function (mountPoint) {
              fs.mount(mountPoint, opts[mountPoint]);
            });
            cb(null, fs);
          };

          MountableFileSystem.isAvailable = function isAvailable() {
            return true;
          };
          /**
           * Mounts the file system at the given mount point.
           */


          MountableFileSystem.prototype.mount = function mount(mountPoint, fs) {
            if (mountPoint[0] !== '/') {
              mountPoint = "/" + mountPoint;
            }

            mountPoint = path.resolve(mountPoint);

            if (this.mntMap[mountPoint]) {
              throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already taken.");
            }

            mkdirpSync(mountPoint, 0x1ff, this.rootFs);
            this.mntMap[mountPoint] = fs;
            this.mountList.push(mountPoint);
            this.mountList = this.mountList.sort(function (a, b) {
              return b.length - a.length;
            });
          };

          MountableFileSystem.prototype.umount = function umount(mountPoint) {
            var this$1 = this;

            if (mountPoint[0] !== '/') {
              mountPoint = "/" + mountPoint;
            }

            mountPoint = path.resolve(mountPoint);

            if (!this.mntMap[mountPoint]) {
              throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already unmounted.");
            }

            delete this.mntMap[mountPoint];
            this.mountList.splice(this.mountList.indexOf(mountPoint), 1);

            while (mountPoint !== '/') {
              if (this$1.rootFs.readdirSync(mountPoint).length === 0) {
                this$1.rootFs.rmdirSync(mountPoint);
                mountPoint = path.dirname(mountPoint);
              } else {
                break;
              }
            }
          };
          /**
           * Returns the file system that the path points to.
           */


          MountableFileSystem.prototype._getFs = function _getFs(path$$1) {
            var this$1 = this;
            var mountList = this.mountList,
                len = mountList.length;

            for (var i = 0; i < len; i++) {
              var mountPoint = mountList[i]; // We know path is normalized, so it is a substring of the mount point.

              if (mountPoint.length <= path$$1.length && path$$1.indexOf(mountPoint) === 0) {
                path$$1 = path$$1.substr(mountPoint.length > 1 ? mountPoint.length : 0);

                if (path$$1 === '') {
                  path$$1 = '/';
                }

                return {
                  fs: this$1.mntMap[mountPoint],
                  path: path$$1
                };
              }
            } // Query our root file system.


            return {
              fs: this.rootFs,
              path: path$$1
            };
          }; // Global information methods


          MountableFileSystem.prototype.getName = function getName() {
            return MountableFileSystem.Name;
          };

          MountableFileSystem.prototype.diskSpace = function diskSpace(path$$1, cb) {
            cb(0, 0);
          };

          MountableFileSystem.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          MountableFileSystem.prototype.supportsLinks = function supportsLinks() {
            // I'm not ready for cross-FS links yet.
            return false;
          };

          MountableFileSystem.prototype.supportsProps = function supportsProps() {
            return false;
          };

          MountableFileSystem.prototype.supportsSynch = function supportsSynch() {
            return true;
          };
          /**
           * Fixes up error messages so they mention the mounted file location relative
           * to the MFS root, not to the particular FS's root.
           * Mutates the input error, and returns it.
           */


          MountableFileSystem.prototype.standardizeError = function standardizeError(err, path$$1, realPath) {
            var index = err.message.indexOf(path$$1);

            if (index !== -1) {
              err.message = err.message.substr(0, index) + realPath + err.message.substr(index + path$$1.length);
              err.path = realPath;
            }

            return err;
          }; // The following methods involve multiple file systems, and thus have custom
          // logic.
          // Note that we go through the Node API to use its robust default argument
          // processing.


          MountableFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
            var this$1 = this; // Scenario 1: old and new are on same FS.

            var fs1rv = this._getFs(oldPath);

            var fs2rv = this._getFs(newPath);

            if (fs1rv.fs === fs2rv.fs) {
              return fs1rv.fs.rename(fs1rv.path, fs2rv.path, function (e) {
                if (e) {
                  this$1.standardizeError(this$1.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
                }

                cb(e);
              });
            } // Scenario 2: Different file systems.
            // Read old file, write new file, delete old file.


            return _fsMock.readFile(oldPath, function (err, data) {
              if (err) {
                return cb(err);
              }

              _fsMock.writeFile(newPath, data, function (err) {
                if (err) {
                  return cb(err);
                }

                _fsMock.unlink(oldPath, cb);
              });
            });
          };

          MountableFileSystem.prototype.renameSync = function renameSync(oldPath, newPath) {
            // Scenario 1: old and new are on same FS.
            var fs1rv = this._getFs(oldPath);

            var fs2rv = this._getFs(newPath);

            if (fs1rv.fs === fs2rv.fs) {
              try {
                return fs1rv.fs.renameSync(fs1rv.path, fs2rv.path);
              } catch (e) {
                this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
                throw e;
              }
            } // Scenario 2: Different file systems.


            var data = _fsMock.readFileSync(oldPath);

            _fsMock.writeFileSync(newPath, data);

            return _fsMock.unlinkSync(oldPath);
          };

          MountableFileSystem.prototype.readdirSync = function readdirSync(p) {
            var fsInfo = this._getFs(p); // If null, rootfs did not have the directory
            // (or the target FS is the root fs).


            var rv = null; // Mount points are all defined in the root FS.
            // Ensure that we list those, too.

            if (fsInfo.fs !== this.rootFs) {
              try {
                rv = this.rootFs.readdirSync(p);
              } catch (e) {// Ignore.
              }
            }

            try {
              var rv2 = fsInfo.fs.readdirSync(fsInfo.path);

              if (rv === null) {
                return rv2;
              } else {
                // Filter out duplicates.
                return rv2.concat(rv.filter(function (val) {
                  return rv2.indexOf(val) === -1;
                }));
              }
            } catch (e) {
              if (rv === null) {
                throw this.standardizeError(e, fsInfo.path, p);
              } else {
                // The root FS had something.
                return rv;
              }
            }
          };

          MountableFileSystem.prototype.readdir = function readdir(p, cb) {
            var this$1 = this;

            var fsInfo = this._getFs(p);

            fsInfo.fs.readdir(fsInfo.path, function (err, files) {
              if (fsInfo.fs !== this$1.rootFs) {
                try {
                  var rv = this$1.rootFs.readdirSync(p);

                  if (files) {
                    // Filter out duplicates.
                    files = files.concat(rv.filter(function (val) {
                      return files.indexOf(val) === -1;
                    }));
                  } else {
                    files = rv;
                  }
                } catch (e) {
                  // Root FS and target FS did not have directory.
                  if (err) {
                    return cb(this$1.standardizeError(err, fsInfo.path, p));
                  }
                }
              } else if (err) {
                // Root FS and target FS are the same, and did not have directory.
                return cb(this$1.standardizeError(err, fsInfo.path, p));
              }

              cb(null, files);
            });
          };

          MountableFileSystem.prototype.rmdirSync = function rmdirSync(p) {
            var fsInfo = this._getFs(p);

            if (this._containsMountPt(p)) {
              throw ApiError.ENOTEMPTY(p);
            } else {
              try {
                fsInfo.fs.rmdirSync(fsInfo.path);
              } catch (e) {
                throw this.standardizeError(e, fsInfo.path, p);
              }
            }
          };

          MountableFileSystem.prototype.rmdir = function rmdir(p, cb) {
            var this$1 = this;

            var fsInfo = this._getFs(p);

            if (this._containsMountPt(p)) {
              cb(ApiError.ENOTEMPTY(p));
            } else {
              fsInfo.fs.rmdir(fsInfo.path, function (err) {
                cb(err ? this$1.standardizeError(err, fsInfo.path, p) : null);
              });
            }
          };
          /**
           * Returns true if the given path contains a mount point.
           */


          MountableFileSystem.prototype._containsMountPt = function _containsMountPt(p) {
            var mountPoints = this.mountList,
                len = mountPoints.length;

            for (var i = 0; i < len; i++) {
              var pt = mountPoints[i];

              if (pt.length >= p.length && pt.slice(0, p.length) === p) {
                return true;
              }
            }

            return false;
          };

          return MountableFileSystem;
        }(BaseFileSystem);

        MountableFileSystem.Name = "MountableFileSystem";
        MountableFileSystem.Options = {};
        /**
         * Tricky: Define all of the functions that merely forward arguments to the
         * relevant file system, or return/throw an error.
         * Take advantage of the fact that the *first* argument is always the path, and
         * the *last* is the callback function (if async).
         * @todo Can use numArgs to make proxying more efficient.
         * @hidden
         */

        function defineFcn(name, isSync, numArgs) {
          if (isSync) {
            return function () {
              var args = [],
                  len = arguments.length;

              while (len--) args[len] = arguments[len];

              var path$$1 = args[0];

              var rv = this._getFs(path$$1);

              args[0] = rv.path;

              try {
                return rv.fs[name].apply(rv.fs, args);
              } catch (e) {
                this.standardizeError(e, rv.path, path$$1);
                throw e;
              }
            };
          } else {
            return function () {
              var this$1 = this;
              var args = [],
                  len = arguments.length;

              while (len--) args[len] = arguments[len];

              var path$$1 = args[0];

              var rv = this._getFs(path$$1);

              args[0] = rv.path;

              if (typeof args[args.length - 1] === 'function') {
                var cb = args[args.length - 1];

                args[args.length - 1] = function () {
                  var args = [],
                      len = arguments.length;

                  while (len--) args[len] = arguments[len];

                  if (args.length > 0 && args[0] instanceof ApiError) {
                    this$1.standardizeError(args[0], rv.path, path$$1);
                  }

                  cb.apply(null, args);
                };
              }

              return rv.fs[name].apply(rv.fs, args);
            };
          }
        }
        /**
         * @hidden
         */


        var fsCmdMap = [// 1 arg functions
        ['exists', 'unlink', 'readlink'], // 2 arg functions
        ['stat', 'mkdir', 'realpath', 'truncate'], // 3 arg functions
        ['open', 'readFile', 'chmod', 'utimes'], // 4 arg functions
        ['chown'], // 5 arg functions
        ['writeFile', 'appendFile']];

        for (var i = 0; i < fsCmdMap.length; i++) {
          var cmds = fsCmdMap[i];

          for (var i$1 = 0, list = cmds; i$1 < list.length; i$1 += 1) {
            var fnName = list[i$1];
            MountableFileSystem.prototype[fnName] = defineFcn(fnName, false, i + 1);
            MountableFileSystem.prototype[fnName + 'Sync'] = defineFcn(fnName + 'Sync', true, i + 1);
          }
        }
        /**
         * @hidden
         */


        var bfsSetImmediate;

        if (typeof setImmediate !== "undefined") {
          bfsSetImmediate = setImmediate;
        } else {
          var gScope = global$1;
          var timeouts = [];
          var messageName = "zero-timeout-message";

          var canUsePostMessage = function () {
            if (typeof gScope.importScripts !== 'undefined' || !gScope.postMessage) {
              return false;
            }

            var postMessageIsAsync = true;
            var oldOnMessage = gScope.onmessage;

            gScope.onmessage = function () {
              postMessageIsAsync = false;
            };

            gScope.postMessage('', '*');
            gScope.onmessage = oldOnMessage;
            return postMessageIsAsync;
          };

          if (canUsePostMessage()) {
            bfsSetImmediate = function (fn) {
              timeouts.push(fn);
              gScope.postMessage(messageName, "*");
            };

            var handleMessage = function (event) {
              if (event.source === self && event.data === messageName) {
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else {
                  event.cancelBubble = true;
                }

                if (timeouts.length > 0) {
                  var fn = timeouts.shift();
                  return fn();
                }
              }
            };

            if (gScope.addEventListener) {
              gScope.addEventListener('message', handleMessage, true);
            } else {
              gScope.attachEvent('onmessage', handleMessage);
            }
          } else if (gScope.MessageChannel) {
            // WebWorker MessageChannel
            var channel = new gScope.MessageChannel();

            channel.port1.onmessage = function (event) {
              if (timeouts.length > 0) {
                return timeouts.shift()();
              }
            };

            bfsSetImmediate = function (fn) {
              timeouts.push(fn);
              channel.port2.postMessage('');
            };
          } else {
            bfsSetImmediate = function (fn) {
              return setTimeout(fn, 0);
            };
          }
        }

        var setImmediate$3 = bfsSetImmediate;
        /**
         * Non-recursive mutex
         * @hidden
         */

        var Mutex = function Mutex() {
          this._locked = false;
          this._waiters = [];
        };

        Mutex.prototype.lock = function lock(cb) {
          if (this._locked) {
            this._waiters.push(cb);

            return;
          }

          this._locked = true;
          cb();
        };

        Mutex.prototype.unlock = function unlock() {
          if (!this._locked) {
            throw new Error('unlock of a non-locked mutex');
          }

          var next = this._waiters.shift(); // don't unlock - we want to queue up next for the
          // _end_ of the current task execution, but we don't
          // want it to be called inline with whatever the
          // current stack is.  This way we still get the nice
          // behavior that an unlock immediately followed by a
          // lock won't cause starvation.


          if (next) {
            setImmediate$3(next);
            return;
          }

          this._locked = false;
        };

        Mutex.prototype.tryLock = function tryLock() {
          if (this._locked) {
            return false;
          }

          this._locked = true;
          return true;
        };

        Mutex.prototype.isLocked = function isLocked() {
          return this._locked;
        };
        /**
         * This class serializes access to an underlying async filesystem.
         * For example, on an OverlayFS instance with an async lower
         * directory operations like rename and rmdir may involve multiple
         * requests involving both the upper and lower filesystems -- they
         * are not executed in a single atomic step.  OverlayFS uses this
         * LockedFS to avoid having to reason about the correctness of
         * multiple requests interleaving.
         */


        var LockedFS = function LockedFS(fs) {
          this._fs = fs;
          this._mu = new Mutex();
        };

        LockedFS.prototype.getName = function getName() {
          return 'LockedFS<' + this._fs.getName() + '>';
        };

        LockedFS.prototype.getFSUnlocked = function getFSUnlocked() {
          return this._fs;
        };

        LockedFS.prototype.initialize = function initialize(cb) {
          // FIXME: check to see if FS supports initialization
          this._fs.initialize(cb);
        };

        LockedFS.prototype.diskSpace = function diskSpace(p, cb) {
          // FIXME: should this lock?
          this._fs.diskSpace(p, cb);
        };

        LockedFS.prototype.isReadOnly = function isReadOnly() {
          return this._fs.isReadOnly();
        };

        LockedFS.prototype.supportsLinks = function supportsLinks() {
          return this._fs.supportsLinks();
        };

        LockedFS.prototype.supportsProps = function supportsProps() {
          return this._fs.supportsProps();
        };

        LockedFS.prototype.supportsSynch = function supportsSynch() {
          return this._fs.supportsSynch();
        };

        LockedFS.prototype.rename = function rename(oldPath, newPath, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.rename(oldPath, newPath, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.renameSync = function renameSync(oldPath, newPath) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.renameSync(oldPath, newPath);
        };

        LockedFS.prototype.stat = function stat(p, isLstat, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.stat(p, isLstat, function (err, stat) {
              this$1._mu.unlock();

              cb(err, stat);
            });
          });
        };

        LockedFS.prototype.statSync = function statSync(p, isLstat) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.statSync(p, isLstat);
        };

        LockedFS.prototype.open = function open(p, flag, mode, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.open(p, flag, mode, function (err, fd) {
              this$1._mu.unlock();

              cb(err, fd);
            });
          });
        };

        LockedFS.prototype.openSync = function openSync(p, flag, mode) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.openSync(p, flag, mode);
        };

        LockedFS.prototype.unlink = function unlink(p, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.unlink(p, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.unlinkSync = function unlinkSync(p) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.unlinkSync(p);
        };

        LockedFS.prototype.rmdir = function rmdir(p, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.rmdir(p, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.rmdirSync = function rmdirSync(p) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.rmdirSync(p);
        };

        LockedFS.prototype.mkdir = function mkdir(p, mode, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.mkdir(p, mode, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.mkdirSync = function mkdirSync(p, mode) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.mkdirSync(p, mode);
        };

        LockedFS.prototype.readdir = function readdir(p, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.readdir(p, function (err, files) {
              this$1._mu.unlock();

              cb(err, files);
            });
          });
        };

        LockedFS.prototype.readdirSync = function readdirSync(p) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.readdirSync(p);
        };

        LockedFS.prototype.exists = function exists(p, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.exists(p, function (exists) {
              this$1._mu.unlock();

              cb(exists);
            });
          });
        };

        LockedFS.prototype.existsSync = function existsSync(p) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.existsSync(p);
        };

        LockedFS.prototype.realpath = function realpath(p, cache, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.realpath(p, cache, function (err, resolvedPath) {
              this$1._mu.unlock();

              cb(err, resolvedPath);
            });
          });
        };

        LockedFS.prototype.realpathSync = function realpathSync(p, cache) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.realpathSync(p, cache);
        };

        LockedFS.prototype.truncate = function truncate(p, len, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.truncate(p, len, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.truncateSync = function truncateSync(p, len) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.truncateSync(p, len);
        };

        LockedFS.prototype.readFile = function readFile(fname, encoding, flag, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.readFile(fname, encoding, flag, function (err, data) {
              this$1._mu.unlock();

              cb(err, data);
            });
          });
        };

        LockedFS.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.readFileSync(fname, encoding, flag);
        };

        LockedFS.prototype.writeFile = function writeFile(fname, data, encoding, flag, mode, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.writeFile(fname, data, encoding, flag, mode, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.writeFileSync = function writeFileSync(fname, data, encoding, flag, mode) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.writeFileSync(fname, data, encoding, flag, mode);
        };

        LockedFS.prototype.appendFile = function appendFile(fname, data, encoding, flag, mode, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.appendFile(fname, data, encoding, flag, mode, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.appendFileSync = function appendFileSync(fname, data, encoding, flag, mode) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.appendFileSync(fname, data, encoding, flag, mode);
        };

        LockedFS.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.chmod(p, isLchmod, mode, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.chmodSync(p, isLchmod, mode);
        };

        LockedFS.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.chown(p, isLchown, uid, gid, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.chownSync(p, isLchown, uid, gid);
        };

        LockedFS.prototype.utimes = function utimes(p, atime, mtime, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.utimes(p, atime, mtime, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.utimesSync = function utimesSync(p, atime, mtime) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.utimesSync(p, atime, mtime);
        };

        LockedFS.prototype.link = function link(srcpath, dstpath, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.link(srcpath, dstpath, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.linkSync = function linkSync(srcpath, dstpath) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.linkSync(srcpath, dstpath);
        };

        LockedFS.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.symlink(srcpath, dstpath, type, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.symlinkSync(srcpath, dstpath, type);
        };

        LockedFS.prototype.readlink = function readlink(p, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.readlink(p, function (err, linkString) {
              this$1._mu.unlock();

              cb(err, linkString);
            });
          });
        };

        LockedFS.prototype.readlinkSync = function readlinkSync(p) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.readlinkSync(p);
        };
        /**
         * @hidden
         */


        var deletionLogPath = '/.deletedFiles.log';
        /**
         * Given a read-only mode, makes it writable.
         * @hidden
         */

        function makeModeWritable(mode) {
          return 146 | mode;
        }
        /**
         * @hidden
         */


        function getFlag(f) {
          return FileFlag.getFileFlag(f);
        }
        /**
         * Overlays a RO file to make it writable.
         */


        var OverlayFile = function (PreloadFile$$1) {
          function OverlayFile(fs, path$$1, flag, stats, data) {
            PreloadFile$$1.call(this, fs, path$$1, flag, stats, data);
          }

          if (PreloadFile$$1) OverlayFile.__proto__ = PreloadFile$$1;
          OverlayFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          OverlayFile.prototype.constructor = OverlayFile;

          OverlayFile.prototype.sync = function sync(cb) {
            var this$1 = this;

            if (!this.isDirty()) {
              cb(null);
              return;
            }

            this._fs._syncAsync(this, function (err) {
              this$1.resetDirty();
              cb(err);
            });
          };

          OverlayFile.prototype.syncSync = function syncSync() {
            if (this.isDirty()) {
              this._fs._syncSync(this);

              this.resetDirty();
            }
          };

          OverlayFile.prototype.close = function close(cb) {
            this.sync(cb);
          };

          OverlayFile.prototype.closeSync = function closeSync() {
            this.syncSync();
          };

          return OverlayFile;
        }(PreloadFile);
        /**
         * *INTERNAL, DO NOT USE DIRECTLY!*
         *
         * Core OverlayFS class that contains no locking whatsoever. We wrap these objects
         * in a LockedFS to prevent races.
         */


        var UnlockedOverlayFS = function (BaseFileSystem$$1) {
          function UnlockedOverlayFS(writable, readable) {
            BaseFileSystem$$1.call(this);
            this._isInitialized = false;
            this._initializeCallbacks = [];
            this._deletedFiles = {};
            this._deleteLog = ''; // If 'true', we have scheduled a delete log update.

            this._deleteLogUpdatePending = false; // If 'true', a delete log update is needed after the scheduled delete log
            // update finishes.

            this._deleteLogUpdateNeeded = false; // If there was an error updating the delete log...

            this._deleteLogError = null;
            this._writable = writable;
            this._readable = readable;

            if (this._writable.isReadOnly()) {
              throw new ApiError(ErrorCode.EINVAL, "Writable file system must be writable.");
            }
          }

          if (BaseFileSystem$$1) UnlockedOverlayFS.__proto__ = BaseFileSystem$$1;
          UnlockedOverlayFS.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          UnlockedOverlayFS.prototype.constructor = UnlockedOverlayFS;

          UnlockedOverlayFS.isAvailable = function isAvailable() {
            return true;
          };

          UnlockedOverlayFS.prototype.getOverlayedFileSystems = function getOverlayedFileSystems() {
            return {
              readable: this._readable,
              writable: this._writable
            };
          };

          UnlockedOverlayFS.prototype._syncAsync = function _syncAsync(file, cb) {
            var this$1 = this;
            this.createParentDirectoriesAsync(file.getPath(), function (err) {
              if (err) {
                return cb(err);
              }

              this$1._writable.writeFile(file.getPath(), file.getBuffer(), null, getFlag('w'), file.getStats().mode, cb);
            });
          };

          UnlockedOverlayFS.prototype._syncSync = function _syncSync(file) {
            this.createParentDirectories(file.getPath());

            this._writable.writeFileSync(file.getPath(), file.getBuffer(), null, getFlag('w'), file.getStats().mode);
          };

          UnlockedOverlayFS.prototype.getName = function getName() {
            return OverlayFS.Name;
          };
          /**
           * Called once to load up metadata stored on the writable file system.
           */


          UnlockedOverlayFS.prototype.initialize = function initialize(cb) {
            var this$1 = this;
            var callbackArray = this._initializeCallbacks;

            var end = function (e) {
              this$1._isInitialized = !e;
              this$1._initializeCallbacks = [];
              callbackArray.forEach(function (cb) {
                return cb(e);
              });
            }; // if we're already initialized, immediately invoke the callback


            if (this._isInitialized) {
              return cb();
            }

            callbackArray.push(cb); // The first call to initialize initializes, the rest wait for it to complete.

            if (callbackArray.length !== 1) {
              return;
            } // Read deletion log, process into metadata.


            this._writable.readFile(deletionLogPath, 'utf8', getFlag('r'), function (err, data) {
              if (err) {
                // ENOENT === Newly-instantiated file system, and thus empty log.
                if (err.errno !== ErrorCode.ENOENT) {
                  return end(err);
                }
              } else {
                this$1._deleteLog = data;
              }

              this$1._reparseDeletionLog();

              end();
            });
          };

          UnlockedOverlayFS.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          UnlockedOverlayFS.prototype.supportsSynch = function supportsSynch() {
            return this._readable.supportsSynch() && this._writable.supportsSynch();
          };

          UnlockedOverlayFS.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          UnlockedOverlayFS.prototype.supportsProps = function supportsProps() {
            return this._readable.supportsProps() && this._writable.supportsProps();
          };

          UnlockedOverlayFS.prototype.getDeletionLog = function getDeletionLog() {
            return this._deleteLog;
          };

          UnlockedOverlayFS.prototype.restoreDeletionLog = function restoreDeletionLog(log) {
            this._deleteLog = log;

            this._reparseDeletionLog();

            this.updateLog('');
          };

          UnlockedOverlayFS.prototype.rename = function rename(oldPath, newPath, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb) || this.checkPathAsync(oldPath, cb) || this.checkPathAsync(newPath, cb)) {
              return;
            }

            if (oldPath === deletionLogPath || newPath === deletionLogPath) {
              return cb(ApiError.EPERM('Cannot rename deletion log.'));
            } // nothing to do if paths match


            if (oldPath === newPath) {
              return cb();
            }

            this.stat(oldPath, false, function (oldErr, oldStats) {
              if (oldErr) {
                return cb(oldErr);
              }

              return this$1.stat(newPath, false, function (newErr, newStats) {
                var self = this$1; // precondition: both oldPath and newPath exist and are dirs.
                // decreases: |files|
                // Need to move *every file/folder* currently stored on
                // readable to its new location on writable.

                function copyDirContents(files) {
                  var file = files.shift();

                  if (!file) {
                    return cb();
                  }

                  var oldFile = path.resolve(oldPath, file);
                  var newFile = path.resolve(newPath, file); // Recursion! Should work for any nested files / folders.

                  self.rename(oldFile, newFile, function (err) {
                    if (err) {
                      return cb(err);
                    }

                    copyDirContents(files);
                  });
                }

                var mode = 511; // from linux's rename(2) manpage: oldpath can specify a
                // directory.  In this case, newpath must either not exist, or
                // it must specify an empty directory.

                if (oldStats.isDirectory()) {
                  if (newErr) {
                    if (newErr.errno !== ErrorCode.ENOENT) {
                      return cb(newErr);
                    }

                    return this$1._writable.exists(oldPath, function (exists) {
                      // simple case - both old and new are on the writable layer
                      if (exists) {
                        return this$1._writable.rename(oldPath, newPath, cb);
                      }

                      this$1._writable.mkdir(newPath, mode, function (mkdirErr) {
                        if (mkdirErr) {
                          return cb(mkdirErr);
                        }

                        this$1._readable.readdir(oldPath, function (err, files) {
                          if (err) {
                            return cb();
                          }

                          copyDirContents(files);
                        });
                      });
                    });
                  }

                  mode = newStats.mode;

                  if (!newStats.isDirectory()) {
                    return cb(ApiError.ENOTDIR(newPath));
                  }

                  this$1.readdir(newPath, function (readdirErr, files) {
                    if (files && files.length) {
                      return cb(ApiError.ENOTEMPTY(newPath));
                    }

                    this$1._readable.readdir(oldPath, function (err, files) {
                      if (err) {
                        return cb();
                      }

                      copyDirContents(files);
                    });
                  });
                }

                if (newStats && newStats.isDirectory()) {
                  return cb(ApiError.EISDIR(newPath));
                }

                this$1.readFile(oldPath, null, getFlag('r'), function (err, data) {
                  if (err) {
                    return cb(err);
                  }

                  return this$1.writeFile(newPath, data, null, getFlag('w'), oldStats.mode, function (err) {
                    if (err) {
                      return cb(err);
                    }

                    return this$1.unlink(oldPath, cb);
                  });
                });
              });
            });
          };

          UnlockedOverlayFS.prototype.renameSync = function renameSync(oldPath, newPath) {
            var this$1 = this;
            this.checkInitialized();
            this.checkPath(oldPath);
            this.checkPath(newPath);

            if (oldPath === deletionLogPath || newPath === deletionLogPath) {
              throw ApiError.EPERM('Cannot rename deletion log.');
            } // Write newPath using oldPath's contents, delete oldPath.


            var oldStats = this.statSync(oldPath, false);

            if (oldStats.isDirectory()) {
              // Optimization: Don't bother moving if old === new.
              if (oldPath === newPath) {
                return;
              }

              var mode = 511;

              if (this.existsSync(newPath)) {
                var stats = this.statSync(newPath, false);
                mode = stats.mode;

                if (stats.isDirectory()) {
                  if (this.readdirSync(newPath).length > 0) {
                    throw ApiError.ENOTEMPTY(newPath);
                  }
                } else {
                  throw ApiError.ENOTDIR(newPath);
                }
              } // Take care of writable first. Move any files there, or create an empty directory
              // if it doesn't exist.


              if (this._writable.existsSync(oldPath)) {
                this._writable.renameSync(oldPath, newPath);
              } else if (!this._writable.existsSync(newPath)) {
                this._writable.mkdirSync(newPath, mode);
              } // Need to move *every file/folder* currently stored on readable to its new location
              // on writable.


              if (this._readable.existsSync(oldPath)) {
                this._readable.readdirSync(oldPath).forEach(function (name) {
                  // Recursion! Should work for any nested files / folders.
                  this$1.renameSync(path.resolve(oldPath, name), path.resolve(newPath, name));
                });
              }
            } else {
              if (this.existsSync(newPath) && this.statSync(newPath, false).isDirectory()) {
                throw ApiError.EISDIR(newPath);
              }

              this.writeFileSync(newPath, this.readFileSync(oldPath, null, getFlag('r')), null, getFlag('w'), oldStats.mode);
            }

            if (oldPath !== newPath && this.existsSync(oldPath)) {
              this.unlinkSync(oldPath);
            }
          };

          UnlockedOverlayFS.prototype.stat = function stat(p, isLstat, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this._writable.stat(p, isLstat, function (err, stat) {
              if (err && err.errno === ErrorCode.ENOENT) {
                if (this$1._deletedFiles[p]) {
                  cb(ApiError.ENOENT(p));
                }

                this$1._readable.stat(p, isLstat, function (err, stat) {
                  if (stat) {
                    // Make the oldStat's mode writable. Preserve the topmost
                    // part of the mode, which specifies if it is a file or a
                    // directory.
                    stat = stat.clone();
                    stat.mode = makeModeWritable(stat.mode);
                  }

                  cb(err, stat);
                });
              } else {
                cb(err, stat);
              }
            });
          };

          UnlockedOverlayFS.prototype.statSync = function statSync(p, isLstat) {
            this.checkInitialized();

            try {
              return this._writable.statSync(p, isLstat);
            } catch (e) {
              if (this._deletedFiles[p]) {
                throw ApiError.ENOENT(p);
              }

              var oldStat = this._readable.statSync(p, isLstat).clone(); // Make the oldStat's mode writable. Preserve the topmost part of the
              // mode, which specifies if it is a file or a directory.


              oldStat.mode = makeModeWritable(oldStat.mode);
              return oldStat;
            }
          };

          UnlockedOverlayFS.prototype.open = function open(p, flag, mode, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
              return;
            }

            this.stat(p, false, function (err, stats) {
              if (stats) {
                switch (flag.pathExistsAction()) {
                  case ActionType.TRUNCATE_FILE:
                    return this$1.createParentDirectoriesAsync(p, function (err) {
                      if (err) {
                        return cb(err);
                      }

                      this$1._writable.open(p, flag, mode, cb);
                    });

                  case ActionType.NOP:
                    return this$1._writable.exists(p, function (exists) {
                      if (exists) {
                        this$1._writable.open(p, flag, mode, cb);
                      } else {
                        // at this point we know the stats object we got is from
                        // the readable FS.
                        stats = stats.clone();
                        stats.mode = mode;

                        this$1._readable.readFile(p, null, getFlag('r'), function (readFileErr, data) {
                          if (readFileErr) {
                            return cb(readFileErr);
                          }

                          if (stats.size === -1) {
                            stats.size = data.length;
                          }

                          var f = new OverlayFile(this$1, p, flag, stats, data);
                          cb(null, f);
                        });
                      }
                    });

                  default:
                    return cb(ApiError.EEXIST(p));
                }
              } else {
                switch (flag.pathNotExistsAction()) {
                  case ActionType.CREATE_FILE:
                    return this$1.createParentDirectoriesAsync(p, function (err) {
                      if (err) {
                        return cb(err);
                      }

                      return this$1._writable.open(p, flag, mode, cb);
                    });

                  default:
                    return cb(ApiError.ENOENT(p));
                }
              }
            });
          };

          UnlockedOverlayFS.prototype.openSync = function openSync(p, flag, mode) {
            this.checkInitialized();
            this.checkPath(p);

            if (p === deletionLogPath) {
              throw ApiError.EPERM('Cannot open deletion log.');
            }

            if (this.existsSync(p)) {
              switch (flag.pathExistsAction()) {
                case ActionType.TRUNCATE_FILE:
                  this.createParentDirectories(p);
                  return this._writable.openSync(p, flag, mode);

                case ActionType.NOP:
                  if (this._writable.existsSync(p)) {
                    return this._writable.openSync(p, flag, mode);
                  } else {
                    // Create an OverlayFile.
                    var buf = this._readable.readFileSync(p, null, getFlag('r'));

                    var stats = this._readable.statSync(p, false).clone();

                    stats.mode = mode;
                    return new OverlayFile(this, p, flag, stats, buf);
                  }

                default:
                  throw ApiError.EEXIST(p);
              }
            } else {
              switch (flag.pathNotExistsAction()) {
                case ActionType.CREATE_FILE:
                  this.createParentDirectories(p);
                  return this._writable.openSync(p, flag, mode);

                default:
                  throw ApiError.ENOENT(p);
              }
            }
          };

          UnlockedOverlayFS.prototype.unlink = function unlink(p, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
              return;
            }

            this.exists(p, function (exists) {
              if (!exists) {
                return cb(ApiError.ENOENT(p));
              }

              this$1._writable.exists(p, function (writableExists) {
                if (writableExists) {
                  return this$1._writable.unlink(p, function (err) {
                    if (err) {
                      return cb(err);
                    }

                    this$1.exists(p, function (readableExists) {
                      if (readableExists) {
                        this$1.deletePath(p);
                      }

                      cb(null);
                    });
                  });
                } else {
                  // if this only exists on the readable FS, add it to the
                  // delete map.
                  this$1.deletePath(p);
                  cb(null);
                }
              });
            });
          };

          UnlockedOverlayFS.prototype.unlinkSync = function unlinkSync(p) {
            this.checkInitialized();
            this.checkPath(p);

            if (this.existsSync(p)) {
              if (this._writable.existsSync(p)) {
                this._writable.unlinkSync(p);
              } // if it still exists add to the delete log


              if (this.existsSync(p)) {
                this.deletePath(p);
              }
            } else {
              throw ApiError.ENOENT(p);
            }
          };

          UnlockedOverlayFS.prototype.rmdir = function rmdir(p, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            var rmdirLower = function () {
              this$1.readdir(p, function (err, files) {
                if (err) {
                  return cb(err);
                }

                if (files.length) {
                  return cb(ApiError.ENOTEMPTY(p));
                }

                this$1.deletePath(p);
                cb(null);
              });
            };

            this.exists(p, function (exists) {
              if (!exists) {
                return cb(ApiError.ENOENT(p));
              }

              this$1._writable.exists(p, function (writableExists) {
                if (writableExists) {
                  this$1._writable.rmdir(p, function (err) {
                    if (err) {
                      return cb(err);
                    }

                    this$1._readable.exists(p, function (readableExists) {
                      if (readableExists) {
                        rmdirLower();
                      } else {
                        cb();
                      }
                    });
                  });
                } else {
                  rmdirLower();
                }
              });
            });
          };

          UnlockedOverlayFS.prototype.rmdirSync = function rmdirSync(p) {
            this.checkInitialized();

            if (this.existsSync(p)) {
              if (this._writable.existsSync(p)) {
                this._writable.rmdirSync(p);
              }

              if (this.existsSync(p)) {
                // Check if directory is empty.
                if (this.readdirSync(p).length > 0) {
                  throw ApiError.ENOTEMPTY(p);
                } else {
                  this.deletePath(p);
                }
              }
            } else {
              throw ApiError.ENOENT(p);
            }
          };

          UnlockedOverlayFS.prototype.mkdir = function mkdir(p, mode, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this.exists(p, function (exists) {
              if (exists) {
                return cb(ApiError.EEXIST(p));
              } // The below will throw should any of the parent directories
              // fail to exist on _writable.


              this$1.createParentDirectoriesAsync(p, function (err) {
                if (err) {
                  return cb(err);
                }

                this$1._writable.mkdir(p, mode, cb);
              });
            });
          };

          UnlockedOverlayFS.prototype.mkdirSync = function mkdirSync(p, mode) {
            this.checkInitialized();

            if (this.existsSync(p)) {
              throw ApiError.EEXIST(p);
            } else {
              // The below will throw should any of the parent directories fail to exist
              // on _writable.
              this.createParentDirectories(p);

              this._writable.mkdirSync(p, mode);
            }
          };

          UnlockedOverlayFS.prototype.readdir = function readdir(p, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this.stat(p, false, function (err, dirStats) {
              if (err) {
                return cb(err);
              }

              if (!dirStats.isDirectory()) {
                return cb(ApiError.ENOTDIR(p));
              }

              this$1._writable.readdir(p, function (err, wFiles) {
                if (err && err.code !== 'ENOENT') {
                  return cb(err);
                } else if (err || !wFiles) {
                  wFiles = [];
                }

                this$1._readable.readdir(p, function (err, rFiles) {
                  // if the directory doesn't exist on the lower FS set rFiles
                  // here to simplify the following code.
                  if (err || !rFiles) {
                    rFiles = [];
                  } // Readdir in both, check delete log on read-only file system's files, merge, return.


                  var seenMap = {};
                  var filtered = wFiles.concat(rFiles.filter(function (fPath) {
                    return !this$1._deletedFiles[p + "/" + fPath];
                  })).filter(function (fPath) {
                    // Remove duplicates.
                    var result = !seenMap[fPath];
                    seenMap[fPath] = true;
                    return result;
                  });
                  cb(null, filtered);
                });
              });
            });
          };

          UnlockedOverlayFS.prototype.readdirSync = function readdirSync(p) {
            var this$1 = this;
            this.checkInitialized();
            var dirStats = this.statSync(p, false);

            if (!dirStats.isDirectory()) {
              throw ApiError.ENOTDIR(p);
            } // Readdir in both, check delete log on RO file system's listing, merge, return.


            var contents = [];

            try {
              contents = contents.concat(this._writable.readdirSync(p));
            } catch (e) {// NOP.
            }

            try {
              contents = contents.concat(this._readable.readdirSync(p).filter(function (fPath) {
                return !this$1._deletedFiles[p + "/" + fPath];
              }));
            } catch (e) {// NOP.
            }

            var seenMap = {};
            return contents.filter(function (fileP) {
              var result = !seenMap[fileP];
              seenMap[fileP] = true;
              return result;
            });
          };

          UnlockedOverlayFS.prototype.exists = function exists(p, cb) {
            var this$1 = this; // Cannot pass an error back to callback, so throw an exception instead
            // if not initialized.

            this.checkInitialized();

            this._writable.exists(p, function (existsWritable) {
              if (existsWritable) {
                return cb(true);
              }

              this$1._readable.exists(p, function (existsReadable) {
                cb(existsReadable && this$1._deletedFiles[p] !== true);
              });
            });
          };

          UnlockedOverlayFS.prototype.existsSync = function existsSync(p) {
            this.checkInitialized();
            return this._writable.existsSync(p) || this._readable.existsSync(p) && this._deletedFiles[p] !== true;
          };

          UnlockedOverlayFS.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this.operateOnWritableAsync(p, function (err) {
              if (err) {
                return cb(err);
              } else {
                this$1._writable.chmod(p, isLchmod, mode, cb);
              }
            });
          };

          UnlockedOverlayFS.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
            var this$1 = this;
            this.checkInitialized();
            this.operateOnWritable(p, function () {
              this$1._writable.chmodSync(p, isLchmod, mode);
            });
          };

          UnlockedOverlayFS.prototype.chown = function chown(p, isLchmod, uid, gid, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this.operateOnWritableAsync(p, function (err) {
              if (err) {
                return cb(err);
              } else {
                this$1._writable.chown(p, isLchmod, uid, gid, cb);
              }
            });
          };

          UnlockedOverlayFS.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
            var this$1 = this;
            this.checkInitialized();
            this.operateOnWritable(p, function () {
              this$1._writable.chownSync(p, isLchown, uid, gid);
            });
          };

          UnlockedOverlayFS.prototype.utimes = function utimes(p, atime, mtime, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this.operateOnWritableAsync(p, function (err) {
              if (err) {
                return cb(err);
              } else {
                this$1._writable.utimes(p, atime, mtime, cb);
              }
            });
          };

          UnlockedOverlayFS.prototype.utimesSync = function utimesSync(p, atime, mtime) {
            var this$1 = this;
            this.checkInitialized();
            this.operateOnWritable(p, function () {
              this$1._writable.utimesSync(p, atime, mtime);
            });
          };

          UnlockedOverlayFS.prototype.deletePath = function deletePath(p) {
            this._deletedFiles[p] = true;
            this.updateLog("d" + p + "\n");
          };

          UnlockedOverlayFS.prototype.updateLog = function updateLog(addition) {
            var this$1 = this;
            this._deleteLog += addition;

            if (this._deleteLogUpdatePending) {
              this._deleteLogUpdateNeeded = true;
            } else {
              this._deleteLogUpdatePending = true;

              this._writable.writeFile(deletionLogPath, this._deleteLog, 'utf8', FileFlag.getFileFlag('w'), 420, function (e) {
                this$1._deleteLogUpdatePending = false;

                if (e) {
                  this$1._deleteLogError = e;
                } else if (this$1._deleteLogUpdateNeeded) {
                  this$1._deleteLogUpdateNeeded = false;
                  this$1.updateLog('');
                }
              });
            }
          };

          UnlockedOverlayFS.prototype._reparseDeletionLog = function _reparseDeletionLog() {
            var this$1 = this;
            this._deletedFiles = {};

            this._deleteLog.split('\n').forEach(function (path$$1) {
              // If the log entry begins w/ 'd', it's a deletion.
              this$1._deletedFiles[path$$1.slice(1)] = path$$1.slice(0, 1) === 'd';
            });
          };

          UnlockedOverlayFS.prototype.checkInitialized = function checkInitialized() {
            if (!this._isInitialized) {
              throw new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.");
            } else if (this._deleteLogError !== null) {
              var e = this._deleteLogError;
              this._deleteLogError = null;
              throw e;
            }
          };

          UnlockedOverlayFS.prototype.checkInitAsync = function checkInitAsync(cb) {
            if (!this._isInitialized) {
              cb(new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it."));
              return false;
            } else if (this._deleteLogError !== null) {
              var e = this._deleteLogError;
              this._deleteLogError = null;
              cb(e);
              return false;
            }

            return true;
          };

          UnlockedOverlayFS.prototype.checkPath = function checkPath(p) {
            if (p === deletionLogPath) {
              throw ApiError.EPERM(p);
            }
          };

          UnlockedOverlayFS.prototype.checkPathAsync = function checkPathAsync(p, cb) {
            if (p === deletionLogPath) {
              cb(ApiError.EPERM(p));
              return true;
            }

            return false;
          };

          UnlockedOverlayFS.prototype.createParentDirectoriesAsync = function createParentDirectoriesAsync(p, cb) {
            var parent = path.dirname(p);
            var toCreate = [];
            var self = this;

            this._writable.stat(parent, false, statDone);

            function statDone(err, stat) {
              if (err) {
                toCreate.push(parent);
                parent = path.dirname(parent);

                self._writable.stat(parent, false, statDone);
              } else {
                createParents();
              }
            }

            function createParents() {
              if (!toCreate.length) {
                return cb();
              }

              var dir = toCreate.pop();

              self._readable.stat(dir, false, function (err, stats) {
                // stop if we couldn't read the dir
                if (!stats) {
                  return cb();
                }

                self._writable.mkdir(dir, stats.mode, function (err) {
                  if (err) {
                    return cb(err);
                  }

                  createParents();
                });
              });
            }
          };
          /**
           * With the given path, create the needed parent directories on the writable storage
           * should they not exist. Use modes from the read-only storage.
           */


          UnlockedOverlayFS.prototype.createParentDirectories = function createParentDirectories(p) {
            var this$1 = this;
            var parent = path.dirname(p),
                toCreate = [];

            while (!this._writable.existsSync(parent)) {
              toCreate.push(parent);
              parent = path.dirname(parent);
            }

            toCreate = toCreate.reverse();
            toCreate.forEach(function (p) {
              this$1._writable.mkdirSync(p, this$1.statSync(p, false).mode);
            });
          };
          /**
           * Helper function:
           * - Ensures p is on writable before proceeding. Throws an error if it doesn't exist.
           * - Calls f to perform operation on writable.
           */


          UnlockedOverlayFS.prototype.operateOnWritable = function operateOnWritable(p, f) {
            if (this.existsSync(p)) {
              if (!this._writable.existsSync(p)) {
                // File is on readable storage. Copy to writable storage before
                // changing its mode.
                this.copyToWritable(p);
              }

              f();
            } else {
              throw ApiError.ENOENT(p);
            }
          };

          UnlockedOverlayFS.prototype.operateOnWritableAsync = function operateOnWritableAsync(p, cb) {
            var this$1 = this;
            this.exists(p, function (exists) {
              if (!exists) {
                return cb(ApiError.ENOENT(p));
              }

              this$1._writable.exists(p, function (existsWritable) {
                if (existsWritable) {
                  cb();
                } else {
                  return this$1.copyToWritableAsync(p, cb);
                }
              });
            });
          };
          /**
           * Copy from readable to writable storage.
           * PRECONDITION: File does not exist on writable storage.
           */


          UnlockedOverlayFS.prototype.copyToWritable = function copyToWritable(p) {
            var pStats = this.statSync(p, false);

            if (pStats.isDirectory()) {
              this._writable.mkdirSync(p, pStats.mode);
            } else {
              this.writeFileSync(p, this._readable.readFileSync(p, null, getFlag('r')), null, getFlag('w'), this.statSync(p, false).mode);
            }
          };

          UnlockedOverlayFS.prototype.copyToWritableAsync = function copyToWritableAsync(p, cb) {
            var this$1 = this;
            this.stat(p, false, function (err, pStats) {
              if (err) {
                return cb(err);
              }

              if (pStats.isDirectory()) {
                return this$1._writable.mkdir(p, pStats.mode, cb);
              } // need to copy file.


              this$1._readable.readFile(p, null, getFlag('r'), function (err, data) {
                if (err) {
                  return cb(err);
                }

                this$1.writeFile(p, data, null, getFlag('w'), pStats.mode, cb);
              });
            });
          };

          return UnlockedOverlayFS;
        }(BaseFileSystem);
        /**
         * OverlayFS makes a read-only filesystem writable by storing writes on a second,
         * writable file system. Deletes are persisted via metadata stored on the writable
         * file system.
         */


        var OverlayFS = function (LockedFS$$1) {
          function OverlayFS(writable, readable, deprecateMsg) {
            if (deprecateMsg === void 0) deprecateMsg = true;
            LockedFS$$1.call(this, new UnlockedOverlayFS(writable, readable));
            deprecationMessage(deprecateMsg, OverlayFS.Name, {
              readable: "readable file system",
              writable: "writable file system"
            });
          }

          if (LockedFS$$1) OverlayFS.__proto__ = LockedFS$$1;
          OverlayFS.prototype = Object.create(LockedFS$$1 && LockedFS$$1.prototype);
          OverlayFS.prototype.constructor = OverlayFS;
          /**
           * Constructs and initializes an OverlayFS instance with the given options.
           */

          OverlayFS.Create = function Create(opts, cb) {
            try {
              var fs = new OverlayFS(opts.writable, opts.readable, false);
              fs.initialize(function (e) {
                cb(e, fs);
              }, false);
            } catch (e) {
              cb(e);
            }
          };

          OverlayFS.isAvailable = function isAvailable() {
            return UnlockedOverlayFS.isAvailable();
          };
          /**
           * **Deprecated. Please use OverlayFS.Create() to construct and initialize OverlayFS instances.**
           */


          OverlayFS.prototype.initialize = function initialize(cb, deprecateMsg) {
            if (deprecateMsg === void 0) deprecateMsg = true;

            if (deprecateMsg) {
              console.warn("[OverlayFS] OverlayFS.initialize() is deprecated and will be removed in the next major release. Please use 'OverlayFS.Create({readable: readable file system instance, writable: writable file system instance}, cb)' to create and initialize OverlayFS instances.");
            }

            LockedFS$$1.prototype.initialize.call(this, cb);
          };

          OverlayFS.prototype.getOverlayedFileSystems = function getOverlayedFileSystems() {
            return LockedFS$$1.prototype.getFSUnlocked.call(this).getOverlayedFileSystems();
          };

          OverlayFS.prototype.unwrap = function unwrap() {
            return LockedFS$$1.prototype.getFSUnlocked.call(this);
          };

          return OverlayFS;
        }(LockedFS);

        OverlayFS.Name = "OverlayFS";
        OverlayFS.Options = {
          writable: {
            type: "object",
            description: "The file system to write modified files to."
          },
          readable: {
            type: "object",
            description: "The file system that initially populates this file system."
          }
        };
        /**
         * @hidden
         */

        var SpecialArgType;

        (function (SpecialArgType) {
          // Callback
          SpecialArgType[SpecialArgType["CB"] = 0] = "CB"; // File descriptor

          SpecialArgType[SpecialArgType["FD"] = 1] = "FD"; // API error

          SpecialArgType[SpecialArgType["API_ERROR"] = 2] = "API_ERROR"; // Stats object

          SpecialArgType[SpecialArgType["STATS"] = 3] = "STATS"; // Initial probe for file system information.

          SpecialArgType[SpecialArgType["PROBE"] = 4] = "PROBE"; // FileFlag object.

          SpecialArgType[SpecialArgType["FILEFLAG"] = 5] = "FILEFLAG"; // Buffer object.

          SpecialArgType[SpecialArgType["BUFFER"] = 6] = "BUFFER"; // Generic Error object.

          SpecialArgType[SpecialArgType["ERROR"] = 7] = "ERROR";
        })(SpecialArgType || (SpecialArgType = {}));
        /**
         * Converts callback arguments into ICallbackArgument objects, and back
         * again.
         * @hidden
         */


        var CallbackArgumentConverter = function CallbackArgumentConverter() {
          this._callbacks = {};
          this._nextId = 0;
        };

        CallbackArgumentConverter.prototype.toRemoteArg = function toRemoteArg(cb) {
          var id = this._nextId++;
          this._callbacks[id] = cb;
          return {
            type: SpecialArgType.CB,
            id: id
          };
        };

        CallbackArgumentConverter.prototype.toLocalArg = function toLocalArg(id) {
          var cb = this._callbacks[id];
          delete this._callbacks[id];
          return cb;
        };
        /**
         * @hidden
         */


        var FileDescriptorArgumentConverter = function FileDescriptorArgumentConverter() {
          this._fileDescriptors = {};
          this._nextId = 0;
        };

        FileDescriptorArgumentConverter.prototype.toRemoteArg = function toRemoteArg(fd, p, flag, cb) {
          var id = this._nextId++;
          var data;
          var stat;
          this._fileDescriptors[id] = fd; // Extract needed information asynchronously.

          fd.stat(function (err, stats) {
            if (err) {
              cb(err);
            } else {
              stat = bufferToTransferrableObject(stats.toBuffer()); // If it's a readable flag, we need to grab contents.

              if (flag.isReadable()) {
                fd.read(Buffer.alloc(stats.size), 0, stats.size, 0, function (err, bytesRead, buff) {
                  if (err) {
                    cb(err);
                  } else {
                    data = bufferToTransferrableObject(buff);
                    cb(null, {
                      type: SpecialArgType.FD,
                      id: id,
                      data: data,
                      stat: stat,
                      path: p,
                      flag: flag.getFlagString()
                    });
                  }
                });
              } else {
                // File is not readable, which means writing to it will append or
                // truncate/replace existing contents. Return an empty arraybuffer.
                cb(null, {
                  type: SpecialArgType.FD,
                  id: id,
                  data: new ArrayBuffer(0),
                  stat: stat,
                  path: p,
                  flag: flag.getFlagString()
                });
              }
            }
          });
        };

        FileDescriptorArgumentConverter.prototype.applyFdAPIRequest = function applyFdAPIRequest(request, cb) {
          var this$1 = this;
          var fdArg = request.args[0];

          this._applyFdChanges(fdArg, function (err, fd) {
            if (err) {
              cb(err);
            } else {
              // Apply method on now-changed file descriptor.
              fd[request.method](function (e) {
                if (request.method === 'close') {
                  delete this$1._fileDescriptors[fdArg.id];
                }

                cb(e);
              });
            }
          });
        };

        FileDescriptorArgumentConverter.prototype._applyFdChanges = function _applyFdChanges(remoteFd, cb) {
          var fd = this._fileDescriptors[remoteFd.id],
              data = transferrableObjectToBuffer(remoteFd.data),
              remoteStats = Stats.fromBuffer(transferrableObjectToBuffer(remoteFd.stat)); // Write data if the file is writable.

          var flag = FileFlag.getFileFlag(remoteFd.flag);

          if (flag.isWriteable()) {
            // Appendable: Write to end of file.
            // Writeable: Replace entire contents of file.
            fd.write(data, 0, data.length, flag.isAppendable() ? fd.getPos() : 0, function (e) {
              function applyStatChanges() {
                // Check if mode changed.
                fd.stat(function (e, stats) {
                  if (e) {
                    cb(e);
                  } else {
                    if (stats.mode !== remoteStats.mode) {
                      fd.chmod(remoteStats.mode, function (e) {
                        cb(e, fd);
                      });
                    } else {
                      cb(e, fd);
                    }
                  }
                });
              }

              if (e) {
                cb(e);
              } else {
                // If writeable & not appendable, we need to ensure file contents are
                // identical to those from the remote FD. Thus, we truncate to the
                // length of the remote file.
                if (!flag.isAppendable()) {
                  fd.truncate(data.length, function () {
                    applyStatChanges();
                  });
                } else {
                  applyStatChanges();
                }
              }
            });
          } else {
            cb(null, fd);
          }
        };
        /**
         * @hidden
         */


        function apiErrorLocal2Remote(e) {
          return {
            type: SpecialArgType.API_ERROR,
            errorData: bufferToTransferrableObject(e.writeToBuffer())
          };
        }
        /**
         * @hidden
         */


        function apiErrorRemote2Local(e) {
          return ApiError.fromBuffer(transferrableObjectToBuffer(e.errorData));
        }
        /**
         * @hidden
         */


        function errorLocal2Remote(e) {
          return {
            type: SpecialArgType.ERROR,
            name: e.name,
            message: e.message,
            stack: e.stack
          };
        }
        /**
         * @hidden
         */


        function errorRemote2Local(e) {
          var cnstr = global$1[e.name];

          if (typeof cnstr !== 'function') {
            cnstr = Error;
          }

          var err = new cnstr(e.message);
          err.stack = e.stack;
          return err;
        }
        /**
         * @hidden
         */


        function statsLocal2Remote(stats) {
          return {
            type: SpecialArgType.STATS,
            statsData: bufferToTransferrableObject(stats.toBuffer())
          };
        }
        /**
         * @hidden
         */


        function statsRemote2Local(stats) {
          return Stats.fromBuffer(transferrableObjectToBuffer(stats.statsData));
        }
        /**
         * @hidden
         */


        function fileFlagLocal2Remote(flag) {
          return {
            type: SpecialArgType.FILEFLAG,
            flagStr: flag.getFlagString()
          };
        }
        /**
         * @hidden
         */


        function fileFlagRemote2Local(remoteFlag) {
          return FileFlag.getFileFlag(remoteFlag.flagStr);
        }
        /**
         * @hidden
         */


        function bufferToTransferrableObject(buff) {
          return buffer2ArrayBuffer(buff);
        }
        /**
         * @hidden
         */


        function transferrableObjectToBuffer(buff) {
          return arrayBuffer2Buffer(buff);
        }
        /**
         * @hidden
         */


        function bufferLocal2Remote(buff) {
          return {
            type: SpecialArgType.BUFFER,
            data: bufferToTransferrableObject(buff)
          };
        }
        /**
         * @hidden
         */


        function bufferRemote2Local(buffArg) {
          return transferrableObjectToBuffer(buffArg.data);
        }
        /**
         * @hidden
         */


        function isAPIRequest(data) {
          return data && typeof data === 'object' && data.hasOwnProperty('browserfsMessage') && data['browserfsMessage'];
        }
        /**
         * @hidden
         */


        function isAPIResponse(data) {
          return data && typeof data === 'object' && data.hasOwnProperty('browserfsMessage') && data['browserfsMessage'];
        }
        /**
         * Represents a remote file in a different worker/thread.
         */


        var WorkerFile = function (PreloadFile$$1) {
          function WorkerFile(_fs, _path, _flag, _stat, remoteFdId, contents) {
            PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
            this._remoteFdId = remoteFdId;
          }

          if (PreloadFile$$1) WorkerFile.__proto__ = PreloadFile$$1;
          WorkerFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          WorkerFile.prototype.constructor = WorkerFile;

          WorkerFile.prototype.getRemoteFdId = function getRemoteFdId() {
            return this._remoteFdId;
          };
          /**
           * @hidden
           */


          WorkerFile.prototype.toRemoteArg = function toRemoteArg() {
            return {
              type: SpecialArgType.FD,
              id: this._remoteFdId,
              data: bufferToTransferrableObject(this.getBuffer()),
              stat: bufferToTransferrableObject(this.getStats().toBuffer()),
              path: this.getPath(),
              flag: this.getFlag().getFlagString()
            };
          };

          WorkerFile.prototype.sync = function sync(cb) {
            this._syncClose('sync', cb);
          };

          WorkerFile.prototype.close = function close(cb) {
            this._syncClose('close', cb);
          };

          WorkerFile.prototype._syncClose = function _syncClose(type, cb) {
            var this$1 = this;

            if (this.isDirty()) {
              this._fs.syncClose(type, this, function (e) {
                if (!e) {
                  this$1.resetDirty();
                }

                cb(e);
              });
            } else {
              cb();
            }
          };

          return WorkerFile;
        }(PreloadFile);
        /**
         * WorkerFS lets you access a BrowserFS instance that is running in a different
         * JavaScript context (e.g. access BrowserFS in one of your WebWorkers, or
         * access BrowserFS running on the main page from a WebWorker).
         *
         * For example, to have a WebWorker access files in the main browser thread,
         * do the following:
         *
         * MAIN BROWSER THREAD:
         *
         * ```javascript
         *   // Listen for remote file system requests.
         *   BrowserFS.FileSystem.WorkerFS.attachRemoteListener(webWorkerObject);
         * ```
         *
         * WEBWORKER THREAD:
         *
         * ```javascript
         *   // Set the remote file system as the root file system.
         *   BrowserFS.configure({ fs: "WorkerFS", options: { worker: self }}, function(e) {
         *     // Ready!
         *   });
         * ```
         *
         * Note that synchronous operations are not permitted on the WorkerFS, regardless
         * of the configuration option of the remote FS.
         */


        var WorkerFS = function (BaseFileSystem$$1) {
          function WorkerFS(worker, deprecateMsg) {
            var this$1 = this;
            if (deprecateMsg === void 0) deprecateMsg = true;
            BaseFileSystem$$1.call(this);
            this._callbackConverter = new CallbackArgumentConverter();
            this._isInitialized = false;
            this._isReadOnly = false;
            this._supportLinks = false;
            this._supportProps = false;
            this._worker = worker;
            deprecationMessage(deprecateMsg, WorkerFS.Name, {
              worker: "Web Worker instance"
            });

            this._worker.addEventListener('message', function (e) {
              var resp = e.data;

              if (isAPIResponse(resp)) {
                var i;
                var args = resp.args;
                var fixedArgs = new Array(args.length); // Dispatch event to correct id.

                for (i = 0; i < fixedArgs.length; i++) {
                  fixedArgs[i] = this$1._argRemote2Local(args[i]);
                }

                this$1._callbackConverter.toLocalArg(resp.cbId).apply(null, fixedArgs);
              }
            });
          }

          if (BaseFileSystem$$1) WorkerFS.__proto__ = BaseFileSystem$$1;
          WorkerFS.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          WorkerFS.prototype.constructor = WorkerFS;

          WorkerFS.Create = function Create(opts, cb) {
            var fs = new WorkerFS(opts.worker, false);
            fs.initialize(function () {
              cb(null, fs);
            });
          };

          WorkerFS.isAvailable = function isAvailable() {
            return typeof importScripts !== 'undefined' || typeof Worker !== 'undefined';
          };
          /**
           * Attaches a listener to the remote worker for file system requests.
           */


          WorkerFS.attachRemoteListener = function attachRemoteListener(worker) {
            var fdConverter = new FileDescriptorArgumentConverter();

            function argLocal2Remote(arg, requestArgs, cb) {
              switch (typeof arg) {
                case 'object':
                  if (arg instanceof Stats) {
                    cb(null, statsLocal2Remote(arg));
                  } else if (arg instanceof ApiError) {
                    cb(null, apiErrorLocal2Remote(arg));
                  } else if (arg instanceof BaseFile) {
                    // Pass in p and flags from original request.
                    cb(null, fdConverter.toRemoteArg(arg, requestArgs[0], requestArgs[1], cb));
                  } else if (arg instanceof FileFlag) {
                    cb(null, fileFlagLocal2Remote(arg));
                  } else if (arg instanceof Buffer) {
                    cb(null, bufferLocal2Remote(arg));
                  } else if (arg instanceof Error) {
                    cb(null, errorLocal2Remote(arg));
                  } else {
                    cb(null, arg);
                  }

                  break;

                default:
                  cb(null, arg);
                  break;
              }
            }

            function argRemote2Local(arg, fixedRequestArgs) {
              if (!arg) {
                return arg;
              }

              switch (typeof arg) {
                case 'object':
                  if (typeof arg['type'] === 'number') {
                    var specialArg = arg;

                    switch (specialArg.type) {
                      case SpecialArgType.CB:
                        var cbId = arg.id;
                        return function () {
                          var arguments$1 = arguments;
                          var i;
                          var fixedArgs = new Array(arguments.length);
                          var message,
                              countdown = arguments.length;

                          function abortAndSendError(err) {
                            if (countdown > 0) {
                              countdown = -1;
                              message = {
                                browserfsMessage: true,
                                cbId: cbId,
                                args: [apiErrorLocal2Remote(err)]
                              };
                              worker.postMessage(message);
                            }
                          }

                          for (i = 0; i < arguments.length; i++) {
                            // Capture i and argument.
                            (function (i, arg) {
                              argLocal2Remote(arg, fixedRequestArgs, function (err, fixedArg) {
                                fixedArgs[i] = fixedArg;

                                if (err) {
                                  abortAndSendError(err);
                                } else if (--countdown === 0) {
                                  message = {
                                    browserfsMessage: true,
                                    cbId: cbId,
                                    args: fixedArgs
                                  };
                                  worker.postMessage(message);
                                }
                              });
                            })(i, arguments$1[i]);
                          }

                          if (arguments.length === 0) {
                            message = {
                              browserfsMessage: true,
                              cbId: cbId,
                              args: fixedArgs
                            };
                            worker.postMessage(message);
                          }
                        };

                      case SpecialArgType.API_ERROR:
                        return apiErrorRemote2Local(specialArg);

                      case SpecialArgType.STATS:
                        return statsRemote2Local(specialArg);

                      case SpecialArgType.FILEFLAG:
                        return fileFlagRemote2Local(specialArg);

                      case SpecialArgType.BUFFER:
                        return bufferRemote2Local(specialArg);

                      case SpecialArgType.ERROR:
                        return errorRemote2Local(specialArg);

                      default:
                        // No idea what this is.
                        return arg;
                    }
                  } else {
                    return arg;
                  }

                default:
                  return arg;
              }
            }

            worker.addEventListener('message', function (e) {
              var request = e.data;

              if (isAPIRequest(request)) {
                var args = request.args,
                    fixedArgs = new Array(args.length);

                switch (request.method) {
                  case 'close':
                  case 'sync':
                    (function () {
                      // File descriptor-relative methods.
                      var remoteCb = args[1];
                      fdConverter.applyFdAPIRequest(request, function (err) {
                        // Send response.
                        var response = {
                          browserfsMessage: true,
                          cbId: remoteCb.id,
                          args: err ? [apiErrorLocal2Remote(err)] : []
                        };
                        worker.postMessage(response);
                      });
                    })();

                    break;

                  case 'probe':
                    (function () {
                      var rootFs = _fsMock.getRootFS(),
                          remoteCb = args[1],
                          probeResponse = {
                        type: SpecialArgType.PROBE,
                        isReadOnly: rootFs.isReadOnly(),
                        supportsLinks: rootFs.supportsLinks(),
                        supportsProps: rootFs.supportsProps()
                      },
                          response = {
                        browserfsMessage: true,
                        cbId: remoteCb.id,
                        args: [probeResponse]
                      };

                      worker.postMessage(response);
                    })();

                    break;

                  default:
                    // File system methods.
                    for (var i = 0; i < args.length; i++) {
                      fixedArgs[i] = argRemote2Local(args[i], fixedArgs);
                    }

                    var rootFS = _fsMock.getRootFS();

                    rootFS[request.method].apply(rootFS, fixedArgs);
                    break;
                }
              }
            });
          };

          WorkerFS.prototype.getName = function getName() {
            return WorkerFS.Name;
          };
          /**
           * **Deprecated. Please use WorkerFS.Create() method to construct and initialize WorkerFS instances.**
           *
           * Called once both local and remote sides are set up.
           */


          WorkerFS.prototype.initialize = function initialize(cb) {
            var this$1 = this;

            if (!this._isInitialized) {
              var message = {
                browserfsMessage: true,
                method: 'probe',
                args: [this._argLocal2Remote(emptyBuffer()), this._callbackConverter.toRemoteArg(function (probeResponse) {
                  this$1._isInitialized = true;
                  this$1._isReadOnly = probeResponse.isReadOnly;
                  this$1._supportLinks = probeResponse.supportsLinks;
                  this$1._supportProps = probeResponse.supportsProps;
                  cb();
                })]
              };

              this._worker.postMessage(message);
            } else {
              cb();
            }
          };

          WorkerFS.prototype.isReadOnly = function isReadOnly() {
            return this._isReadOnly;
          };

          WorkerFS.prototype.supportsSynch = function supportsSynch() {
            return false;
          };

          WorkerFS.prototype.supportsLinks = function supportsLinks() {
            return this._supportLinks;
          };

          WorkerFS.prototype.supportsProps = function supportsProps() {
            return this._supportProps;
          };

          WorkerFS.prototype.rename = function rename(oldPath, newPath, cb) {
            this._rpc('rename', arguments);
          };

          WorkerFS.prototype.stat = function stat(p, isLstat, cb) {
            this._rpc('stat', arguments);
          };

          WorkerFS.prototype.open = function open(p, flag, mode, cb) {
            this._rpc('open', arguments);
          };

          WorkerFS.prototype.unlink = function unlink(p, cb) {
            this._rpc('unlink', arguments);
          };

          WorkerFS.prototype.rmdir = function rmdir(p, cb) {
            this._rpc('rmdir', arguments);
          };

          WorkerFS.prototype.mkdir = function mkdir(p, mode, cb) {
            this._rpc('mkdir', arguments);
          };

          WorkerFS.prototype.readdir = function readdir(p, cb) {
            this._rpc('readdir', arguments);
          };

          WorkerFS.prototype.exists = function exists(p, cb) {
            this._rpc('exists', arguments);
          };

          WorkerFS.prototype.realpath = function realpath(p, cache, cb) {
            this._rpc('realpath', arguments);
          };

          WorkerFS.prototype.truncate = function truncate(p, len, cb) {
            this._rpc('truncate', arguments);
          };

          WorkerFS.prototype.readFile = function readFile(fname, encoding, flag, cb) {
            this._rpc('readFile', arguments);
          };

          WorkerFS.prototype.writeFile = function writeFile(fname, data, encoding, flag, mode, cb) {
            this._rpc('writeFile', arguments);
          };

          WorkerFS.prototype.appendFile = function appendFile(fname, data, encoding, flag, mode, cb) {
            this._rpc('appendFile', arguments);
          };

          WorkerFS.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
            this._rpc('chmod', arguments);
          };

          WorkerFS.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
            this._rpc('chown', arguments);
          };

          WorkerFS.prototype.utimes = function utimes(p, atime, mtime, cb) {
            this._rpc('utimes', arguments);
          };

          WorkerFS.prototype.link = function link(srcpath, dstpath, cb) {
            this._rpc('link', arguments);
          };

          WorkerFS.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
            this._rpc('symlink', arguments);
          };

          WorkerFS.prototype.readlink = function readlink(p, cb) {
            this._rpc('readlink', arguments);
          };

          WorkerFS.prototype.syncClose = function syncClose(method, fd, cb) {
            this._worker.postMessage({
              browserfsMessage: true,
              method: method,
              args: [fd.toRemoteArg(), this._callbackConverter.toRemoteArg(cb)]
            });
          };

          WorkerFS.prototype._argRemote2Local = function _argRemote2Local(arg) {
            if (!arg) {
              return arg;
            }

            switch (typeof arg) {
              case 'object':
                if (typeof arg['type'] === 'number') {
                  var specialArg = arg;

                  switch (specialArg.type) {
                    case SpecialArgType.API_ERROR:
                      return apiErrorRemote2Local(specialArg);

                    case SpecialArgType.FD:
                      var fdArg = specialArg;
                      return new WorkerFile(this, fdArg.path, FileFlag.getFileFlag(fdArg.flag), Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)), fdArg.id, transferrableObjectToBuffer(fdArg.data));

                    case SpecialArgType.STATS:
                      return statsRemote2Local(specialArg);

                    case SpecialArgType.FILEFLAG:
                      return fileFlagRemote2Local(specialArg);

                    case SpecialArgType.BUFFER:
                      return bufferRemote2Local(specialArg);

                    case SpecialArgType.ERROR:
                      return errorRemote2Local(specialArg);

                    default:
                      return arg;
                  }
                } else {
                  return arg;
                }

              default:
                return arg;
            }
          };

          WorkerFS.prototype._rpc = function _rpc(methodName, args) {
            var this$1 = this;
            var fixedArgs = new Array(args.length);

            for (var i = 0; i < args.length; i++) {
              fixedArgs[i] = this$1._argLocal2Remote(args[i]);
            }

            var message = {
              browserfsMessage: true,
              method: methodName,
              args: fixedArgs
            };

            this._worker.postMessage(message);
          };
          /**
           * Converts a local argument into a remote argument. Public so WorkerFile objects can call it.
           */


          WorkerFS.prototype._argLocal2Remote = function _argLocal2Remote(arg) {
            if (!arg) {
              return arg;
            }

            switch (typeof arg) {
              case "object":
                if (arg instanceof Stats) {
                  return statsLocal2Remote(arg);
                } else if (arg instanceof ApiError) {
                  return apiErrorLocal2Remote(arg);
                } else if (arg instanceof WorkerFile) {
                  return arg.toRemoteArg();
                } else if (arg instanceof FileFlag) {
                  return fileFlagLocal2Remote(arg);
                } else if (arg instanceof Buffer) {
                  return bufferLocal2Remote(arg);
                } else if (arg instanceof Error) {
                  return errorLocal2Remote(arg);
                } else {
                  return "Unknown argument";
                }

              case "function":
                return this._callbackConverter.toRemoteArg(arg);

              default:
                return arg;
            }
          };

          return WorkerFS;
        }(BaseFileSystem);

        WorkerFS.Name = "WorkerFS";
        WorkerFS.Options = {
          worker: {
            type: "object",
            description: "The target worker that you want to connect to, or the current worker if in a worker context.",
            validator: function (v, cb) {
              // Check for a `postMessage` function.
              if (v['postMessage']) {
                cb();
              } else {
                cb(new ApiError(ErrorCode.EINVAL, "option must be a Web Worker instance."));
              }
            }
          }
        };
        /**
         * Contains utility methods for performing a variety of tasks with
         * XmlHttpRequest across browsers.
         */

        function asyncDownloadFileModern(p, type, cb) {
          var req = new XMLHttpRequest();
          req.open('GET', p, true);
          var jsonSupported = true;

          switch (type) {
            case 'buffer':
              req.responseType = 'arraybuffer';
              break;

            case 'json':
              // Some browsers don't support the JSON response type.
              // They either reset responseType, or throw an exception.
              // @see https://github.com/Modernizr/Modernizr/blob/master/src/testXhrType.js
              try {
                req.responseType = 'json';
                jsonSupported = req.responseType === 'json';
              } catch (e) {
                jsonSupported = false;
              }

              break;

            default:
              return cb(new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type));
          }

          req.onreadystatechange = function (e) {
            if (req.readyState === 4) {
              if (req.status === 200) {
                switch (type) {
                  case 'buffer':
                    // XXX: WebKit-based browsers return *null* when XHRing an empty file.
                    return cb(null, req.response ? Buffer.from(req.response) : emptyBuffer());

                  case 'json':
                    if (jsonSupported) {
                      return cb(null, req.response);
                    } else {
                      return cb(null, JSON.parse(req.responseText));
                    }

                }
              } else {
                return cb(new ApiError(req.status, "XHR error."));
              }
            }
          };

          req.send();
        }

        function syncDownloadFileModern(p, type) {
          var req = new XMLHttpRequest();
          req.open('GET', p, false); // On most platforms, we cannot set the responseType of synchronous downloads.
          // @todo Test for this; IE10 allows this, as do older versions of Chrome/FF.

          var data = null;
          var err = null; // Classic hack to download binary data as a string.

          req.overrideMimeType('text/plain; charset=x-user-defined');

          req.onreadystatechange = function (e) {
            if (req.readyState === 4) {
              if (req.status === 200) {
                switch (type) {
                  case 'buffer':
                    // Convert the text into a buffer.
                    var text = req.responseText;
                    data = Buffer.alloc(text.length); // Throw away the upper bits of each character.

                    for (var i = 0; i < text.length; i++) {
                      // This will automatically throw away the upper bit of each
                      // character for us.
                      data[i] = text.charCodeAt(i);
                    }

                    return;

                  case 'json':
                    data = JSON.parse(req.responseText);
                    return;
                }
              } else {
                err = new ApiError(req.status, "XHR error.");
                return;
              }
            }
          };

          req.send();

          if (err) {
            throw err;
          }

          return data;
        }

        function syncDownloadFileIE10(p, type) {
          var req = new XMLHttpRequest();
          req.open('GET', p, false);

          switch (type) {
            case 'buffer':
              req.responseType = 'arraybuffer';
              break;

            case 'json':
              // IE10 does not support the JSON type.
              break;

            default:
              throw new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type);
          }

          var data;
          var err;

          req.onreadystatechange = function (e) {
            if (req.readyState === 4) {
              if (req.status === 200) {
                switch (type) {
                  case 'buffer':
                    data = Buffer.from(req.response);
                    break;

                  case 'json':
                    data = JSON.parse(req.response);
                    break;
                }
              } else {
                err = new ApiError(req.status, "XHR error.");
              }
            }
          };

          req.send();

          if (err) {
            throw err;
          }

          return data;
        }
        /**
         * @hidden
         */


        function getFileSize(async, p, cb) {
          var req = new XMLHttpRequest();
          req.open('HEAD', p, async);

          req.onreadystatechange = function (e) {
            if (req.readyState === 4) {
              if (req.status === 200) {
                try {
                  return cb(null, parseInt(req.getResponseHeader('Content-Length') || '-1', 10));
                } catch (e) {
                  // In the event that the header isn't present or there is an error...
                  return cb(new ApiError(ErrorCode.EIO, "XHR HEAD error: Could not read content-length."));
                }
              } else {
                return cb(new ApiError(req.status, "XHR HEAD error."));
              }
            }
          };

          req.send();
        }
        /**
         * Asynchronously download a file as a buffer or a JSON object.
         * Note that the third function signature with a non-specialized type is
         * invalid, but TypeScript requires it when you specialize string arguments to
         * constants.
         * @hidden
         */


        var asyncDownloadFile = asyncDownloadFileModern;
        /**
         * Synchronously download a file as a buffer or a JSON object.
         * Note that the third function signature with a non-specialized type is
         * invalid, but TypeScript requires it when you specialize string arguments to
         * constants.
         * @hidden
         */

        var syncDownloadFile = isIE && typeof Blob !== 'undefined' ? syncDownloadFileIE10 : syncDownloadFileModern;
        /**
         * Synchronously retrieves the size of the given file in bytes.
         * @hidden
         */

        function getFileSizeSync(p) {
          var rv = -1;
          getFileSize(false, p, function (err, size) {
            if (err) {
              throw err;
            }

            rv = size;
          });
          return rv;
        }
        /**
         * Asynchronously retrieves the size of the given file in bytes.
         * @hidden
         */


        function getFileSizeAsync(p, cb) {
          getFileSize(true, p, cb);
        }
        /**
         * A simple class for storing a filesystem index. Assumes that all paths passed
         * to it are *absolute* paths.
         *
         * Can be used as a partial or a full index, although care must be taken if used
         * for the former purpose, especially when directories are concerned.
         */


        var FileIndex = function FileIndex() {
          // _index is a single-level key,value store that maps *directory* paths to
          // DirInodes. File information is only contained in DirInodes themselves.
          this._index = {}; // Create the root directory.

          this.addPath('/', new DirInode());
        };
        /**
         * Static method for constructing indices from a JSON listing.
         * @param listing Directory listing generated by tools/XHRIndexer.coffee
         * @return A new FileIndex object.
         */


        FileIndex.fromListing = function fromListing(listing) {
          var idx = new FileIndex(); // Add a root DirNode.

          var rootInode = new DirInode();
          idx._index['/'] = rootInode;
          var queue = [['', listing, rootInode]];

          while (queue.length > 0) {
            var inode = void 0;
            var next = queue.pop();
            var pwd = next[0];
            var tree = next[1];
            var parent = next[2];

            for (var node in tree) {
              if (tree.hasOwnProperty(node)) {
                var children = tree[node];
                var name = pwd + "/" + node;

                if (children) {
                  idx._index[name] = inode = new DirInode();
                  queue.push([name, children, inode]);
                } else {
                  // This inode doesn't have correct size information, noted with -1.
                  inode = new FileInode(new Stats(FileType.FILE, -1, 0x16D));
                }

                if (parent) {
                  parent._ls[node] = inode;
                }
              }
            }
          }

          return idx;
        };
        /**
         * Runs the given function over all files in the index.
         */


        FileIndex.prototype.fileIterator = function fileIterator(cb) {
          var this$1 = this;

          for (var path$$1 in this$1._index) {
            if (this$1._index.hasOwnProperty(path$$1)) {
              var dir = this$1._index[path$$1];
              var files = dir.getListing();

              for (var i = 0, list = files; i < list.length; i += 1) {
                var file = list[i];
                var item = dir.getItem(file);

                if (isFileInode(item)) {
                  cb(item.getData());
                }
              }
            }
          }
        };
        /**
         * Adds the given absolute path to the index if it is not already in the index.
         * Creates any needed parent directories.
         * @param path The path to add to the index.
         * @param inode The inode for the
         *   path to add.
         * @return 'True' if it was added or already exists, 'false' if there
         *   was an issue adding it (e.g. item in path is a file, item exists but is
         *   different).
         * @todo If adding fails and implicitly creates directories, we do not clean up
         *   the new empty directories.
         */


        FileIndex.prototype.addPath = function addPath(path$$1, inode) {
          if (!inode) {
            throw new Error('Inode must be specified');
          }

          if (path$$1[0] !== '/') {
            throw new Error('Path must be absolute, got: ' + path$$1);
          } // Check if it already exists.


          if (this._index.hasOwnProperty(path$$1)) {
            return this._index[path$$1] === inode;
          }

          var splitPath = this._split_path(path$$1);

          var dirpath = splitPath[0];
          var itemname = splitPath[1]; // Try to add to its parent directory first.

          var parent = this._index[dirpath];

          if (parent === undefined && path$$1 !== '/') {
            // Create parent.
            parent = new DirInode();

            if (!this.addPath(dirpath, parent)) {
              return false;
            }
          } // Add myself to my parent.


          if (path$$1 !== '/') {
            if (!parent.addItem(itemname, inode)) {
              return false;
            }
          } // If I'm a directory, add myself to the index.


          if (isDirInode(inode)) {
            this._index[path$$1] = inode;
          }

          return true;
        };
        /**
         * Adds the given absolute path to the index if it is not already in the index.
         * The path is added without special treatment (no joining of adjacent separators, etc).
         * Creates any needed parent directories.
         * @param path The path to add to the index.
         * @param inode The inode for the
         *   path to add.
         * @return 'True' if it was added or already exists, 'false' if there
         *   was an issue adding it (e.g. item in path is a file, item exists but is
         *   different).
         * @todo If adding fails and implicitly creates directories, we do not clean up
         *   the new empty directories.
         */


        FileIndex.prototype.addPathFast = function addPathFast(path$$1, inode) {
          var itemNameMark = path$$1.lastIndexOf('/');
          var parentPath = itemNameMark === 0 ? "/" : path$$1.substring(0, itemNameMark);
          var itemName = path$$1.substring(itemNameMark + 1); // Try to add to its parent directory first.

          var parent = this._index[parentPath];

          if (parent === undefined) {
            // Create parent.
            parent = new DirInode();
            this.addPathFast(parentPath, parent);
          }

          if (!parent.addItem(itemName, inode)) {
            return false;
          } // If adding a directory, add to the index as well.


          if (inode.isDir()) {
            this._index[path$$1] = inode;
          }

          return true;
        };
        /**
         * Removes the given path. Can be a file or a directory.
         * @return The removed item,
         *   or null if it did not exist.
         */


        FileIndex.prototype.removePath = function removePath(path$$1) {
          var this$1 = this;

          var splitPath = this._split_path(path$$1);

          var dirpath = splitPath[0];
          var itemname = splitPath[1]; // Try to remove it from its parent directory first.

          var parent = this._index[dirpath];

          if (parent === undefined) {
            return null;
          } // Remove myself from my parent.


          var inode = parent.remItem(itemname);

          if (inode === null) {
            return null;
          } // If I'm a directory, remove myself from the index, and remove my children.


          if (isDirInode(inode)) {
            var children = inode.getListing();

            for (var i = 0, list = children; i < list.length; i += 1) {
              var child = list[i];
              this$1.removePath(path$$1 + '/' + child);
            } // Remove the directory from the index, unless it's the root.


            if (path$$1 !== '/') {
              delete this._index[path$$1];
            }
          }

          return inode;
        };
        /**
         * Retrieves the directory listing of the given path.
         * @return An array of files in the given path, or 'null' if it does not exist.
         */


        FileIndex.prototype.ls = function ls(path$$1) {
          var item = this._index[path$$1];

          if (item === undefined) {
            return null;
          }

          return item.getListing();
        };
        /**
         * Returns the inode of the given item.
         * @return Returns null if the item does not exist.
         */


        FileIndex.prototype.getInode = function getInode(path$$1) {
          var splitPath = this._split_path(path$$1);

          var dirpath = splitPath[0];
          var itemname = splitPath[1]; // Retrieve from its parent directory.

          var parent = this._index[dirpath];

          if (parent === undefined) {
            return null;
          } // Root case


          if (dirpath === path$$1) {
            return parent;
          }

          return parent.getItem(itemname);
        };
        /**
         * Split into a (directory path, item name) pair
         */


        FileIndex.prototype._split_path = function _split_path(p) {
          var dirpath = path.dirname(p);
          var itemname = p.substr(dirpath.length + (dirpath === "/" ? 0 : 1));
          return [dirpath, itemname];
        };
        /**
         * Inode for a file. Stores an arbitrary (filesystem-specific) data payload.
         */


        var FileInode = function FileInode(data) {
          this.data = data;
        };

        FileInode.prototype.isFile = function isFile() {
          return true;
        };

        FileInode.prototype.isDir = function isDir() {
          return false;
        };

        FileInode.prototype.getData = function getData() {
          return this.data;
        };

        FileInode.prototype.setData = function setData(data) {
          this.data = data;
        };
        /**
         * Inode for a directory. Currently only contains the directory listing.
         */


        var DirInode = function DirInode(data) {
          if (data === void 0) data = null;
          this.data = data;
          this._ls = {};
        };

        DirInode.prototype.isFile = function isFile() {
          return false;
        };

        DirInode.prototype.isDir = function isDir() {
          return true;
        };

        DirInode.prototype.getData = function getData() {
          return this.data;
        };
        /**
         * Return a Stats object for this inode.
         * @todo Should probably remove this at some point. This isn't the
         *   responsibility of the FileIndex.
         */


        DirInode.prototype.getStats = function getStats() {
          return new Stats(FileType.DIRECTORY, 4096, 0x16D);
        };
        /**
         * Returns the directory listing for this directory. Paths in the directory are
         * relative to the directory's path.
         * @return The directory listing for this directory.
         */


        DirInode.prototype.getListing = function getListing() {
          return Object.keys(this._ls);
        };
        /**
         * Returns the inode for the indicated item, or null if it does not exist.
         * @param p Name of item in this directory.
         */


        DirInode.prototype.getItem = function getItem(p) {
          var item = this._ls[p];
          return item ? item : null;
        };
        /**
         * Add the given item to the directory listing. Note that the given inode is
         * not copied, and will be mutated by the DirInode if it is a DirInode.
         * @param p Item name to add to the directory listing.
         * @param inode The inode for the
         *   item to add to the directory inode.
         * @return True if it was added, false if it already existed.
         */


        DirInode.prototype.addItem = function addItem(p, inode) {
          if (p in this._ls) {
            return false;
          }

          this._ls[p] = inode;
          return true;
        };
        /**
         * Removes the given item from the directory listing.
         * @param p Name of item to remove from the directory listing.
         * @return Returns the item
         *   removed, or null if the item did not exist.
         */


        DirInode.prototype.remItem = function remItem(p) {
          var item = this._ls[p];

          if (item === undefined) {
            return null;
          }

          delete this._ls[p];
          return item;
        };
        /**
         * @hidden
         */


        function isFileInode(inode) {
          return !!inode && inode.isFile();
        }
        /**
         * @hidden
         */


        function isDirInode(inode) {
          return !!inode && inode.isDir();
        }
        /**
         * Try to convert the given buffer into a string, and pass it to the callback.
         * Optimization that removes the needed try/catch into a helper function, as
         * this is an uncommon case.
         * @hidden
         */


        function tryToString(buff, encoding, cb) {
          try {
            cb(null, buff.toString(encoding));
          } catch (e) {
            cb(e);
          }
        }
        /**
         * A simple filesystem backed by XMLHttpRequests. You must create a directory listing using the
         * `make_xhrfs_index` tool provided by BrowserFS.
         *
         * If you install BrowserFS globally with `npm i -g browserfs`, you can generate a listing by
         * running `make_xhrfs_index` in your terminal in the directory you would like to index:
         *
         * ```
         * make_xhrfs_index > index.json
         * ```
         *
         * Listings objects look like the following:
         *
         * ```json
         * {
         *   "home": {
         *     "jvilk": {
         *       "someFile.txt": null,
         *       "someDir": {
         *         // Empty directory
         *       }
         *     }
         *   }
         * }
         * ```
         *
         * *This example has the folder `/home/jvilk` with subfile `someFile.txt` and subfolder `someDir`.*
         */


        var XmlHttpRequest = function (BaseFileSystem$$1) {
          function XmlHttpRequest(listingUrlOrObj, prefixUrl, deprecateMsg) {
            if (prefixUrl === void 0) prefixUrl = '';
            if (deprecateMsg === void 0) deprecateMsg = true;
            BaseFileSystem$$1.call(this);

            if (!listingUrlOrObj) {
              listingUrlOrObj = 'index.json';
            } // prefix_url must end in a directory separator.


            if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== '/') {
              prefixUrl = prefixUrl + '/';
            }

            this.prefixUrl = prefixUrl;
            var listing = null;

            if (typeof listingUrlOrObj === "string") {
              listing = this._requestFileSync(listingUrlOrObj, 'json');

              if (!listing) {
                throw new Error("Unable to find listing at URL: ${listingUrlOrObj}");
              }
            } else {
              listing = listingUrlOrObj;
            }

            deprecationMessage(deprecateMsg, XmlHttpRequest.Name, {
              index: typeof listingUrlOrObj === "string" ? listingUrlOrObj : "file index as an object",
              baseUrl: prefixUrl
            });
            this._index = FileIndex.fromListing(listing);
          }

          if (BaseFileSystem$$1) XmlHttpRequest.__proto__ = BaseFileSystem$$1;
          XmlHttpRequest.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          XmlHttpRequest.prototype.constructor = XmlHttpRequest;
          /**
           * Construct an XmlHttpRequest file system backend with the given options.
           */

          XmlHttpRequest.Create = function Create(opts, cb) {
            if (opts.index === undefined) {
              opts.index = "index.json";
            }

            if (typeof opts.index === "string") {
              XmlHttpRequest.FromURL(opts.index, cb, opts.baseUrl, false);
            } else {
              cb(null, new XmlHttpRequest(opts.index, opts.baseUrl, false));
            }
          };

          XmlHttpRequest.isAvailable = function isAvailable() {
            return typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null;
          };
          /**
           * **Deprecated. Please use XmlHttpRequest.Create() method instead to construct XmlHttpRequest objects.**
           *
           * Constructs an XmlHttpRequest object using the directory listing at the given URL.
           * Uses the base URL as the URL prefix for fetched files.
           * @param cb Called when the file system has been instantiated, or if an error occurs.
           */


          XmlHttpRequest.FromURL = function FromURL(url, cb, baseUrl, deprecateMsg) {
            if (baseUrl === void 0) baseUrl = url.slice(0, url.lastIndexOf('/') + 1);
            if (deprecateMsg === void 0) deprecateMsg = true;

            if (deprecateMsg) {
              console.warn("[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use 'XmlHttpRequest.Create({ index: \"" + url + "\", baseUrl: \"" + baseUrl + "\" }, cb)' instead.");
            }

            asyncDownloadFile(url, "json", function (e, data) {
              if (e) {
                cb(e);
              } else {
                cb(null, new XmlHttpRequest(data, baseUrl, false));
              }
            });
          };

          XmlHttpRequest.prototype.empty = function empty() {
            this._index.fileIterator(function (file) {
              file.fileData = null;
            });
          };

          XmlHttpRequest.prototype.getName = function getName() {
            return XmlHttpRequest.Name;
          };

          XmlHttpRequest.prototype.diskSpace = function diskSpace(path$$1, cb) {
            // Read-only file system. We could calculate the total space, but that's not
            // important right now.
            cb(0, 0);
          };

          XmlHttpRequest.prototype.isReadOnly = function isReadOnly() {
            return true;
          };

          XmlHttpRequest.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          XmlHttpRequest.prototype.supportsProps = function supportsProps() {
            return false;
          };

          XmlHttpRequest.prototype.supportsSynch = function supportsSynch() {
            return true;
          };
          /**
           * Special XHR function: Preload the given file into the index.
           * @param [String] path
           * @param [BrowserFS.Buffer] buffer
           */


          XmlHttpRequest.prototype.preloadFile = function preloadFile(path$$1, buffer$$1) {
            var inode = this._index.getInode(path$$1);

            if (isFileInode(inode)) {
              if (inode === null) {
                throw ApiError.ENOENT(path$$1);
              }

              var stats = inode.getData();
              stats.size = buffer$$1.length;
              stats.fileData = buffer$$1;
            } else {
              throw ApiError.EISDIR(path$$1);
            }
          };

          XmlHttpRequest.prototype.stat = function stat(path$$1, isLstat, cb) {
            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              return cb(ApiError.ENOENT(path$$1));
            }

            var stats;

            if (isFileInode(inode)) {
              stats = inode.getData(); // At this point, a non-opened file will still have default stats from the listing.

              if (stats.size < 0) {
                this._requestFileSizeAsync(path$$1, function (e, size) {
                  if (e) {
                    return cb(e);
                  }

                  stats.size = size;
                  cb(null, stats.clone());
                });
              } else {
                cb(null, stats.clone());
              }
            } else if (isDirInode(inode)) {
              stats = inode.getStats();
              cb(null, stats);
            } else {
              cb(ApiError.FileError(ErrorCode.EINVAL, path$$1));
            }
          };

          XmlHttpRequest.prototype.statSync = function statSync(path$$1, isLstat) {
            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              throw ApiError.ENOENT(path$$1);
            }

            var stats;

            if (isFileInode(inode)) {
              stats = inode.getData(); // At this point, a non-opened file will still have default stats from the listing.

              if (stats.size < 0) {
                stats.size = this._requestFileSizeSync(path$$1);
              }
            } else if (isDirInode(inode)) {
              stats = inode.getStats();
            } else {
              throw ApiError.FileError(ErrorCode.EINVAL, path$$1);
            }

            return stats;
          };

          XmlHttpRequest.prototype.open = function open(path$$1, flags, mode, cb) {
            // INVARIANT: You can't write to files on this file system.
            if (flags.isWriteable()) {
              return cb(new ApiError(ErrorCode.EPERM, path$$1));
            }

            var self = this; // Check if the path exists, and is a file.

            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              return cb(ApiError.ENOENT(path$$1));
            }

            if (isFileInode(inode)) {
              var stats = inode.getData();

              switch (flags.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                case ActionType.TRUNCATE_FILE:
                  return cb(ApiError.EEXIST(path$$1));

                case ActionType.NOP:
                  // Use existing file contents.
                  // XXX: Uh, this maintains the previously-used flag.
                  if (stats.fileData) {
                    return cb(null, new NoSyncFile(self, path$$1, flags, stats.clone(), stats.fileData));
                  } // @todo be lazier about actually requesting the file


                  this._requestFileAsync(path$$1, 'buffer', function (err, buffer$$1) {
                    if (err) {
                      return cb(err);
                    } // we don't initially have file sizes


                    stats.size = buffer$$1.length;
                    stats.fileData = buffer$$1;
                    return cb(null, new NoSyncFile(self, path$$1, flags, stats.clone(), buffer$$1));
                  });

                  break;

                default:
                  return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.'));
              }
            } else {
              return cb(ApiError.EISDIR(path$$1));
            }
          };

          XmlHttpRequest.prototype.openSync = function openSync(path$$1, flags, mode) {
            // INVARIANT: You can't write to files on this file system.
            if (flags.isWriteable()) {
              throw new ApiError(ErrorCode.EPERM, path$$1);
            } // Check if the path exists, and is a file.


            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              throw ApiError.ENOENT(path$$1);
            }

            if (isFileInode(inode)) {
              var stats = inode.getData();

              switch (flags.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                case ActionType.TRUNCATE_FILE:
                  throw ApiError.EEXIST(path$$1);

                case ActionType.NOP:
                  // Use existing file contents.
                  // XXX: Uh, this maintains the previously-used flag.
                  if (stats.fileData) {
                    return new NoSyncFile(this, path$$1, flags, stats.clone(), stats.fileData);
                  } // @todo be lazier about actually requesting the file


                  var buffer$$1 = this._requestFileSync(path$$1, 'buffer'); // we don't initially have file sizes


                  stats.size = buffer$$1.length;
                  stats.fileData = buffer$$1;
                  return new NoSyncFile(this, path$$1, flags, stats.clone(), buffer$$1);

                default:
                  throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
              }
            } else {
              throw ApiError.EISDIR(path$$1);
            }
          };

          XmlHttpRequest.prototype.readdir = function readdir(path$$1, cb) {
            try {
              cb(null, this.readdirSync(path$$1));
            } catch (e) {
              cb(e);
            }
          };

          XmlHttpRequest.prototype.readdirSync = function readdirSync(path$$1) {
            // Check if it exists.
            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              throw ApiError.ENOENT(path$$1);
            } else if (isDirInode(inode)) {
              return inode.getListing();
            } else {
              throw ApiError.ENOTDIR(path$$1);
            }
          };
          /**
           * We have the entire file as a buffer; optimize readFile.
           */


          XmlHttpRequest.prototype.readFile = function readFile(fname, encoding, flag, cb) {
            // Wrap cb in file closing code.
            var oldCb = cb; // Get file.

            this.open(fname, flag, 0x1a4, function (err, fd) {
              if (err) {
                return cb(err);
              }

              cb = function (err, arg) {
                fd.close(function (err2) {
                  if (!err) {
                    err = err2;
                  }

                  return oldCb(err, arg);
                });
              };

              var fdCast = fd;
              var fdBuff = fdCast.getBuffer();

              if (encoding === null) {
                cb(err, copyingSlice(fdBuff));
              } else {
                tryToString(fdBuff, encoding, cb);
              }
            });
          };
          /**
           * Specially-optimized readfile.
           */


          XmlHttpRequest.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
            // Get file.
            var fd = this.openSync(fname, flag, 0x1a4);

            try {
              var fdCast = fd;
              var fdBuff = fdCast.getBuffer();

              if (encoding === null) {
                return copyingSlice(fdBuff);
              }

              return fdBuff.toString(encoding);
            } finally {
              fd.closeSync();
            }
          };

          XmlHttpRequest.prototype.getXhrPath = function getXhrPath(filePath) {
            if (filePath.charAt(0) === '/') {
              filePath = filePath.slice(1);
            }

            return this.prefixUrl + filePath;
          };

          XmlHttpRequest.prototype._requestFileAsync = function _requestFileAsync(p, type, cb) {
            asyncDownloadFile(this.getXhrPath(p), type, cb);
          };

          XmlHttpRequest.prototype._requestFileSync = function _requestFileSync(p, type) {
            return syncDownloadFile(this.getXhrPath(p), type);
          };
          /**
           * Only requests the HEAD content, for the file size.
           */


          XmlHttpRequest.prototype._requestFileSizeAsync = function _requestFileSizeAsync(path$$1, cb) {
            getFileSizeAsync(this.getXhrPath(path$$1), cb);
          };

          XmlHttpRequest.prototype._requestFileSizeSync = function _requestFileSizeSync(path$$1) {
            return getFileSizeSync(this.getXhrPath(path$$1));
          };

          return XmlHttpRequest;
        }(BaseFileSystem);

        XmlHttpRequest.Name = "XmlHttpRequest";
        XmlHttpRequest.Options = {
          index: {
            type: ["string", "object"],
            optional: true,
            description: "URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`."
          },
          baseUrl: {
            type: "string",
            optional: true,
            description: "Used as the URL prefix for fetched files. Default: Fetch files relative to the index."
          }
        };
        /**
         * (Nonstandard) String utility function for 8-bit ASCII with the extended
         * character set. Unlike the ASCII above, we do not mask the high bits.
         *
         * Placed into a separate file so it can be used with other Buffer implementations.
         * @see http://en.wikipedia.org/wiki/Extended_ASCII
         */

        /**
         * (Nonstandard) String utility function for 8-bit ASCII with the extended
         * character set. Unlike the ASCII above, we do not mask the high bits.
         *
         * Placed into a separate file so it can be used with other Buffer implementations.
         * @see http://en.wikipedia.org/wiki/Extended_ASCII
         */

        var ExtendedASCII = function ExtendedASCII() {};

        ExtendedASCII.str2byte = function str2byte(str, buf) {
          var length = str.length > buf.length ? buf.length : str.length;

          for (var i = 0; i < length; i++) {
            var charCode = str.charCodeAt(i);

            if (charCode > 0x7F) {
              // Check if extended ASCII.
              var charIdx = ExtendedASCII.extendedChars.indexOf(str.charAt(i));

              if (charIdx > -1) {
                charCode = charIdx + 0x80;
              } // Otherwise, keep it as-is.

            }

            buf[charCode] = i;
          }

          return length;
        };

        ExtendedASCII.byte2str = function byte2str(buff) {
          var chars = new Array(buff.length);

          for (var i = 0; i < buff.length; i++) {
            var charCode = buff[i];

            if (charCode > 0x7F) {
              chars[i] = ExtendedASCII.extendedChars[charCode - 128];
            } else {
              chars[i] = String.fromCharCode(charCode);
            }
          }

          return chars.join('');
        };

        ExtendedASCII.byteLength = function byteLength(str) {
          return str.length;
        };

        ExtendedASCII.extendedChars = ['\u00C7', '\u00FC', '\u00E9', '\u00E2', '\u00E4', '\u00E0', '\u00E5', '\u00E7', '\u00EA', '\u00EB', '\u00E8', '\u00EF', '\u00EE', '\u00EC', '\u00C4', '\u00C5', '\u00C9', '\u00E6', '\u00C6', '\u00F4', '\u00F6', '\u00F2', '\u00FB', '\u00F9', '\u00FF', '\u00D6', '\u00DC', '\u00F8', '\u00A3', '\u00D8', '\u00D7', '\u0192', '\u00E1', '\u00ED', '\u00F3', '\u00FA', '\u00F1', '\u00D1', '\u00AA', '\u00BA', '\u00BF', '\u00AE', '\u00AC', '\u00BD', '\u00BC', '\u00A1', '\u00AB', '\u00BB', '_', '_', '_', '\u00A6', '\u00A6', '\u00C1', '\u00C2', '\u00C0', '\u00A9', '\u00A6', '\u00A6', '+', '+', '\u00A2', '\u00A5', '+', '+', '-', '-', '+', '-', '+', '\u00E3', '\u00C3', '+', '+', '-', '-', '\u00A6', '-', '+', '\u00A4', '\u00F0', '\u00D0', '\u00CA', '\u00CB', '\u00C8', 'i', '\u00CD', '\u00CE', '\u00CF', '+', '+', '_', '_', '\u00A6', '\u00CC', '_', '\u00D3', '\u00DF', '\u00D4', '\u00D2', '\u00F5', '\u00D5', '\u00B5', '\u00FE', '\u00DE', '\u00DA', '\u00DB', '\u00D9', '\u00FD', '\u00DD', '\u00AF', '\u00B4', '\u00AD', '\u00B1', '_', '\u00BE', '\u00B6', '\u00A7', '\u00F7', '\u00B8', '\u00B0', '\u00A8', '\u00B7', '\u00B9', '\u00B3', '\u00B2', '_', ' '];
        /**
         * @hidden
         */

        var inflateRaw = __webpack_require__(31).inflateRaw;
        /**
         * Maps CompressionMethod => function that decompresses.
         * @hidden
         */


        var decompressionMethods = {};
        /**
         * 4.4.2.2: Indicates the compatibiltiy of a file's external attributes.
         */

        var ExternalFileAttributeType;

        (function (ExternalFileAttributeType) {
          ExternalFileAttributeType[ExternalFileAttributeType["MSDOS"] = 0] = "MSDOS";
          ExternalFileAttributeType[ExternalFileAttributeType["AMIGA"] = 1] = "AMIGA";
          ExternalFileAttributeType[ExternalFileAttributeType["OPENVMS"] = 2] = "OPENVMS";
          ExternalFileAttributeType[ExternalFileAttributeType["UNIX"] = 3] = "UNIX";
          ExternalFileAttributeType[ExternalFileAttributeType["VM_CMS"] = 4] = "VM_CMS";
          ExternalFileAttributeType[ExternalFileAttributeType["ATARI_ST"] = 5] = "ATARI_ST";
          ExternalFileAttributeType[ExternalFileAttributeType["OS2_HPFS"] = 6] = "OS2_HPFS";
          ExternalFileAttributeType[ExternalFileAttributeType["MAC"] = 7] = "MAC";
          ExternalFileAttributeType[ExternalFileAttributeType["Z_SYSTEM"] = 8] = "Z_SYSTEM";
          ExternalFileAttributeType[ExternalFileAttributeType["CP_M"] = 9] = "CP_M";
          ExternalFileAttributeType[ExternalFileAttributeType["NTFS"] = 10] = "NTFS";
          ExternalFileAttributeType[ExternalFileAttributeType["MVS"] = 11] = "MVS";
          ExternalFileAttributeType[ExternalFileAttributeType["VSE"] = 12] = "VSE";
          ExternalFileAttributeType[ExternalFileAttributeType["ACORN_RISC"] = 13] = "ACORN_RISC";
          ExternalFileAttributeType[ExternalFileAttributeType["VFAT"] = 14] = "VFAT";
          ExternalFileAttributeType[ExternalFileAttributeType["ALT_MVS"] = 15] = "ALT_MVS";
          ExternalFileAttributeType[ExternalFileAttributeType["BEOS"] = 16] = "BEOS";
          ExternalFileAttributeType[ExternalFileAttributeType["TANDEM"] = 17] = "TANDEM";
          ExternalFileAttributeType[ExternalFileAttributeType["OS_400"] = 18] = "OS_400";
          ExternalFileAttributeType[ExternalFileAttributeType["OSX"] = 19] = "OSX";
        })(ExternalFileAttributeType || (ExternalFileAttributeType = {}));
        /**
         * 4.4.5
         */


        var CompressionMethod;

        (function (CompressionMethod) {
          CompressionMethod[CompressionMethod["STORED"] = 0] = "STORED";
          CompressionMethod[CompressionMethod["SHRUNK"] = 1] = "SHRUNK";
          CompressionMethod[CompressionMethod["REDUCED_1"] = 2] = "REDUCED_1";
          CompressionMethod[CompressionMethod["REDUCED_2"] = 3] = "REDUCED_2";
          CompressionMethod[CompressionMethod["REDUCED_3"] = 4] = "REDUCED_3";
          CompressionMethod[CompressionMethod["REDUCED_4"] = 5] = "REDUCED_4";
          CompressionMethod[CompressionMethod["IMPLODE"] = 6] = "IMPLODE";
          CompressionMethod[CompressionMethod["DEFLATE"] = 8] = "DEFLATE";
          CompressionMethod[CompressionMethod["DEFLATE64"] = 9] = "DEFLATE64";
          CompressionMethod[CompressionMethod["TERSE_OLD"] = 10] = "TERSE_OLD";
          CompressionMethod[CompressionMethod["BZIP2"] = 12] = "BZIP2";
          CompressionMethod[CompressionMethod["LZMA"] = 14] = "LZMA";
          CompressionMethod[CompressionMethod["TERSE_NEW"] = 18] = "TERSE_NEW";
          CompressionMethod[CompressionMethod["LZ77"] = 19] = "LZ77";
          CompressionMethod[CompressionMethod["WAVPACK"] = 97] = "WAVPACK";
          CompressionMethod[CompressionMethod["PPMD"] = 98] = "PPMD"; // PPMd version I, Rev 1
        })(CompressionMethod || (CompressionMethod = {}));
        /**
         * Converts the input time and date in MS-DOS format into a JavaScript Date
         * object.
         * @hidden
         */


        function msdos2date(time, date) {
          // MS-DOS Date
          // |0 0 0 0  0|0 0 0  0|0 0 0  0 0 0 0
          //   D (1-31)  M (1-23)  Y (from 1980)
          var day = date & 0x1F; // JS date is 0-indexed, DOS is 1-indexed.

          var month = (date >> 5 & 0xF) - 1;
          var year = (date >> 9) + 1980; // MS DOS Time
          // |0 0 0 0  0|0 0 0  0 0 0|0  0 0 0 0
          //    Second      Minute       Hour

          var second = time & 0x1F;
          var minute = time >> 5 & 0x3F;
          var hour = time >> 11;
          return new Date(year, month, day, hour, minute, second);
        }
        /**
         * Safely returns the string from the buffer, even if it is 0 bytes long.
         * (Normally, calling toString() on a buffer with start === end causes an
         * exception).
         * @hidden
         */


        function safeToString(buff, useUTF8, start, length) {
          if (length === 0) {
            return "";
          } else if (useUTF8) {
            return buff.toString('utf8', start, start + length);
          } else {
            return ExtendedASCII.byte2str(buff.slice(start, start + length));
          }
        }
        /*
           4.3.6 Overall .ZIP file format:
        
              [local file header 1]
              [encryption header 1]
              [file data 1]
              [data descriptor 1]
              .
              .
              .
              [local file header n]
              [encryption header n]
              [file data n]
              [data descriptor n]
              [archive decryption header]
              [archive extra data record]
              [central directory header 1]
              .
              .
              .
              [central directory header n]
              [zip64 end of central directory record]
              [zip64 end of central directory locator]
              [end of central directory record]
        */

        /**
         * 4.3.7  Local file header:
         *
         *     local file header signature     4 bytes  (0x04034b50)
         *     version needed to extract       2 bytes
         *     general purpose bit flag        2 bytes
         *     compression method              2 bytes
         *    last mod file time              2 bytes
         *    last mod file date              2 bytes
         *    crc-32                          4 bytes
         *    compressed size                 4 bytes
         *    uncompressed size               4 bytes
         *    file name length                2 bytes
         *    extra field length              2 bytes
         *
         *    file name (variable size)
         *    extra field (variable size)
         */


        var FileHeader = function FileHeader(data) {
          this.data = data;

          if (data.readUInt32LE(0) !== 0x04034b50) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Local file header has invalid signature: " + this.data.readUInt32LE(0));
          }
        };

        FileHeader.prototype.versionNeeded = function versionNeeded() {
          return this.data.readUInt16LE(4);
        };

        FileHeader.prototype.flags = function flags() {
          return this.data.readUInt16LE(6);
        };

        FileHeader.prototype.compressionMethod = function compressionMethod() {
          return this.data.readUInt16LE(8);
        };

        FileHeader.prototype.lastModFileTime = function lastModFileTime() {
          // Time and date is in MS-DOS format.
          return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));
        };

        FileHeader.prototype.rawLastModFileTime = function rawLastModFileTime() {
          return this.data.readUInt32LE(10);
        };

        FileHeader.prototype.crc32 = function crc32() {
          return this.data.readUInt32LE(14);
        };
        /**
         * These two values are COMPLETELY USELESS.
         *
         * Section 4.4.9:
         *If bit 3 of the general purpose bit flag is set,
         *these fields are set to zero in the local header and the
         *correct values are put in the data descriptor and
         *in the central directory.
         *
         * So we'll just use the central directory's values.
         */
        // public compressedSize(): number { return this.data.readUInt32LE(18); }
        // public uncompressedSize(): number { return this.data.readUInt32LE(22); }


        FileHeader.prototype.fileNameLength = function fileNameLength() {
          return this.data.readUInt16LE(26);
        };

        FileHeader.prototype.extraFieldLength = function extraFieldLength() {
          return this.data.readUInt16LE(28);
        };

        FileHeader.prototype.fileName = function fileName() {
          return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());
        };

        FileHeader.prototype.extraField = function extraField() {
          var start = 30 + this.fileNameLength();
          return this.data.slice(start, start + this.extraFieldLength());
        };

        FileHeader.prototype.totalSize = function totalSize() {
          return 30 + this.fileNameLength() + this.extraFieldLength();
        };

        FileHeader.prototype.useUTF8 = function useUTF8() {
          return (this.flags() & 0x800) === 0x800;
        };
        /**
         * 4.3.8  File data
         *
         *   Immediately following the local header for a file
         *   SHOULD be placed the compressed or stored data for the file.
         *   If the file is encrypted, the encryption header for the file
         *   SHOULD be placed after the local header and before the file
         *   data. The series of [local file header][encryption header]
         *   [file data][data descriptor] repeats for each file in the
         *   .ZIP archive.
         *
         *   Zero-byte files, directories, and other file types that
         *   contain no content MUST not include file data.
         */


        var FileData = function FileData(header, record, data) {
          this.header = header;
          this.record = record;
          this.data = data;
        };

        FileData.prototype.decompress = function decompress() {
          // Check the compression
          var compressionMethod = this.header.compressionMethod();
          var fcn = decompressionMethods[compressionMethod];

          if (fcn) {
            return fcn(this.data, this.record.compressedSize(), this.record.uncompressedSize(), this.record.flag());
          } else {
            var name = CompressionMethod[compressionMethod];

            if (!name) {
              name = "Unknown: " + compressionMethod;
            }

            throw new ApiError(ErrorCode.EINVAL, "Invalid compression method on file '" + this.header.fileName() + "': " + name);
          }
        };

        FileData.prototype.getHeader = function getHeader() {
          return this.header;
        };

        FileData.prototype.getRecord = function getRecord() {
          return this.record;
        };

        FileData.prototype.getRawData = function getRawData() {
          return this.data;
        };
        /**
         * 4.3.9  Data descriptor:
         *
         *    crc-32                          4 bytes
         *    compressed size                 4 bytes
         *    uncompressed size               4 bytes
         */


        var DataDescriptor = function DataDescriptor(data) {
          this.data = data;
        };

        DataDescriptor.prototype.crc32 = function crc32() {
          return this.data.readUInt32LE(0);
        };

        DataDescriptor.prototype.compressedSize = function compressedSize() {
          return this.data.readUInt32LE(4);
        };

        DataDescriptor.prototype.uncompressedSize = function uncompressedSize() {
          return this.data.readUInt32LE(8);
        };
        /*
        ` 4.3.10  Archive decryption header:
        
              4.3.10.1 The Archive Decryption Header is introduced in version 6.2
              of the ZIP format specification.  This record exists in support
              of the Central Directory Encryption Feature implemented as part of
              the Strong Encryption Specification as described in this document.
              When the Central Directory Structure is encrypted, this decryption
              header MUST precede the encrypted data segment.
         */

        /**
         * 4.3.11  Archive extra data record:
         *
         *      archive extra data signature    4 bytes  (0x08064b50)
         *      extra field length              4 bytes
         *      extra field data                (variable size)
         *
         *    4.3.11.1 The Archive Extra Data Record is introduced in version 6.2
         *    of the ZIP format specification.  This record MAY be used in support
         *    of the Central Directory Encryption Feature implemented as part of
         *    the Strong Encryption Specification as described in this document.
         *    When present, this record MUST immediately precede the central
         *    directory data structure.
         */


        var ArchiveExtraDataRecord = function ArchiveExtraDataRecord(data) {
          this.data = data;

          if (this.data.readUInt32LE(0) !== 0x08064b50) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid archive extra data record signature: " + this.data.readUInt32LE(0));
          }
        };

        ArchiveExtraDataRecord.prototype.length = function length() {
          return this.data.readUInt32LE(4);
        };

        ArchiveExtraDataRecord.prototype.extraFieldData = function extraFieldData() {
          return this.data.slice(8, 8 + this.length());
        };
        /**
         * 4.3.13 Digital signature:
         *
         *      header signature                4 bytes  (0x05054b50)
         *      size of data                    2 bytes
         *      signature data (variable size)
         *
         *    With the introduction of the Central Directory Encryption
         *    feature in version 6.2 of this specification, the Central
         *    Directory Structure MAY be stored both compressed and encrypted.
         *    Although not required, it is assumed when encrypting the
         *    Central Directory Structure, that it will be compressed
         *    for greater storage efficiency.  Information on the
         *    Central Directory Encryption feature can be found in the section
         *    describing the Strong Encryption Specification. The Digital
         *    Signature record will be neither compressed nor encrypted.
         */


        var DigitalSignature = function DigitalSignature(data) {
          this.data = data;

          if (this.data.readUInt32LE(0) !== 0x05054b50) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid digital signature signature: " + this.data.readUInt32LE(0));
          }
        };

        DigitalSignature.prototype.size = function size() {
          return this.data.readUInt16LE(4);
        };

        DigitalSignature.prototype.signatureData = function signatureData() {
          return this.data.slice(6, 6 + this.size());
        };
        /**
         * 4.3.12  Central directory structure:
         *
         *  central file header signature   4 bytes  (0x02014b50)
         *  version made by                 2 bytes
         *  version needed to extract       2 bytes
         *  general purpose bit flag        2 bytes
         *  compression method              2 bytes
         *  last mod file time              2 bytes
         *  last mod file date              2 bytes
         *  crc-32                          4 bytes
         *  compressed size                 4 bytes
         *  uncompressed size               4 bytes
         *  file name length                2 bytes
         *  extra field length              2 bytes
         *  file comment length             2 bytes
         *  disk number start               2 bytes
         *  internal file attributes        2 bytes
         *  external file attributes        4 bytes
         *  relative offset of local header 4 bytes
         *
         *  file name (variable size)
         *  extra field (variable size)
         *  file comment (variable size)
         */


        var CentralDirectory = function CentralDirectory(zipData, data) {
          this.zipData = zipData;
          this.data = data; // Sanity check.

          if (this.data.readUInt32LE(0) !== 0x02014b50) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Central directory record has invalid signature: " + this.data.readUInt32LE(0));
          }

          this._filename = this.produceFilename();
        };

        CentralDirectory.prototype.versionMadeBy = function versionMadeBy() {
          return this.data.readUInt16LE(4);
        };

        CentralDirectory.prototype.versionNeeded = function versionNeeded() {
          return this.data.readUInt16LE(6);
        };

        CentralDirectory.prototype.flag = function flag() {
          return this.data.readUInt16LE(8);
        };

        CentralDirectory.prototype.compressionMethod = function compressionMethod() {
          return this.data.readUInt16LE(10);
        };

        CentralDirectory.prototype.lastModFileTime = function lastModFileTime() {
          // Time and date is in MS-DOS format.
          return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));
        };

        CentralDirectory.prototype.rawLastModFileTime = function rawLastModFileTime() {
          return this.data.readUInt32LE(12);
        };

        CentralDirectory.prototype.crc32 = function crc32() {
          return this.data.readUInt32LE(16);
        };

        CentralDirectory.prototype.compressedSize = function compressedSize() {
          return this.data.readUInt32LE(20);
        };

        CentralDirectory.prototype.uncompressedSize = function uncompressedSize() {
          return this.data.readUInt32LE(24);
        };

        CentralDirectory.prototype.fileNameLength = function fileNameLength() {
          return this.data.readUInt16LE(28);
        };

        CentralDirectory.prototype.extraFieldLength = function extraFieldLength() {
          return this.data.readUInt16LE(30);
        };

        CentralDirectory.prototype.fileCommentLength = function fileCommentLength() {
          return this.data.readUInt16LE(32);
        };

        CentralDirectory.prototype.diskNumberStart = function diskNumberStart() {
          return this.data.readUInt16LE(34);
        };

        CentralDirectory.prototype.internalAttributes = function internalAttributes() {
          return this.data.readUInt16LE(36);
        };

        CentralDirectory.prototype.externalAttributes = function externalAttributes() {
          return this.data.readUInt32LE(38);
        };

        CentralDirectory.prototype.headerRelativeOffset = function headerRelativeOffset() {
          return this.data.readUInt32LE(42);
        };

        CentralDirectory.prototype.produceFilename = function produceFilename() {
          /*
            4.4.17.1 claims:
            * All slashes are forward ('/') slashes.
            * Filename doesn't begin with a slash.
            * No drive letters or any nonsense like that.
            * If filename is missing, the input came from standard input.
          	       Unfortunately, this isn't true in practice. Some Windows zip utilities use
            a backslash here, but the correct Unix-style path in file headers.
          	       To avoid seeking all over the file to recover the known-good filenames
            from file headers, we simply convert '/' to '\' here.
          */
          var fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());
          return fileName.replace(/\\/g, "/");
        };

        CentralDirectory.prototype.fileName = function fileName() {
          return this._filename;
        };

        CentralDirectory.prototype.rawFileName = function rawFileName() {
          return this.data.slice(46, 46 + this.fileNameLength());
        };

        CentralDirectory.prototype.extraField = function extraField() {
          var start = 44 + this.fileNameLength();
          return this.data.slice(start, start + this.extraFieldLength());
        };

        CentralDirectory.prototype.fileComment = function fileComment() {
          var start = 46 + this.fileNameLength() + this.extraFieldLength();
          return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());
        };

        CentralDirectory.prototype.rawFileComment = function rawFileComment() {
          var start = 46 + this.fileNameLength() + this.extraFieldLength();
          return this.data.slice(start, start + this.fileCommentLength());
        };

        CentralDirectory.prototype.totalSize = function totalSize() {
          return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();
        };

        CentralDirectory.prototype.isDirectory = function isDirectory() {
          // NOTE: This assumes that the zip file implementation uses the lower byte
          //    of external attributes for DOS attributes for
          //    backwards-compatibility. This is not mandated, but appears to be
          //    commonplace.
          //    According to the spec, the layout of external attributes is
          //    platform-dependent.
          //    If that fails, we also check if the name of the file ends in '/',
          //    which is what Java's ZipFile implementation does.
          var fileName = this.fileName();
          return (this.externalAttributes() & 0x10 ? true : false) || fileName.charAt(fileName.length - 1) === '/';
        };

        CentralDirectory.prototype.isFile = function isFile() {
          return !this.isDirectory();
        };

        CentralDirectory.prototype.useUTF8 = function useUTF8() {
          return (this.flag() & 0x800) === 0x800;
        };

        CentralDirectory.prototype.isEncrypted = function isEncrypted() {
          return (this.flag() & 0x1) === 0x1;
        };

        CentralDirectory.prototype.getFileData = function getFileData() {
          // Need to grab the header before we can figure out where the actual
          // compressed data starts.
          var start = this.headerRelativeOffset();
          var header = new FileHeader(this.zipData.slice(start));
          return new FileData(header, this, this.zipData.slice(start + header.totalSize()));
        };

        CentralDirectory.prototype.getData = function getData() {
          return this.getFileData().decompress();
        };

        CentralDirectory.prototype.getRawData = function getRawData() {
          return this.getFileData().getRawData();
        };

        CentralDirectory.prototype.getStats = function getStats() {
          return new Stats(FileType.FILE, this.uncompressedSize(), 0x16D, new Date(), this.lastModFileTime());
        };
        /**
         * 4.3.16: end of central directory record
         *  end of central dir signature    4 bytes  (0x06054b50)
         *  number of this disk             2 bytes
         *  number of the disk with the
         *  start of the central directory  2 bytes
         *  total number of entries in the
         *  central directory on this disk  2 bytes
         *  total number of entries in
         *  the central directory           2 bytes
         *  size of the central directory   4 bytes
         *  offset of start of central
         *  directory with respect to
         *  the starting disk number        4 bytes
         *  .ZIP file comment length        2 bytes
         *  .ZIP file comment       (variable size)
         */


        var EndOfCentralDirectory = function EndOfCentralDirectory(data) {
          this.data = data;

          if (this.data.readUInt32LE(0) !== 0x06054b50) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: End of central directory record has invalid signature: " + this.data.readUInt32LE(0));
          }
        };

        EndOfCentralDirectory.prototype.diskNumber = function diskNumber() {
          return this.data.readUInt16LE(4);
        };

        EndOfCentralDirectory.prototype.cdDiskNumber = function cdDiskNumber() {
          return this.data.readUInt16LE(6);
        };

        EndOfCentralDirectory.prototype.cdDiskEntryCount = function cdDiskEntryCount() {
          return this.data.readUInt16LE(8);
        };

        EndOfCentralDirectory.prototype.cdTotalEntryCount = function cdTotalEntryCount() {
          return this.data.readUInt16LE(10);
        };

        EndOfCentralDirectory.prototype.cdSize = function cdSize() {
          return this.data.readUInt32LE(12);
        };

        EndOfCentralDirectory.prototype.cdOffset = function cdOffset() {
          return this.data.readUInt32LE(16);
        };

        EndOfCentralDirectory.prototype.cdZipCommentLength = function cdZipCommentLength() {
          return this.data.readUInt16LE(20);
        };

        EndOfCentralDirectory.prototype.cdZipComment = function cdZipComment() {
          // Assuming UTF-8. The specification doesn't specify.
          return safeToString(this.data, true, 22, this.cdZipCommentLength());
        };

        EndOfCentralDirectory.prototype.rawCdZipComment = function rawCdZipComment() {
          return this.data.slice(22, 22 + this.cdZipCommentLength());
        };
        /**
         * Contains the table of contents of a Zip file.
         */


        var ZipTOC = function ZipTOC(index, directoryEntries, eocd, data) {
          this.index = index;
          this.directoryEntries = directoryEntries;
          this.eocd = eocd;
          this.data = data;
        };
        /**
         * Zip file-backed filesystem
         * Implemented according to the standard:
         * http://www.pkware.com/documents/casestudies/APPNOTE.TXT
         *
         * While there are a few zip libraries for JavaScript (e.g. JSZip and zip.js),
         * they are not a good match for BrowserFS. In particular, these libraries
         * perform a lot of unneeded data copying, and eagerly decompress every file
         * in the zip file upon loading to check the CRC32. They also eagerly decode
         * strings. Furthermore, these libraries duplicate functionality already present
         * in BrowserFS (e.g. UTF-8 decoding and binary data manipulation).
         *
         * This filesystem takes advantage of BrowserFS's Buffer implementation, which
         * efficiently represents the zip file in memory (in both ArrayBuffer-enabled
         * browsers *and* non-ArrayBuffer browsers), and which can neatly be 'sliced'
         * without copying data. Each struct defined in the standard is represented with
         * a buffer slice pointing to an offset in the zip file, and has getters for
         * each field. As we anticipate that this data will not be read often, we choose
         * not to store each struct field in the JavaScript object; instead, to reduce
         * memory consumption, we retrieve it directly from the binary data each time it
         * is requested.
         *
         * When the filesystem is instantiated, we determine the directory structure
         * of the zip file as quickly as possible. We lazily decompress and check the
         * CRC32 of files. We do not cache decompressed files; if this is a desired
         * feature, it is best implemented as a generic file system wrapper that can
         * cache data from arbitrary file systems.
         *
         * For inflation, we use `pako`'s implementation:
         * https://github.com/nodeca/pako
         *
         * Current limitations:
         * * No encryption.
         * * No ZIP64 support.
         * * Read-only.
         *   Write support would require that we:
         *   - Keep track of changed/new files.
         *   - Compress changed files, and generate appropriate metadata for each.
         *   - Update file offsets for other files in the zip file.
         *   - Stream it out to a location.
         *   This isn't that bad, so we might do this at a later date.
         */


        var ZipFS = function (SynchronousFileSystem$$1) {
          function ZipFS(input, name, deprecateMsg) {
            if (name === void 0) name = '';
            if (deprecateMsg === void 0) deprecateMsg = true;
            SynchronousFileSystem$$1.call(this);
            this.name = name;
            this._index = new FileIndex();
            this._directoryEntries = [];
            this._eocd = null;
            deprecationMessage(deprecateMsg, ZipFS.Name, {
              zipData: "zip data as a Buffer",
              name: name
            });

            if (input instanceof ZipTOC) {
              this._index = input.index;
              this._directoryEntries = input.directoryEntries;
              this._eocd = input.eocd;
              this.data = input.data;
            } else {
              this.data = input;
              this.populateIndex();
            }
          }

          if (SynchronousFileSystem$$1) ZipFS.__proto__ = SynchronousFileSystem$$1;
          ZipFS.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
          ZipFS.prototype.constructor = ZipFS;
          /**
           * Constructs a ZipFS instance with the given options.
           */

          ZipFS.Create = function Create(opts, cb) {
            try {
              ZipFS.computeIndex(opts.zipData, function (zipTOC) {
                var fs = new ZipFS(zipTOC, opts.name, false);
                cb(null, fs);
              }, false);
            } catch (e) {
              cb(e);
            }
          };

          ZipFS.isAvailable = function isAvailable() {
            return true;
          };

          ZipFS.RegisterDecompressionMethod = function RegisterDecompressionMethod(m, fcn) {
            decompressionMethods[m] = fcn;
          };
          /**
           * **Deprecated. Please use ZipFS.Create() method instead.**
           */


          ZipFS.computeIndex = function computeIndex(data, cb, deprecateMsg) {
            if (deprecateMsg === void 0) deprecateMsg = true; // TODO: Refactor to plumb errors through. Right now, they throw.

            if (deprecateMsg) {
              console.warn("[ZipFS] ZipFS.computeIndex is now deprecated, and will be removed in the next major release. Please update your code to use 'ZipFS.Create({ zipData: zip file as a Buffer}, cb)' instead.");
            }

            var index = new FileIndex();
            var eocd = ZipFS.getEOCD(data);

            if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
              throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
            }

            var cdPtr = eocd.cdOffset();

            if (cdPtr === 0xFFFFFFFF) {
              throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
            }

            var cdEnd = cdPtr + eocd.cdSize();
            ZipFS.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, [], eocd);
          };
          /**
           * Locates the end of central directory record at the end of the file.
           * Throws an exception if it cannot be found.
           */


          ZipFS.getEOCD = function getEOCD(data) {
            // Unfortunately, the comment is variable size and up to 64K in size.
            // We assume that the magic signature does not appear in the comment, and
            // in the bytes between the comment and the signature. Other ZIP
            // implementations make this same assumption, since the alternative is to
            // read thread every entry in the file to get to it. :(
            // These are *negative* offsets from the end of the file.
            var startOffset = 22;
            var endOffset = Math.min(startOffset + 0xFFFF, data.length - 1); // There's not even a byte alignment guarantee on the comment so we need to
            // search byte by byte. *grumble grumble*

            for (var i = startOffset; i < endOffset; i++) {
              // Magic number: EOCD Signature
              if (data.readUInt32LE(data.length - i) === 0x06054b50) {
                return new EndOfCentralDirectory(data.slice(data.length - i));
              }
            }

            throw new ApiError(ErrorCode.EINVAL, "Invalid ZIP file: Could not locate End of Central Directory signature.");
          };

          ZipFS.addToIndex = function addToIndex(cd, index) {
            // Paths must be absolute, yet zip file paths are always relative to the
            // zip root. So we append '/' and call it a day.
            var filename = cd.fileName();

            if (filename.charAt(0) === '/') {
              throw new Error("WHY IS THIS ABSOLUTE");
            } // XXX: For the file index, strip the trailing '/'.


            if (filename.charAt(filename.length - 1) === '/') {
              filename = filename.substr(0, filename.length - 1);
            }

            if (cd.isDirectory()) {
              index.addPathFast('/' + filename, new DirInode(cd));
            } else {
              index.addPathFast('/' + filename, new FileInode(cd));
            }
          };

          ZipFS.computeIndexResponsive = function computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd) {
            if (cdPtr < cdEnd) {
              var count = 0;

              while (count++ < 200 && cdPtr < cdEnd) {
                var cd = new CentralDirectory(data, data.slice(cdPtr));
                ZipFS.addToIndex(cd, index);
                cdPtr += cd.totalSize();
                cdEntries.push(cd);
              }

              setImmediate$3(function () {
                ZipFS.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd);
              });
            } else {
              cb(new ZipTOC(index, cdEntries, eocd, data));
            }
          };

          ZipFS.prototype.getName = function getName() {
            return ZipFS.Name + (this.name !== '' ? " " + this.name : '');
          };
          /**
           * Get the CentralDirectory object for the given path.
           */


          ZipFS.prototype.getCentralDirectoryEntry = function getCentralDirectoryEntry(path$$1) {
            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              throw ApiError.ENOENT(path$$1);
            }

            if (isFileInode(inode)) {
              return inode.getData();
            } else if (isDirInode(inode)) {
              return inode.getData();
            } else {
              // Should never occur.
              throw ApiError.EPERM("Invalid inode: " + inode);
            }
          };

          ZipFS.prototype.getCentralDirectoryEntryAt = function getCentralDirectoryEntryAt(index) {
            var dirEntry = this._directoryEntries[index];

            if (!dirEntry) {
              throw new RangeError("Invalid directory index: " + index + ".");
            }

            return dirEntry;
          };

          ZipFS.prototype.getNumberOfCentralDirectoryEntries = function getNumberOfCentralDirectoryEntries() {
            return this._directoryEntries.length;
          };

          ZipFS.prototype.getEndOfCentralDirectory = function getEndOfCentralDirectory() {
            return this._eocd;
          };

          ZipFS.prototype.diskSpace = function diskSpace(path$$1, cb) {
            // Read-only file system.
            cb(this.data.length, 0);
          };

          ZipFS.prototype.isReadOnly = function isReadOnly() {
            return true;
          };

          ZipFS.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          ZipFS.prototype.supportsProps = function supportsProps() {
            return false;
          };

          ZipFS.prototype.supportsSynch = function supportsSynch() {
            return true;
          };

          ZipFS.prototype.statSync = function statSync(path$$1, isLstat) {
            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              throw ApiError.ENOENT(path$$1);
            }

            var stats;

            if (isFileInode(inode)) {
              stats = inode.getData().getStats();
            } else if (isDirInode(inode)) {
              stats = inode.getStats();
            } else {
              throw new ApiError(ErrorCode.EINVAL, "Invalid inode.");
            }

            return stats;
          };

          ZipFS.prototype.openSync = function openSync(path$$1, flags, mode) {
            // INVARIANT: Cannot write to RO file systems.
            if (flags.isWriteable()) {
              throw new ApiError(ErrorCode.EPERM, path$$1);
            } // Check if the path exists, and is a file.


            var inode = this._index.getInode(path$$1);

            if (!inode) {
              throw ApiError.ENOENT(path$$1);
            } else if (isFileInode(inode)) {
              var cdRecord = inode.getData();
              var stats = cdRecord.getStats();

              switch (flags.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                case ActionType.TRUNCATE_FILE:
                  throw ApiError.EEXIST(path$$1);

                case ActionType.NOP:
                  return new NoSyncFile(this, path$$1, flags, stats, cdRecord.getData());

                default:
                  throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
              }
            } else {
              throw ApiError.EISDIR(path$$1);
            }
          };

          ZipFS.prototype.readdirSync = function readdirSync(path$$1) {
            // Check if it exists.
            var inode = this._index.getInode(path$$1);

            if (!inode) {
              throw ApiError.ENOENT(path$$1);
            } else if (isDirInode(inode)) {
              return inode.getListing();
            } else {
              throw ApiError.ENOTDIR(path$$1);
            }
          };
          /**
           * Specially-optimized readfile.
           */


          ZipFS.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
            // Get file.
            var fd = this.openSync(fname, flag, 0x1a4);

            try {
              var fdCast = fd;
              var fdBuff = fdCast.getBuffer();

              if (encoding === null) {
                return copyingSlice(fdBuff);
              }

              return fdBuff.toString(encoding);
            } finally {
              fd.closeSync();
            }
          };

          ZipFS.prototype.populateIndex = function populateIndex() {
            var this$1 = this;
            var eocd = this._eocd = ZipFS.getEOCD(this.data);

            if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
              throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
            }

            var cdPtr = eocd.cdOffset();

            if (cdPtr === 0xFFFFFFFF) {
              throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
            }

            var cdEnd = cdPtr + eocd.cdSize();

            while (cdPtr < cdEnd) {
              var cd = new CentralDirectory(this$1.data, this$1.data.slice(cdPtr));
              cdPtr += cd.totalSize();
              ZipFS.addToIndex(cd, this$1._index);

              this$1._directoryEntries.push(cd);
            }
          };

          return ZipFS;
        }(SynchronousFileSystem);

        ZipFS.Name = "ZipFS";
        ZipFS.Options = {
          zipData: {
            type: "object",
            description: "The zip file as a Buffer object.",
            validator: bufferValidator
          },
          name: {
            type: "string",
            optional: true,
            description: "The name of the zip file (optional)."
          }
        };
        ZipFS.CompressionMethod = CompressionMethod;
        ZipFS.RegisterDecompressionMethod(CompressionMethod.DEFLATE, function (data, compressedSize, uncompressedSize) {
          return arrayish2Buffer(inflateRaw(data.slice(0, compressedSize), {
            chunkSize: uncompressedSize
          }));
        });
        ZipFS.RegisterDecompressionMethod(CompressionMethod.STORED, function (data, compressedSize, uncompressedSize) {
          return copyingSlice(data, 0, uncompressedSize);
        });
        /**
         * @hidden
         */

        var rockRidgeIdentifier = "IEEE_P1282";
        /**
         * @hidden
         */

        function getASCIIString(data, startIndex, length) {
          return data.toString('ascii', startIndex, startIndex + length).trim();
        }
        /**
         * @hidden
         */


        function getJolietString(data, startIndex, length) {
          if (length === 1) {
            // Special: Root, parent, current directory are still a single byte.
            return String.fromCharCode(data[startIndex]);
          } // UTF16-BE, which isn't natively supported by NodeJS Buffers.
          // Length should be even, but pessimistically floor just in case.


          var pairs = Math.floor(length / 2);
          var chars = new Array(pairs);

          for (var i = 0; i < pairs; i++) {
            var pos = startIndex + (i << 1);
            chars[i] = String.fromCharCode(data[pos + 1] | data[pos] << 8);
          }

          return chars.join('');
        }
        /**
         * @hidden
         */


        function getDate(data, startIndex) {
          var year = parseInt(getASCIIString(data, startIndex, 4), 10);
          var mon = parseInt(getASCIIString(data, startIndex + 4, 2), 10);
          var day = parseInt(getASCIIString(data, startIndex + 6, 2), 10);
          var hour = parseInt(getASCIIString(data, startIndex + 8, 2), 10);
          var min = parseInt(getASCIIString(data, startIndex + 10, 2), 10);
          var sec = parseInt(getASCIIString(data, startIndex + 12, 2), 10);
          var hundrethsSec = parseInt(getASCIIString(data, startIndex + 14, 2), 10); // Last is a time-zone offset, but JavaScript dates don't support time zones well.

          return new Date(year, mon, day, hour, min, sec, hundrethsSec * 100);
        }
        /**
         * @hidden
         */


        function getShortFormDate(data, startIndex) {
          var yearsSince1900 = data[startIndex];
          var month = data[startIndex + 1];
          var day = data[startIndex + 2];
          var hour = data[startIndex + 3];
          var minute = data[startIndex + 4];
          var second = data[startIndex + 5]; // JavaScript's Date support isn't so great; ignore timezone.
          // const offsetFromGMT = this._data[24];

          return new Date(yearsSince1900, month - 1, day, hour, minute, second);
        }
        /**
         * @hidden
         */


        function constructSystemUseEntry(bigData, i) {
          var data = bigData.slice(i);
          var sue = new SystemUseEntry(data);

          switch (sue.signatureWord()) {
            case 17221
            /* CE */
            :
              return new CEEntry(data);

            case 20548
            /* PD */
            :
              return new PDEntry(data);

            case 21328
            /* SP */
            :
              return new SPEntry(data);

            case 21332
            /* ST */
            :
              return new STEntry(data);

            case 17746
            /* ER */
            :
              return new EREntry(data);

            case 17747
            /* ES */
            :
              return new ESEntry(data);

            case 20568
            /* PX */
            :
              return new PXEntry(data);

            case 20558
            /* PN */
            :
              return new PNEntry(data);

            case 21324
            /* SL */
            :
              return new SLEntry(data);

            case 20045
            /* NM */
            :
              return new NMEntry(data);

            case 17228
            /* CL */
            :
              return new CLEntry(data);

            case 20556
            /* PL */
            :
              return new PLEntry(data);

            case 21061
            /* RE */
            :
              return new REEntry(data);

            case 21574
            /* TF */
            :
              return new TFEntry(data);

            case 21318
            /* SF */
            :
              return new SFEntry(data);

            case 21074
            /* RR */
            :
              return new RREntry(data);

            default:
              return sue;
          }
        }
        /**
         * @hidden
         */


        function constructSystemUseEntries(data, i, len, isoData) {
          // If the remaining allocated space following the last recorded System Use Entry in a System
          // Use field or Continuation Area is less than four bytes long, it cannot contain a System
          // Use Entry and shall be ignored
          len = len - 4;
          var entries = new Array();

          while (i < len) {
            var entry = constructSystemUseEntry(data, i);
            var length = entry.length();

            if (length === 0) {
              // Invalid SU section; prevent infinite loop.
              return entries;
            }

            i += length;

            if (entry instanceof STEntry) {
              // ST indicates the end of entries.
              break;
            }

            if (entry instanceof CEEntry) {
              entries = entries.concat(entry.getEntries(isoData));
            } else {
              entries.push(entry);
            }
          }

          return entries;
        }
        /**
         * @hidden
         */


        var VolumeDescriptor = function VolumeDescriptor(data) {
          this._data = data;
        };

        VolumeDescriptor.prototype.type = function type() {
          return this._data[0];
        };

        VolumeDescriptor.prototype.standardIdentifier = function standardIdentifier() {
          return getASCIIString(this._data, 1, 5);
        };

        VolumeDescriptor.prototype.version = function version() {
          return this._data[6];
        };

        VolumeDescriptor.prototype.data = function data() {
          return this._data.slice(7, 2048);
        };
        /**
         * @hidden
         */


        var PrimaryOrSupplementaryVolumeDescriptor = function (VolumeDescriptor) {
          function PrimaryOrSupplementaryVolumeDescriptor(data) {
            VolumeDescriptor.call(this, data);
            this._root = null;
          }

          if (VolumeDescriptor) PrimaryOrSupplementaryVolumeDescriptor.__proto__ = VolumeDescriptor;
          PrimaryOrSupplementaryVolumeDescriptor.prototype = Object.create(VolumeDescriptor && VolumeDescriptor.prototype);
          PrimaryOrSupplementaryVolumeDescriptor.prototype.constructor = PrimaryOrSupplementaryVolumeDescriptor;

          PrimaryOrSupplementaryVolumeDescriptor.prototype.systemIdentifier = function systemIdentifier() {
            return this._getString32(8);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeIdentifier = function volumeIdentifier() {
            return this._getString32(40);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSpaceSize = function volumeSpaceSize() {
            return this._data.readUInt32LE(80);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSetSize = function volumeSetSize() {
            return this._data.readUInt16LE(120);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSequenceNumber = function volumeSequenceNumber() {
            return this._data.readUInt16LE(124);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.logicalBlockSize = function logicalBlockSize() {
            return this._data.readUInt16LE(128);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.pathTableSize = function pathTableSize() {
            return this._data.readUInt32LE(132);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfTypeLPathTable = function locationOfTypeLPathTable() {
            return this._data.readUInt32LE(140);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfOptionalTypeLPathTable = function locationOfOptionalTypeLPathTable() {
            return this._data.readUInt32LE(144);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfTypeMPathTable = function locationOfTypeMPathTable() {
            return this._data.readUInt32BE(148);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfOptionalTypeMPathTable = function locationOfOptionalTypeMPathTable() {
            return this._data.readUInt32BE(152);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.rootDirectoryEntry = function rootDirectoryEntry(isoData) {
            if (this._root === null) {
              this._root = this._constructRootDirectoryRecord(this._data.slice(156));

              this._root.rootCheckForRockRidge(isoData);
            }

            return this._root;
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSetIdentifier = function volumeSetIdentifier() {
            return this._getString(190, 128);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.publisherIdentifier = function publisherIdentifier() {
            return this._getString(318, 128);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.dataPreparerIdentifier = function dataPreparerIdentifier() {
            return this._getString(446, 128);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.applicationIdentifier = function applicationIdentifier() {
            return this._getString(574, 128);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.copyrightFileIdentifier = function copyrightFileIdentifier() {
            return this._getString(702, 38);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.abstractFileIdentifier = function abstractFileIdentifier() {
            return this._getString(740, 36);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.bibliographicFileIdentifier = function bibliographicFileIdentifier() {
            return this._getString(776, 37);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeCreationDate = function volumeCreationDate() {
            return getDate(this._data, 813);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeModificationDate = function volumeModificationDate() {
            return getDate(this._data, 830);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeExpirationDate = function volumeExpirationDate() {
            return getDate(this._data, 847);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeEffectiveDate = function volumeEffectiveDate() {
            return getDate(this._data, 864);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.fileStructureVersion = function fileStructureVersion() {
            return this._data[881];
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.applicationUsed = function applicationUsed() {
            return this._data.slice(883, 883 + 512);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.reserved = function reserved() {
            return this._data.slice(1395, 1395 + 653);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype._getString32 = function _getString32(idx) {
            return this._getString(idx, 32);
          };

          return PrimaryOrSupplementaryVolumeDescriptor;
        }(VolumeDescriptor);
        /**
         * @hidden
         */


        var PrimaryVolumeDescriptor = function (PrimaryOrSupplementaryVolumeDescriptor) {
          function PrimaryVolumeDescriptor(data) {
            PrimaryOrSupplementaryVolumeDescriptor.call(this, data);

            if (this.type() !== 1
            /* PrimaryVolumeDescriptor */
            ) {
                throw new ApiError(ErrorCode.EIO, "Invalid primary volume descriptor.");
              }
          }

          if (PrimaryOrSupplementaryVolumeDescriptor) PrimaryVolumeDescriptor.__proto__ = PrimaryOrSupplementaryVolumeDescriptor;
          PrimaryVolumeDescriptor.prototype = Object.create(PrimaryOrSupplementaryVolumeDescriptor && PrimaryOrSupplementaryVolumeDescriptor.prototype);
          PrimaryVolumeDescriptor.prototype.constructor = PrimaryVolumeDescriptor;

          PrimaryVolumeDescriptor.prototype.name = function name() {
            return "ISO9660";
          };

          PrimaryVolumeDescriptor.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord(data) {
            return new ISODirectoryRecord(data, -1);
          };

          PrimaryVolumeDescriptor.prototype._getString = function _getString(idx, len) {
            return this._getString(idx, len);
          };

          return PrimaryVolumeDescriptor;
        }(PrimaryOrSupplementaryVolumeDescriptor);
        /**
         * @hidden
         */


        var SupplementaryVolumeDescriptor = function (PrimaryOrSupplementaryVolumeDescriptor) {
          function SupplementaryVolumeDescriptor(data) {
            PrimaryOrSupplementaryVolumeDescriptor.call(this, data);

            if (this.type() !== 2
            /* SupplementaryVolumeDescriptor */
            ) {
                throw new ApiError(ErrorCode.EIO, "Invalid supplementary volume descriptor.");
              }

            var escapeSequence = this.escapeSequence();
            var third = escapeSequence[2]; // Third character identifies what 'level' of the UCS specification to follow.
            // We ignore it.

            if (escapeSequence[0] !== 0x25 || escapeSequence[1] !== 0x2F || third !== 0x40 && third !== 0x43 && third !== 0x45) {
              throw new ApiError(ErrorCode.EIO, "Unrecognized escape sequence for SupplementaryVolumeDescriptor: " + escapeSequence.toString());
            }
          }

          if (PrimaryOrSupplementaryVolumeDescriptor) SupplementaryVolumeDescriptor.__proto__ = PrimaryOrSupplementaryVolumeDescriptor;
          SupplementaryVolumeDescriptor.prototype = Object.create(PrimaryOrSupplementaryVolumeDescriptor && PrimaryOrSupplementaryVolumeDescriptor.prototype);
          SupplementaryVolumeDescriptor.prototype.constructor = SupplementaryVolumeDescriptor;

          SupplementaryVolumeDescriptor.prototype.name = function name() {
            return "Joliet";
          };

          SupplementaryVolumeDescriptor.prototype.escapeSequence = function escapeSequence() {
            return this._data.slice(88, 120);
          };

          SupplementaryVolumeDescriptor.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord(data) {
            return new JolietDirectoryRecord(data, -1);
          };

          SupplementaryVolumeDescriptor.prototype._getString = function _getString(idx, len) {
            return getJolietString(this._data, idx, len);
          };

          return SupplementaryVolumeDescriptor;
        }(PrimaryOrSupplementaryVolumeDescriptor);
        /**
         * @hidden
         */


        var DirectoryRecord = function DirectoryRecord(data, rockRidgeOffset) {
          this._suEntries = null;
          this._fileOrDir = null;
          this._data = data;
          this._rockRidgeOffset = rockRidgeOffset;
        };

        DirectoryRecord.prototype.hasRockRidge = function hasRockRidge() {
          return this._rockRidgeOffset > -1;
        };

        DirectoryRecord.prototype.getRockRidgeOffset = function getRockRidgeOffset() {
          return this._rockRidgeOffset;
        };
        /**
         * !!ONLY VALID ON ROOT NODE!!
         * Checks if Rock Ridge is enabled, and sets the offset.
         */


        DirectoryRecord.prototype.rootCheckForRockRidge = function rootCheckForRockRidge(isoData) {
          var dir = this.getDirectory(isoData);
          this._rockRidgeOffset = dir.getDotEntry(isoData)._getRockRidgeOffset(isoData);

          if (this._rockRidgeOffset > -1) {
            // Wipe out directory. Start over with RR knowledge.
            this._fileOrDir = null;
          }
        };

        DirectoryRecord.prototype.length = function length() {
          return this._data[0];
        };

        DirectoryRecord.prototype.extendedAttributeRecordLength = function extendedAttributeRecordLength() {
          return this._data[1];
        };

        DirectoryRecord.prototype.lba = function lba() {
          return this._data.readUInt32LE(2) * 2048;
        };

        DirectoryRecord.prototype.dataLength = function dataLength() {
          return this._data.readUInt32LE(10);
        };

        DirectoryRecord.prototype.recordingDate = function recordingDate() {
          return getShortFormDate(this._data, 18);
        };

        DirectoryRecord.prototype.fileFlags = function fileFlags() {
          return this._data[25];
        };

        DirectoryRecord.prototype.fileUnitSize = function fileUnitSize() {
          return this._data[26];
        };

        DirectoryRecord.prototype.interleaveGapSize = function interleaveGapSize() {
          return this._data[27];
        };

        DirectoryRecord.prototype.volumeSequenceNumber = function volumeSequenceNumber() {
          return this._data.readUInt16LE(28);
        };

        DirectoryRecord.prototype.identifier = function identifier() {
          return this._getString(33, this._data[32]);
        };

        DirectoryRecord.prototype.fileName = function fileName(isoData) {
          if (this.hasRockRidge()) {
            var fn = this._rockRidgeFilename(isoData);

            if (fn !== null) {
              return fn;
            }
          }

          var ident = this.identifier();

          if (this.isDirectory(isoData)) {
            return ident;
          } // Files:
          // - MUST have 0x2E (.) separating the name from the extension
          // - MUST have 0x3B (;) separating the file name and extension from the version
          // Gets expanded to two-byte char in Unicode directory records.


          var versionSeparator = ident.indexOf(';');

          if (versionSeparator === -1) {
            // Some Joliet filenames lack the version separator, despite the standard
            // specifying that it should be there.
            return ident;
          } else if (ident[versionSeparator - 1] === '.') {
            // Empty extension. Do not include '.' in the filename.
            return ident.slice(0, versionSeparator - 1);
          } else {
            // Include up to version separator.
            return ident.slice(0, versionSeparator);
          }
        };

        DirectoryRecord.prototype.isDirectory = function isDirectory(isoData) {
          var rv = !!(this.fileFlags() & 2
          /* Directory */
          ); // If it lacks the Directory flag, it may still be a directory if we've exceeded the directory
          // depth limit. Rock Ridge marks these as files and adds a special attribute.

          if (!rv && this.hasRockRidge()) {
            rv = this.getSUEntries(isoData).filter(function (e) {
              return e instanceof CLEntry;
            }).length > 0;
          }

          return rv;
        };

        DirectoryRecord.prototype.isSymlink = function isSymlink(isoData) {
          return this.hasRockRidge() && this.getSUEntries(isoData).filter(function (e) {
            return e instanceof SLEntry;
          }).length > 0;
        };

        DirectoryRecord.prototype.getSymlinkPath = function getSymlinkPath(isoData) {
          var p = "";
          var entries = this.getSUEntries(isoData);

          var getStr = this._getGetString();

          for (var i = 0, list = entries; i < list.length; i += 1) {
            var entry = list[i];

            if (entry instanceof SLEntry) {
              var components = entry.componentRecords();

              for (var i$1 = 0, list$1 = components; i$1 < list$1.length; i$1 += 1) {
                var component = list$1[i$1];
                var flags = component.flags();

                if (flags & 2
                /* CURRENT */
                ) {
                    p += "./";
                  } else if (flags & 4
                /* PARENT */
                ) {
                    p += "../";
                  } else if (flags & 8
                /* ROOT */
                ) {
                    p += "/";
                  } else {
                  p += component.content(getStr);

                  if (!(flags & 1
                  /* CONTINUE */
                  )) {
                    p += '/';
                  }
                }
              }

              if (!entry.continueFlag()) {
                // We are done with this link.
                break;
              }
            }
          }

          if (p.length > 1 && p[p.length - 1] === '/') {
            // Trim trailing '/'.
            return p.slice(0, p.length - 1);
          } else {
            return p;
          }
        };

        DirectoryRecord.prototype.getFile = function getFile(isoData) {
          if (this.isDirectory(isoData)) {
            throw new Error("Tried to get a File from a directory.");
          }

          if (this._fileOrDir === null) {
            this._fileOrDir = isoData.slice(this.lba(), this.lba() + this.dataLength());
          }

          return this._fileOrDir;
        };

        DirectoryRecord.prototype.getDirectory = function getDirectory(isoData) {
          if (!this.isDirectory(isoData)) {
            throw new Error("Tried to get a Directory from a file.");
          }

          if (this._fileOrDir === null) {
            this._fileOrDir = this._constructDirectory(isoData);
          }

          return this._fileOrDir;
        };

        DirectoryRecord.prototype.getSUEntries = function getSUEntries(isoData) {
          if (!this._suEntries) {
            this._constructSUEntries(isoData);
          }

          return this._suEntries;
        };

        DirectoryRecord.prototype._rockRidgeFilename = function _rockRidgeFilename(isoData) {
          var nmEntries = this.getSUEntries(isoData).filter(function (e) {
            return e instanceof NMEntry;
          });

          if (nmEntries.length === 0 || nmEntries[0].flags() & (2
          /* CURRENT */
          | 4
          /* PARENT */
          )) {
            return null;
          }

          var str = '';

          var getString = this._getGetString();

          for (var i = 0, list = nmEntries; i < list.length; i += 1) {
            var e = list[i];
            str += e.name(getString);

            if (!(e.flags() & 1
            /* CONTINUE */
            )) {
              break;
            }
          }

          return str;
        };

        DirectoryRecord.prototype._constructSUEntries = function _constructSUEntries(isoData) {
          var i = 33 + this._data[32];

          if (i % 2 === 1) {
            // Skip padding field.
            i++;
          }

          i += this._rockRidgeOffset;
          this._suEntries = constructSystemUseEntries(this._data, i, this.length(), isoData);
        };
        /**
         * !!ONLY VALID ON FIRST ENTRY OF ROOT DIRECTORY!!
         * Returns -1 if rock ridge is not enabled. Otherwise, returns the offset
         * at which system use fields begin.
         */


        DirectoryRecord.prototype._getRockRidgeOffset = function _getRockRidgeOffset(isoData) {
          // In the worst case, we get some garbage SU entries.
          // Fudge offset to 0 before proceeding.
          this._rockRidgeOffset = 0;
          var suEntries = this.getSUEntries(isoData);

          if (suEntries.length > 0) {
            var spEntry = suEntries[0];

            if (spEntry instanceof SPEntry && spEntry.checkBytesPass()) {
              // SUSP is in use.
              for (var i = 1; i < suEntries.length; i++) {
                var entry = suEntries[i];

                if (entry instanceof RREntry || entry instanceof EREntry && entry.extensionIdentifier() === rockRidgeIdentifier) {
                  // Rock Ridge is in use!
                  return spEntry.bytesSkipped();
                }
              }
            }
          } // Failed.


          this._rockRidgeOffset = -1;
          return -1;
        };
        /**
         * @hidden
         */


        var ISODirectoryRecord = function (DirectoryRecord) {
          function ISODirectoryRecord(data, rockRidgeOffset) {
            DirectoryRecord.call(this, data, rockRidgeOffset);
          }

          if (DirectoryRecord) ISODirectoryRecord.__proto__ = DirectoryRecord;
          ISODirectoryRecord.prototype = Object.create(DirectoryRecord && DirectoryRecord.prototype);
          ISODirectoryRecord.prototype.constructor = ISODirectoryRecord;

          ISODirectoryRecord.prototype._getString = function _getString(i, len) {
            return getASCIIString(this._data, i, len);
          };

          ISODirectoryRecord.prototype._constructDirectory = function _constructDirectory(isoData) {
            return new ISODirectory(this, isoData);
          };

          ISODirectoryRecord.prototype._getGetString = function _getGetString() {
            return getASCIIString;
          };

          return ISODirectoryRecord;
        }(DirectoryRecord);
        /**
         * @hidden
         */


        var JolietDirectoryRecord = function (DirectoryRecord) {
          function JolietDirectoryRecord(data, rockRidgeOffset) {
            DirectoryRecord.call(this, data, rockRidgeOffset);
          }

          if (DirectoryRecord) JolietDirectoryRecord.__proto__ = DirectoryRecord;
          JolietDirectoryRecord.prototype = Object.create(DirectoryRecord && DirectoryRecord.prototype);
          JolietDirectoryRecord.prototype.constructor = JolietDirectoryRecord;

          JolietDirectoryRecord.prototype._getString = function _getString(i, len) {
            return getJolietString(this._data, i, len);
          };

          JolietDirectoryRecord.prototype._constructDirectory = function _constructDirectory(isoData) {
            return new JolietDirectory(this, isoData);
          };

          JolietDirectoryRecord.prototype._getGetString = function _getGetString() {
            return getJolietString;
          };

          return JolietDirectoryRecord;
        }(DirectoryRecord);
        /**
         * @hidden
         */


        var SystemUseEntry = function SystemUseEntry(data) {
          this._data = data;
        };

        SystemUseEntry.prototype.signatureWord = function signatureWord() {
          return this._data.readUInt16BE(0);
        };

        SystemUseEntry.prototype.signatureWordString = function signatureWordString() {
          return getASCIIString(this._data, 0, 2);
        };

        SystemUseEntry.prototype.length = function length() {
          return this._data[2];
        };

        SystemUseEntry.prototype.suVersion = function suVersion() {
          return this._data[3];
        };
        /**
         * Continuation entry.
         * @hidden
         */


        var CEEntry = function (SystemUseEntry) {
          function CEEntry(data) {
            SystemUseEntry.call(this, data);
            this._entries = null;
          }

          if (SystemUseEntry) CEEntry.__proto__ = SystemUseEntry;
          CEEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          CEEntry.prototype.constructor = CEEntry;
          /**
           * Logical block address of the continuation area.
           */

          CEEntry.prototype.continuationLba = function continuationLba() {
            return this._data.readUInt32LE(4);
          };
          /**
           * Offset into the logical block.
           */


          CEEntry.prototype.continuationLbaOffset = function continuationLbaOffset() {
            return this._data.readUInt32LE(12);
          };
          /**
           * Length of the continuation area.
           */


          CEEntry.prototype.continuationLength = function continuationLength() {
            return this._data.readUInt32LE(20);
          };

          CEEntry.prototype.getEntries = function getEntries(isoData) {
            if (!this._entries) {
              var start = this.continuationLba() * 2048 + this.continuationLbaOffset();
              this._entries = constructSystemUseEntries(isoData, start, this.continuationLength(), isoData);
            }

            return this._entries;
          };

          return CEEntry;
        }(SystemUseEntry);
        /**
         * Padding entry.
         * @hidden
         */


        var PDEntry = function (SystemUseEntry) {
          function PDEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) PDEntry.__proto__ = SystemUseEntry;
          PDEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          PDEntry.prototype.constructor = PDEntry;
          return PDEntry;
        }(SystemUseEntry);
        /**
         * Identifies that SUSP is in-use.
         * @hidden
         */


        var SPEntry = function (SystemUseEntry) {
          function SPEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) SPEntry.__proto__ = SystemUseEntry;
          SPEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          SPEntry.prototype.constructor = SPEntry;

          SPEntry.prototype.checkBytesPass = function checkBytesPass() {
            return this._data[4] === 0xBE && this._data[5] === 0xEF;
          };

          SPEntry.prototype.bytesSkipped = function bytesSkipped() {
            return this._data[6];
          };

          return SPEntry;
        }(SystemUseEntry);
        /**
         * Identifies the end of the SUSP entries.
         * @hidden
         */


        var STEntry = function (SystemUseEntry) {
          function STEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) STEntry.__proto__ = SystemUseEntry;
          STEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          STEntry.prototype.constructor = STEntry;
          return STEntry;
        }(SystemUseEntry);
        /**
         * Specifies system-specific extensions to SUSP.
         * @hidden
         */


        var EREntry = function (SystemUseEntry) {
          function EREntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) EREntry.__proto__ = SystemUseEntry;
          EREntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          EREntry.prototype.constructor = EREntry;

          EREntry.prototype.identifierLength = function identifierLength() {
            return this._data[4];
          };

          EREntry.prototype.descriptorLength = function descriptorLength() {
            return this._data[5];
          };

          EREntry.prototype.sourceLength = function sourceLength() {
            return this._data[6];
          };

          EREntry.prototype.extensionVersion = function extensionVersion() {
            return this._data[7];
          };

          EREntry.prototype.extensionIdentifier = function extensionIdentifier() {
            return getASCIIString(this._data, 8, this.identifierLength());
          };

          EREntry.prototype.extensionDescriptor = function extensionDescriptor() {
            return getASCIIString(this._data, 8 + this.identifierLength(), this.descriptorLength());
          };

          EREntry.prototype.extensionSource = function extensionSource() {
            return getASCIIString(this._data, 8 + this.identifierLength() + this.descriptorLength(), this.sourceLength());
          };

          return EREntry;
        }(SystemUseEntry);
        /**
         * @hidden
         */


        var ESEntry = function (SystemUseEntry) {
          function ESEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) ESEntry.__proto__ = SystemUseEntry;
          ESEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          ESEntry.prototype.constructor = ESEntry;

          ESEntry.prototype.extensionSequence = function extensionSequence() {
            return this._data[4];
          };

          return ESEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Marks that RockRidge is in use [deprecated]
         * @hidden
         */


        var RREntry = function (SystemUseEntry) {
          function RREntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) RREntry.__proto__ = SystemUseEntry;
          RREntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          RREntry.prototype.constructor = RREntry;
          return RREntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records POSIX file attributes.
         * @hidden
         */


        var PXEntry = function (SystemUseEntry) {
          function PXEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) PXEntry.__proto__ = SystemUseEntry;
          PXEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          PXEntry.prototype.constructor = PXEntry;

          PXEntry.prototype.mode = function mode() {
            return this._data.readUInt32LE(4);
          };

          PXEntry.prototype.fileLinks = function fileLinks() {
            return this._data.readUInt32LE(12);
          };

          PXEntry.prototype.uid = function uid() {
            return this._data.readUInt32LE(20);
          };

          PXEntry.prototype.gid = function gid() {
            return this._data.readUInt32LE(28);
          };

          PXEntry.prototype.inode = function inode() {
            return this._data.readUInt32LE(36);
          };

          return PXEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records POSIX device number.
         * @hidden
         */


        var PNEntry = function (SystemUseEntry) {
          function PNEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) PNEntry.__proto__ = SystemUseEntry;
          PNEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          PNEntry.prototype.constructor = PNEntry;

          PNEntry.prototype.devTHigh = function devTHigh() {
            return this._data.readUInt32LE(4);
          };

          PNEntry.prototype.devTLow = function devTLow() {
            return this._data.readUInt32LE(12);
          };

          return PNEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records symbolic link
         * @hidden
         */


        var SLEntry = function (SystemUseEntry) {
          function SLEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) SLEntry.__proto__ = SystemUseEntry;
          SLEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          SLEntry.prototype.constructor = SLEntry;

          SLEntry.prototype.flags = function flags() {
            return this._data[4];
          };

          SLEntry.prototype.continueFlag = function continueFlag() {
            return this.flags() & 0x1;
          };

          SLEntry.prototype.componentRecords = function componentRecords() {
            var this$1 = this;
            var records = new Array();
            var i = 5;

            while (i < this.length()) {
              var record = new SLComponentRecord(this$1._data.slice(i));
              records.push(record);
              i += record.length();
            }

            return records;
          };

          return SLEntry;
        }(SystemUseEntry);
        /**
         * @hidden
         */


        var SLComponentRecord = function SLComponentRecord(data) {
          this._data = data;
        };

        SLComponentRecord.prototype.flags = function flags() {
          return this._data[0];
        };

        SLComponentRecord.prototype.length = function length() {
          return 2 + this.componentLength();
        };

        SLComponentRecord.prototype.componentLength = function componentLength() {
          return this._data[1];
        };

        SLComponentRecord.prototype.content = function content(getString) {
          return getString(this._data, 2, this.componentLength());
        };
        /**
         * RockRidge: Records alternate file name
         * @hidden
         */


        var NMEntry = function (SystemUseEntry) {
          function NMEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) NMEntry.__proto__ = SystemUseEntry;
          NMEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          NMEntry.prototype.constructor = NMEntry;

          NMEntry.prototype.flags = function flags() {
            return this._data[4];
          };

          NMEntry.prototype.name = function name(getString) {
            return getString(this._data, 5, this.length() - 5);
          };

          return NMEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records child link
         * @hidden
         */


        var CLEntry = function (SystemUseEntry) {
          function CLEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) CLEntry.__proto__ = SystemUseEntry;
          CLEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          CLEntry.prototype.constructor = CLEntry;

          CLEntry.prototype.childDirectoryLba = function childDirectoryLba() {
            return this._data.readUInt32LE(4);
          };

          return CLEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records parent link.
         * @hidden
         */


        var PLEntry = function (SystemUseEntry) {
          function PLEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) PLEntry.__proto__ = SystemUseEntry;
          PLEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          PLEntry.prototype.constructor = PLEntry;

          PLEntry.prototype.parentDirectoryLba = function parentDirectoryLba() {
            return this._data.readUInt32LE(4);
          };

          return PLEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records relocated directory.
         * @hidden
         */


        var REEntry = function (SystemUseEntry) {
          function REEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) REEntry.__proto__ = SystemUseEntry;
          REEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          REEntry.prototype.constructor = REEntry;
          return REEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records file timestamps
         * @hidden
         */


        var TFEntry = function (SystemUseEntry) {
          function TFEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) TFEntry.__proto__ = SystemUseEntry;
          TFEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          TFEntry.prototype.constructor = TFEntry;

          TFEntry.prototype.flags = function flags() {
            return this._data[4];
          };

          TFEntry.prototype.creation = function creation() {
            if (this.flags() & 1
            /* CREATION */
            ) {
                if (this._longFormDates()) {
                  return getDate(this._data, 5);
                } else {
                  return getShortFormDate(this._data, 5);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype.modify = function modify() {
            if (this.flags() & 2
            /* MODIFY */
            ) {
                var previousDates = this.flags() & 1
                /* CREATION */
                ? 1 : 0;

                if (this._longFormDates) {
                  return getDate(this._data, 5 + previousDates * 17);
                } else {
                  return getShortFormDate(this._data, 5 + previousDates * 7);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype.access = function access() {
            if (this.flags() & 4
            /* ACCESS */
            ) {
                var previousDates = this.flags() & 1
                /* CREATION */
                ? 1 : 0;
                previousDates += this.flags() & 2
                /* MODIFY */
                ? 1 : 0;

                if (this._longFormDates) {
                  return getDate(this._data, 5 + previousDates * 17);
                } else {
                  return getShortFormDate(this._data, 5 + previousDates * 7);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype.backup = function backup() {
            if (this.flags() & 16
            /* BACKUP */
            ) {
                var previousDates = this.flags() & 1
                /* CREATION */
                ? 1 : 0;
                previousDates += this.flags() & 2
                /* MODIFY */
                ? 1 : 0;
                previousDates += this.flags() & 4
                /* ACCESS */
                ? 1 : 0;

                if (this._longFormDates) {
                  return getDate(this._data, 5 + previousDates * 17);
                } else {
                  return getShortFormDate(this._data, 5 + previousDates * 7);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype.expiration = function expiration() {
            if (this.flags() & 32
            /* EXPIRATION */
            ) {
                var previousDates = this.flags() & 1
                /* CREATION */
                ? 1 : 0;
                previousDates += this.flags() & 2
                /* MODIFY */
                ? 1 : 0;
                previousDates += this.flags() & 4
                /* ACCESS */
                ? 1 : 0;
                previousDates += this.flags() & 16
                /* BACKUP */
                ? 1 : 0;

                if (this._longFormDates) {
                  return getDate(this._data, 5 + previousDates * 17);
                } else {
                  return getShortFormDate(this._data, 5 + previousDates * 7);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype.effective = function effective() {
            if (this.flags() & 64
            /* EFFECTIVE */
            ) {
                var previousDates = this.flags() & 1
                /* CREATION */
                ? 1 : 0;
                previousDates += this.flags() & 2
                /* MODIFY */
                ? 1 : 0;
                previousDates += this.flags() & 4
                /* ACCESS */
                ? 1 : 0;
                previousDates += this.flags() & 16
                /* BACKUP */
                ? 1 : 0;
                previousDates += this.flags() & 32
                /* EXPIRATION */
                ? 1 : 0;

                if (this._longFormDates) {
                  return getDate(this._data, 5 + previousDates * 17);
                } else {
                  return getShortFormDate(this._data, 5 + previousDates * 7);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype._longFormDates = function _longFormDates() {
            return !!(this.flags() && 128
            /* LONG_FORM */
            );
          };

          return TFEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: File data in sparse format.
         * @hidden
         */


        var SFEntry = function (SystemUseEntry) {
          function SFEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) SFEntry.__proto__ = SystemUseEntry;
          SFEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          SFEntry.prototype.constructor = SFEntry;

          SFEntry.prototype.virtualSizeHigh = function virtualSizeHigh() {
            return this._data.readUInt32LE(4);
          };

          SFEntry.prototype.virtualSizeLow = function virtualSizeLow() {
            return this._data.readUInt32LE(12);
          };

          SFEntry.prototype.tableDepth = function tableDepth() {
            return this._data[20];
          };

          return SFEntry;
        }(SystemUseEntry);
        /**
         * @hidden
         */


        var Directory = function Directory(record, isoData) {
          var this$1 = this;
          this._fileList = [];
          this._fileMap = {};
          this._record = record;
          var i = record.lba();
          var iLimit = i + record.dataLength();

          if (!(record.fileFlags() & 2
          /* Directory */
          )) {
            // Must have a CL entry.
            var cl = record.getSUEntries(isoData).filter(function (e) {
              return e instanceof CLEntry;
            })[0];
            i = cl.childDirectoryLba() * 2048;
            iLimit = Infinity;
          }

          while (i < iLimit) {
            var len = isoData[i]; // Zero-padding between sectors.
            // TODO: Could optimize this to seek to nearest-sector upon
            // seeing a 0.

            if (len === 0) {
              i++;
              continue;
            }

            var r = this$1._constructDirectoryRecord(isoData.slice(i));

            var fname = r.fileName(isoData); // Skip '.' and '..' entries.

            if (fname !== '\u0000' && fname !== '\u0001') {
              // Skip relocated entries.
              if (!r.hasRockRidge() || r.getSUEntries(isoData).filter(function (e) {
                return e instanceof REEntry;
              }).length === 0) {
                this$1._fileMap[fname] = r;

                this$1._fileList.push(fname);
              }
            } else if (iLimit === Infinity) {
              // First entry contains needed data.
              iLimit = i + r.dataLength();
            }

            i += r.length();
          }
        };
        /**
         * Get the record with the given name.
         * Returns undefined if not present.
         */


        Directory.prototype.getRecord = function getRecord(name) {
          return this._fileMap[name];
        };

        Directory.prototype.getFileList = function getFileList() {
          return this._fileList;
        };

        Directory.prototype.getDotEntry = function getDotEntry(isoData) {
          return this._constructDirectoryRecord(isoData.slice(this._record.lba()));
        };
        /**
         * @hidden
         */


        var ISODirectory = function (Directory) {
          function ISODirectory(record, isoData) {
            Directory.call(this, record, isoData);
          }

          if (Directory) ISODirectory.__proto__ = Directory;
          ISODirectory.prototype = Object.create(Directory && Directory.prototype);
          ISODirectory.prototype.constructor = ISODirectory;

          ISODirectory.prototype._constructDirectoryRecord = function _constructDirectoryRecord(data) {
            return new ISODirectoryRecord(data, this._record.getRockRidgeOffset());
          };

          return ISODirectory;
        }(Directory);
        /**
         * @hidden
         */


        var JolietDirectory = function (Directory) {
          function JolietDirectory(record, isoData) {
            Directory.call(this, record, isoData);
          }

          if (Directory) JolietDirectory.__proto__ = Directory;
          JolietDirectory.prototype = Object.create(Directory && Directory.prototype);
          JolietDirectory.prototype.constructor = JolietDirectory;

          JolietDirectory.prototype._constructDirectoryRecord = function _constructDirectoryRecord(data) {
            return new JolietDirectoryRecord(data, this._record.getRockRidgeOffset());
          };

          return JolietDirectory;
        }(Directory);
        /**
         * Mounts an ISO file as a read-only file system.
         *
         * Supports:
         * * Vanilla ISO9660 ISOs
         * * Microsoft Joliet and Rock Ridge extensions to the ISO9660 standard
         */


        var IsoFS = function (SynchronousFileSystem$$1) {
          function IsoFS(data, name, deprecateMsg) {
            var this$1 = this;
            if (name === void 0) name = "";
            if (deprecateMsg === void 0) deprecateMsg = true;
            SynchronousFileSystem$$1.call(this);
            this._data = data;
            deprecationMessage(deprecateMsg, IsoFS.Name, {
              data: "ISO data as a Buffer",
              name: name
            }); // Skip first 16 sectors.

            var vdTerminatorFound = false;
            var i = 16 * 2048;
            var candidateVDs = new Array();

            while (!vdTerminatorFound) {
              var slice = data.slice(i);
              var vd = new VolumeDescriptor(slice);

              switch (vd.type()) {
                case 1
                /* PrimaryVolumeDescriptor */
                :
                  candidateVDs.push(new PrimaryVolumeDescriptor(slice));
                  break;

                case 2
                /* SupplementaryVolumeDescriptor */
                :
                  candidateVDs.push(new SupplementaryVolumeDescriptor(slice));
                  break;

                case 255
                /* VolumeDescriptorSetTerminator */
                :
                  vdTerminatorFound = true;
                  break;
              }

              i += 2048;
            }

            if (candidateVDs.length === 0) {
              throw new ApiError(ErrorCode.EIO, "Unable to find a suitable volume descriptor.");
            }

            candidateVDs.forEach(function (v) {
              // Take an SVD over a PVD.
              if (!this$1._pvd || this$1._pvd.type() !== 2
              /* SupplementaryVolumeDescriptor */
              ) {
                  this$1._pvd = v;
                }
            });
            this._root = this._pvd.rootDirectoryEntry(data);
            this._name = name;
          }

          if (SynchronousFileSystem$$1) IsoFS.__proto__ = SynchronousFileSystem$$1;
          IsoFS.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
          IsoFS.prototype.constructor = IsoFS;
          /**
           * Creates an IsoFS instance with the given options.
           */

          IsoFS.Create = function Create(opts, cb) {
            var fs;
            var e;

            try {
              fs = new IsoFS(opts.data, opts.name, false);
            } catch (e) {
              e = e;
            } finally {
              cb(e, fs);
            }
          };

          IsoFS.isAvailable = function isAvailable() {
            return true;
          };

          IsoFS.prototype.getName = function getName() {
            var name = "IsoFS" + this._name + (this._pvd ? "-" + this._pvd.name() : '');

            if (this._root && this._root.hasRockRidge()) {
              name += "-RockRidge";
            }

            return name;
          };

          IsoFS.prototype.diskSpace = function diskSpace(path$$1, cb) {
            // Read-only file system.
            cb(this._data.length, 0);
          };

          IsoFS.prototype.isReadOnly = function isReadOnly() {
            return true;
          };

          IsoFS.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          IsoFS.prototype.supportsProps = function supportsProps() {
            return false;
          };

          IsoFS.prototype.supportsSynch = function supportsSynch() {
            return true;
          };

          IsoFS.prototype.statSync = function statSync(p, isLstat) {
            var record = this._getDirectoryRecord(p);

            if (record === null) {
              throw ApiError.ENOENT(p);
            }

            return this._getStats(p, record);
          };

          IsoFS.prototype.openSync = function openSync(p, flags, mode) {
            // INVARIANT: Cannot write to RO file systems.
            if (flags.isWriteable()) {
              throw new ApiError(ErrorCode.EPERM, p);
            } // Check if the path exists, and is a file.


            var record = this._getDirectoryRecord(p);

            if (!record) {
              throw ApiError.ENOENT(p);
            } else if (record.isSymlink(this._data)) {
              return this.openSync(path.resolve(p, record.getSymlinkPath(this._data)), flags, mode);
            } else if (!record.isDirectory(this._data)) {
              var data = record.getFile(this._data);

              var stats = this._getStats(p, record);

              switch (flags.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                case ActionType.TRUNCATE_FILE:
                  throw ApiError.EEXIST(p);

                case ActionType.NOP:
                  return new NoSyncFile(this, p, flags, stats, data);

                default:
                  throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
              }
            } else {
              throw ApiError.EISDIR(p);
            }
          };

          IsoFS.prototype.readdirSync = function readdirSync(path$$1) {
            // Check if it exists.
            var record = this._getDirectoryRecord(path$$1);

            if (!record) {
              throw ApiError.ENOENT(path$$1);
            } else if (record.isDirectory(this._data)) {
              return record.getDirectory(this._data).getFileList().slice(0);
            } else {
              throw ApiError.ENOTDIR(path$$1);
            }
          };
          /**
           * Specially-optimized readfile.
           */


          IsoFS.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
            // Get file.
            var fd = this.openSync(fname, flag, 0x1a4);

            try {
              var fdCast = fd;
              var fdBuff = fdCast.getBuffer();

              if (encoding === null) {
                return copyingSlice(fdBuff);
              }

              return fdBuff.toString(encoding);
            } finally {
              fd.closeSync();
            }
          };

          IsoFS.prototype._getDirectoryRecord = function _getDirectoryRecord(path$$1) {
            var this$1 = this; // Special case.

            if (path$$1 === '/') {
              return this._root;
            }

            var components = path$$1.split('/').slice(1);
            var dir = this._root;

            for (var i = 0, list = components; i < list.length; i += 1) {
              var component = list[i];

              if (dir.isDirectory(this$1._data)) {
                dir = dir.getDirectory(this$1._data).getRecord(component);

                if (!dir) {
                  return null;
                }
              } else {
                return null;
              }
            }

            return dir;
          };

          IsoFS.prototype._getStats = function _getStats(p, record) {
            if (record.isSymlink(this._data)) {
              var newP = path.resolve(p, record.getSymlinkPath(this._data));

              var dirRec = this._getDirectoryRecord(newP);

              if (!dirRec) {
                return null;
              }

              return this._getStats(newP, dirRec);
            } else {
              var len = record.dataLength();
              var mode = 0x16D;
              var date = record.recordingDate();
              var atime = date;
              var mtime = date;
              var ctime = date;

              if (record.hasRockRidge()) {
                var entries = record.getSUEntries(this._data);

                for (var i = 0, list = entries; i < list.length; i += 1) {
                  var entry = list[i];

                  if (entry instanceof PXEntry) {
                    mode = entry.mode();
                  } else if (entry instanceof TFEntry) {
                    var flags = entry.flags();

                    if (flags & 4
                    /* ACCESS */
                    ) {
                        atime = entry.access();
                      }

                    if (flags & 2
                    /* MODIFY */
                    ) {
                        mtime = entry.modify();
                      }

                    if (flags & 1
                    /* CREATION */
                    ) {
                        ctime = entry.creation();
                      }
                  }
                }
              } // Mask out writeable flags. This is a RO file system.


              mode = mode & 0x16D;
              return new Stats(record.isDirectory(this._data) ? FileType.DIRECTORY : FileType.FILE, len, mode, atime, mtime, ctime);
            }
          };

          return IsoFS;
        }(SynchronousFileSystem);

        IsoFS.Name = "IsoFS";
        IsoFS.Options = {
          data: {
            type: "object",
            description: "The ISO file in a buffer",
            validator: bufferValidator
          }
        }; // Monkey-patch `Create` functions to check options before file system initialization.

        [AsyncMirror, DropboxFileSystem, EmscriptenFileSystem, FolderAdapter, HTML5FS, InMemoryFileSystem, IndexedDBFileSystem, IsoFS, LocalStorageFileSystem, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS].forEach(function (fsType) {
          var create = fsType.Create;

          fsType.Create = function (opts, cb) {
            var oneArg = typeof opts === "function";
            var normalizedCb = oneArg ? opts : cb;
            var normalizedOpts = oneArg ? {} : opts;

            function wrappedCb(e) {
              if (e) {
                normalizedCb(e);
              } else {
                create.call(fsType, normalizedOpts, normalizedCb);
              }
            }

            checkOptions(fsType, normalizedOpts, wrappedCb);
          };
        });
        /**
         * @hidden
         */

        var Backends = {
          AsyncMirror: AsyncMirror,
          Dropbox: DropboxFileSystem,
          Emscripten: EmscriptenFileSystem,
          FolderAdapter: FolderAdapter,
          HTML5FS: HTML5FS,
          InMemory: InMemoryFileSystem,
          IndexedDB: IndexedDBFileSystem,
          IsoFS: IsoFS,
          LocalStorage: LocalStorageFileSystem,
          MountableFileSystem: MountableFileSystem,
          OverlayFS: OverlayFS,
          WorkerFS: WorkerFS,
          XmlHttpRequest: XmlHttpRequest,
          ZipFS: ZipFS
        };
        /**
         * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.
         * Due to limitations in typedoc, we document these functions in ./typedoc.ts.
         */

        if (process['initializeTTYs']) {
          process['initializeTTYs']();
        }
        /**
         * Installs BFSRequire as global `require`, a Node Buffer polyfill as the global `Buffer` variable,
         * and a Node process polyfill as the global `process` variable.
         */


        function install(obj) {
          obj.Buffer = Buffer;
          obj.process = process;
          var oldRequire = obj.require ? obj.require : null; // Monkey-patch require for Node-style code.

          obj.require = function (arg) {
            var rv = BFSRequire(arg);

            if (!rv) {
              return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));
            } else {
              return rv;
            }
          };
        }
        /**
         * @hidden
         */


        function registerFileSystem(name, fs) {
          Backends[name] = fs;
        }

        function BFSRequire(module) {
          switch (module) {
            case 'fs':
              return _fsMock;

            case 'path':
              return path;

            case 'buffer':
              // The 'buffer' module has 'Buffer' as a property.
              return buffer;

            case 'process':
              return process;

            case 'bfs_utils':
              return BFSUtils;

            default:
              return Backends[module];
          }
        }
        /**
         * Initializes BrowserFS with the given root file system.
         */


        function initialize(rootfs) {
          return _fsMock.initialize(rootfs);
        }
        /**
         * Creates a file system with the given configuration, and initializes BrowserFS with it.
         * See the FileSystemConfiguration type for more info on the configuration object.
         */


        function configure(config, cb) {
          getFileSystem(config, function (e, fs) {
            if (fs) {
              initialize(fs);
              cb();
            } else {
              cb(e);
            }
          });
        }
        /**
         * Retrieve a file system with the given configuration.
         * @param config A FileSystemConfiguration object. See FileSystemConfiguration for details.
         * @param cb Called when the file system is constructed, or when an error occurs.
         */


        function getFileSystem(config, cb) {
          var fsName = config['fs'];

          if (!fsName) {
            return cb(new ApiError(ErrorCode.EPERM, 'Missing "fs" property on configuration object.'));
          }

          var options = config['options'];
          var waitCount = 0;
          var called = false;

          function finish() {
            if (!called) {
              called = true;
              var fsc = Backends[fsName];

              if (!fsc) {
                cb(new ApiError(ErrorCode.EPERM, "File system " + fsName + " is not available in BrowserFS."));
              } else {
                fsc.Create(options, cb);
              }
            }
          }

          if (options !== null && typeof options === "object") {
            var finishedIterating = false;
            var props = Object.keys(options).filter(function (k) {
              return k !== 'fs';
            }); // Check recursively if other fields have 'fs' properties.

            props.forEach(function (p) {
              var d = options[p];

              if (d !== null && typeof d === "object" && d['fs']) {
                waitCount++;
                getFileSystem(d, function (e, fs) {
                  waitCount--;

                  if (e) {
                    if (called) {
                      return;
                    }

                    called = true;
                    cb(e);
                  } else {
                    options[p] = fs;

                    if (waitCount === 0 && finishedIterating) {
                      finish();
                    }
                  }
                });
              }
            });
            finishedIterating = true;
          }

          if (waitCount === 0) {
            finish();
          }
        }
        /**
         * BrowserFS's main entry point.
         * It installs all of the needed polyfills, and requires() the main module.
         */
        // IE substr does not support negative indices


        if ('ab'.substr(-1) !== 'b') {
          String.prototype.substr = function (substr) {
            return function (start, length) {
              // did we get a negative start, calculate how much it is from the
              // beginning of the string
              if (start < 0) {
                start = this.length + start;
              } // call the original function


              return substr.call(this, start, length);
            };
          }(String.prototype.substr);
        } // Polyfill for Uint8Array.prototype.slice.
        // Safari and some other browsers do not define it.


        if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined') {
          if (!Uint8Array.prototype['slice']) {
            Uint8Array.prototype.slice = function (start, end) {
              if (start === void 0) start = 0;
              if (end === void 0) end = this.length;
              var self = this;

              if (start < 0) {
                start = this.length + start;

                if (start < 0) {
                  start = 0;
                }
              }

              if (end < 0) {
                end = this.length + end;

                if (end < 0) {
                  end = 0;
                }
              }

              if (end < start) {
                end = start;
              }

              return new Uint8Array(self.buffer, self.byteOffset + start, end - start);
            };
          }
        }

        exports.install = install;
        exports.registerFileSystem = registerFileSystem;
        exports.BFSRequire = BFSRequire;
        exports.initialize = initialize;
        exports.configure = configure;
        exports.getFileSystem = getFileSystem;
        exports.EmscriptenFS = BFSEmscriptenFS;
        exports.FileSystem = Backends;
        exports.Errors = api_error;
        exports.setImmediate = setImmediate$3;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(1), function () {
        return this;
      }(), __webpack_require__(5)(module), __webpack_require__(6));
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(2).Buffer;
      /***/
    },
    /* 2 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        /*!
        * The buffer module from node.js, for the browser.
        *
        * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
        * @license  MIT
        */

        /* eslint-disable no-proto */
        'use strict';

        var base64 = __webpack_require__(3);

        var ieee754 = __webpack_require__(4);

        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;
        var K_MAX_LENGTH = 0x7fffffff;
        exports.kMaxLength = K_MAX_LENGTH;
        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Print warning and recommend using `buffer` v4.x which has an Object
         *               implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * We report that the browser does not support typed arrays if the are not subclassable
         * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
         * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
         * for __proto__ and has a buggy typed array implementation.
         */

        Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

        if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
          console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
        }

        function typedArraySupport() {
          // Can typed array instances can be augmented?
          try {
            var arr = new Uint8Array(1);
            arr.__proto__ = {
              __proto__: Uint8Array.prototype,
              foo: function () {
                return 42;
              }
            };
            return arr.foo() === 42;
          } catch (e) {
            return false;
          }
        }

        function createBuffer(length) {
          if (length > K_MAX_LENGTH) {
            throw new RangeError('Invalid typed array length');
          } // Return an augmented `Uint8Array` instance


          var buf = new Uint8Array(length);
          buf.__proto__ = Buffer.prototype;
          return buf;
        }
        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */


        function Buffer(arg, encodingOrOffset, length) {
          // Common case.
          if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') {
              throw new Error('If encoding is specified then the first argument must be a string');
            }

            return allocUnsafe(arg);
          }

          return from(arg, encodingOrOffset, length);
        } // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97


        if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
          Object.defineProperty(Buffer, Symbol.species, {
            value: null,
            configurable: true,
            enumerable: false,
            writable: false
          });
        }

        Buffer.poolSize = 8192; // not used by this implementation

        function from(value, encodingOrOffset, length) {
          if (typeof value === 'number') {
            throw new TypeError('"value" argument must not be a number');
          }

          if (isArrayBuffer(value)) {
            return fromArrayBuffer(value, encodingOrOffset, length);
          }

          if (typeof value === 'string') {
            return fromString(value, encodingOrOffset);
          }

          return fromObject(value);
        }
        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/


        Buffer.from = function (value, encodingOrOffset, length) {
          return from(value, encodingOrOffset, length);
        }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
        // https://github.com/feross/buffer/pull/148


        Buffer.prototype.__proto__ = Uint8Array.prototype;
        Buffer.__proto__ = Uint8Array;

        function assertSize(size) {
          if (typeof size !== 'number') {
            throw new TypeError('"size" argument must be a number');
          } else if (size < 0) {
            throw new RangeError('"size" argument must not be negative');
          }
        }

        function alloc(size, fill, encoding) {
          assertSize(size);

          if (size <= 0) {
            return createBuffer(size);
          }

          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
          }

          return createBuffer(size);
        }
        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/


        Buffer.alloc = function (size, fill, encoding) {
          return alloc(size, fill, encoding);
        };

        function allocUnsafe(size) {
          assertSize(size);
          return createBuffer(size < 0 ? 0 : checked(size) | 0);
        }
        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */


        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(size);
        };
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */


        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(size);
        };

        function fromString(string, encoding) {
          if (typeof encoding !== 'string' || encoding === '') {
            encoding = 'utf8';
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('"encoding" must be a valid string encoding');
          }

          var length = byteLength(string, encoding) | 0;
          var buf = createBuffer(length);
          var actual = buf.write(string, encoding);

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            buf = buf.slice(0, actual);
          }

          return buf;
        }

        function fromArrayLike(array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0;
          var buf = createBuffer(length);

          for (var i = 0; i < length; i += 1) {
            buf[i] = array[i] & 255;
          }

          return buf;
        }

        function fromArrayBuffer(array, byteOffset, length) {
          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('\'offset\' is out of bounds');
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('\'length\' is out of bounds');
          }

          var buf;

          if (byteOffset === undefined && length === undefined) {
            buf = new Uint8Array(array);
          } else if (length === undefined) {
            buf = new Uint8Array(array, byteOffset);
          } else {
            buf = new Uint8Array(array, byteOffset, length);
          } // Return an augmented `Uint8Array` instance


          buf.__proto__ = Buffer.prototype;
          return buf;
        }

        function fromObject(obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0;
            var buf = createBuffer(len);

            if (buf.length === 0) {
              return buf;
            }

            obj.copy(buf, 0, 0, len);
            return buf;
          }

          if (obj) {
            if (isArrayBufferView(obj) || 'length' in obj) {
              if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                return createBuffer(0);
              }

              return fromArrayLike(obj);
            }

            if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
              return fromArrayLike(obj.data);
            }
          }

          throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
        }

        function checked(length) {
          // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= K_MAX_LENGTH) {
            throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
          }

          return length | 0;
        }

        function SlowBuffer(length) {
          if (+length != length) {
            // eslint-disable-line eqeqeq
            length = 0;
          }

          return Buffer.alloc(+length);
        }

        Buffer.isBuffer = function isBuffer(b) {
          return b != null && b._isBuffer === true;
        };

        Buffer.compare = function compare(a, b) {
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError('Arguments must be Buffers');
          }

          if (a === b) return 0;
          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return true;

            default:
              return false;
          }
        };

        Buffer.concat = function concat(list, length) {
          if (!Array.isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }

          if (list.length === 0) {
            return Buffer.alloc(0);
          }

          var i;

          if (length === undefined) {
            length = 0;

            for (i = 0; i < list.length; ++i) {
              length += list[i].length;
            }
          }

          var buffer = Buffer.allocUnsafe(length);
          var pos = 0;

          for (i = 0; i < list.length; ++i) {
            var buf = list[i];

            if (!Buffer.isBuffer(buf)) {
              throw new TypeError('"list" argument must be an Array of Buffers');
            }

            buf.copy(buffer, pos);
            pos += buf.length;
          }

          return buffer;
        };

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length;
          }

          if (isArrayBufferView(string) || isArrayBuffer(string)) {
            return string.byteLength;
          }

          if (typeof string !== 'string') {
            string = '' + string;
          }

          var len = string.length;
          if (len === 0) return 0; // Use a for loop to avoid recursion

          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return len;

              case 'utf8':
              case 'utf-8':
              case undefined:
                return utf8ToBytes(string).length;

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return len * 2;

              case 'hex':
                return len >>> 1;

              case 'base64':
                return base64ToBytes(string).length;

              default:
                if (loweredCase) return utf8ToBytes(string).length; // assume utf8

                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        }

        Buffer.byteLength = byteLength;

        function slowToString(encoding, start, end) {
          var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.
          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

          if (start === undefined || start < 0) {
            start = 0;
          } // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.


          if (start > this.length) {
            return '';
          }

          if (end === undefined || end > this.length) {
            end = this.length;
          }

          if (end <= 0) {
            return '';
          } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


          end >>>= 0;
          start >>>= 0;

          if (end <= start) {
            return '';
          }

          if (!encoding) encoding = 'utf8';

          while (true) {
            switch (encoding) {
              case 'hex':
                return hexSlice(this, start, end);

              case 'utf8':
              case 'utf-8':
                return utf8Slice(this, start, end);

              case 'ascii':
                return asciiSlice(this, start, end);

              case 'latin1':
              case 'binary':
                return latin1Slice(this, start, end);

              case 'base64':
                return base64Slice(this, start, end);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return utf16leSlice(this, start, end);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = (encoding + '').toLowerCase();
                loweredCase = true;
            }
          }
        } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
        // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
        // reliably in a browserify context because there could be multiple different
        // copies of the 'buffer' package in use. This method works even for Buffer
        // instances that were created from another copy of the `buffer` package.
        // See: https://github.com/feross/buffer/issues/154


        Buffer.prototype._isBuffer = true;

        function swap(b, n, m) {
          var i = b[n];
          b[n] = b[m];
          b[m] = i;
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length;

          if (len % 2 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 16-bits');
          }

          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1);
          }

          return this;
        };

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length;

          if (len % 4 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 32-bits');
          }

          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
          }

          return this;
        };

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length;

          if (len % 8 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 64-bits');
          }

          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
          }

          return this;
        };

        Buffer.prototype.toString = function toString() {
          var length = this.length;
          if (length === 0) return '';
          if (arguments.length === 0) return utf8Slice(this, 0, length);
          return slowToString.apply(this, arguments);
        };

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
          if (this === b) return true;
          return Buffer.compare(this, b) === 0;
        };

        Buffer.prototype.inspect = function inspect() {
          var str = '';
          var max = exports.INSPECT_MAX_BYTES;

          if (this.length > 0) {
            str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
            if (this.length > max) str += ' ... ';
          }

          return '<Buffer ' + str + '>';
        };

        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
          if (!Buffer.isBuffer(target)) {
            throw new TypeError('Argument must be a Buffer');
          }

          if (start === undefined) {
            start = 0;
          }

          if (end === undefined) {
            end = target ? target.length : 0;
          }

          if (thisStart === undefined) {
            thisStart = 0;
          }

          if (thisEnd === undefined) {
            thisEnd = this.length;
          }

          if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
            throw new RangeError('out of range index');
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0;
          }

          if (thisStart >= thisEnd) {
            return -1;
          }

          if (start >= end) {
            return 1;
          }

          start >>>= 0;
          end >>>= 0;
          thisStart >>>= 0;
          thisEnd >>>= 0;
          if (this === target) return 0;
          var x = thisEnd - thisStart;
          var y = end - start;
          var len = Math.min(x, y);
          var thisCopy = this.slice(thisStart, thisEnd);
          var targetCopy = target.slice(start, end);

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i];
              y = targetCopy[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf


        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1; // Normalize byteOffset

          if (typeof byteOffset === 'string') {
            encoding = byteOffset;
            byteOffset = 0;
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff;
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000;
          }

          byteOffset = +byteOffset; // Coerce to Number.

          if (numberIsNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : buffer.length - 1;
          } // Normalize byteOffset: negative offsets start from the end of the buffer


          if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

          if (byteOffset >= buffer.length) {
            if (dir) return -1;else byteOffset = buffer.length - 1;
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0;else return -1;
          } // Normalize val


          if (typeof val === 'string') {
            val = Buffer.from(val, encoding);
          } // Finally, search either indexOf (if dir is true) or lastIndexOf


          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1;
            }

            return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
          } else if (typeof val === 'number') {
            val = val & 0xFF; // Search for a byte value [0-255]

            if (typeof Uint8Array.prototype.indexOf === 'function') {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
              } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
              }
            }

            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
          }

          throw new TypeError('val must be string, number or Buffer');
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1;
          var arrLength = arr.length;
          var valLength = val.length;

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase();

            if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
              if (arr.length < 2 || val.length < 2) {
                return -1;
              }

              indexSize = 2;
              arrLength /= 2;
              valLength /= 2;
              byteOffset /= 2;
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i];
            } else {
              return buf.readUInt16BE(i * indexSize);
            }
          }

          var i;

          if (dir) {
            var foundIndex = -1;

            for (i = byteOffset; i < arrLength; i++) {
              if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
              } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
              }
            }
          } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

            for (i = byteOffset; i >= 0; i--) {
              var found = true;

              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false;
                  break;
                }
              }

              if (found) return i;
            }
          }

          return -1;
        }

        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
          return this.indexOf(val, byteOffset, encoding) !== -1;
        };

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
        };

        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
        };

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0;
          var remaining = buf.length - offset;

          if (!length) {
            length = remaining;
          } else {
            length = Number(length);

            if (length > remaining) {
              length = remaining;
            }
          } // must be an even number of digits


          var strLen = string.length;
          if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

          if (length > strLen / 2) {
            length = strLen / 2;
          }

          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16);
            if (numberIsNaN(parsed)) return i;
            buf[offset + i] = parsed;
          }

          return i;
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length);
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length);
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length);
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
        }

        Buffer.prototype.write = function write(string, offset, length, encoding) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = 'utf8';
            length = this.length;
            offset = 0; // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === 'string') {
            encoding = offset;
            length = this.length;
            offset = 0; // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset >>> 0;

            if (isFinite(length)) {
              length = length >>> 0;
              if (encoding === undefined) encoding = 'utf8';
            } else {
              encoding = length;
              length = undefined;
            }
          } else {
            throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
          }

          var remaining = this.length - offset;
          if (length === undefined || length > remaining) length = remaining;

          if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
            throw new RangeError('Attempt to write outside buffer bounds');
          }

          if (!encoding) encoding = 'utf8';
          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'hex':
                return hexWrite(this, string, offset, length);

              case 'utf8':
              case 'utf-8':
                return utf8Write(this, string, offset, length);

              case 'ascii':
                return asciiWrite(this, string, offset, length);

              case 'latin1':
              case 'binary':
                return latin1Write(this, string, offset, length);

              case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return ucs2Write(this, string, offset, length);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        };

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
          };
        };

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf);
          } else {
            return base64.fromByteArray(buf.slice(start, end));
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end);
          var res = [];
          var i = start;

          while (i < end) {
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte;
                  }

                  break;

                case 2:
                  secondByte = buf[i + 1];

                  if ((secondByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                    if (tempCodePoint > 0x7F) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint;
                    }
                  }

              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xFFFD;
              bytesPerSequence = 1;
            } else if (codePoint > 0xFFFF) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000;
              res.push(codePoint >>> 10 & 0x3FF | 0xD800);
              codePoint = 0xDC00 | codePoint & 0x3FF;
            }

            res.push(codePoint);
            i += bytesPerSequence;
          }

          return decodeCodePointsArray(res);
        } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety


        var MAX_ARGUMENTS_LENGTH = 0x1000;

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length;

          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
          } // Decode in chunks to avoid "call stack size exceeded".


          var res = '';
          var i = 0;

          while (i < len) {
            res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
          }

          return res;
        }

        function asciiSlice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7F);
          }

          return ret;
        }

        function latin1Slice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i]);
          }

          return ret;
        }

        function hexSlice(buf, start, end) {
          var len = buf.length;
          if (!start || start < 0) start = 0;
          if (!end || end < 0 || end > len) end = len;
          var out = '';

          for (var i = start; i < end; ++i) {
            out += toHex(buf[i]);
          }

          return out;
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end);
          var res = '';

          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
          }

          return res;
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length;
          start = ~~start;
          end = end === undefined ? len : ~~end;

          if (start < 0) {
            start += len;
            if (start < 0) start = 0;
          } else if (start > len) {
            start = len;
          }

          if (end < 0) {
            end += len;
            if (end < 0) end = 0;
          } else if (end > len) {
            end = len;
          }

          if (end < start) end = start;
          var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

          newBuf.__proto__ = Buffer.prototype;
          return newBuf;
        };
        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */


        function checkOffset(offset, ext, length) {
          if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
          if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
        }

        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          return val;
        };

        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;

          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }

          var val = this[offset + --byteLength];
          var mul = 1;

          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul;
          }

          return val;
        };

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 1, this.length);
          return this[offset];
        };

        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] | this[offset + 1] << 8;
        };

        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] << 8 | this[offset + 1];
        };

        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
        };

        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
        };

        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var i = byteLength;
          var mul = 1;
          var val = this[offset + --i];

          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 1, this.length);
          if (!(this[offset] & 0x80)) return this[offset];
          return (0xff - this[offset] + 1) * -1;
        };

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset] | this[offset + 1] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset + 1] | this[offset] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
        };

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
        };

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, true, 23, 4);
        };

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, false, 23, 4);
        };

        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, true, 52, 8);
        };

        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, false, 52, 8);
        };

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
          if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var mul = 1;
          var i = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var i = byteLength - 1;
          var mul = 1;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          return offset + 2;
        };

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
          return offset + 2;
        };

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = value & 0xff;
          return offset + 4;
        };

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
          return offset + 4;
        };

        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = 0;
          var mul = 1;
          var sub = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = byteLength - 1;
          var mul = 1;
          var sub = 0;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
          if (value < 0) value = 0xff + value + 1;
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          return offset + 2;
        };

        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
          return offset + 2;
        };

        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
          return offset + 4;
        };

        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (value < 0) value = 0xffffffff + value + 1;
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
          return offset + 4;
        };

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
          if (offset < 0) throw new RangeError('Index out of range');
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
          }

          ieee754.write(buf, value, offset, littleEndian, 23, 4);
          return offset + 4;
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
          return writeFloat(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
          return writeFloat(this, value, offset, false, noAssert);
        };

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
          }

          ieee754.write(buf, value, offset, littleEndian, 52, 8);
          return offset + 8;
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
          return writeDouble(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
          return writeDouble(this, value, offset, false, noAssert);
        }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!start) start = 0;
          if (!end && end !== 0) end = this.length;
          if (targetStart >= target.length) targetStart = target.length;
          if (!targetStart) targetStart = 0;
          if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

          if (end === start) return 0;
          if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

          if (targetStart < 0) {
            throw new RangeError('targetStart out of bounds');
          }

          if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
          if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

          if (end > this.length) end = this.length;

          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start;
          }

          var len = end - start;
          var i;

          if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start];
            }
          } else if (len < 1000) {
            // ascending copy from start
            for (i = 0; i < len; ++i) {
              target[i + targetStart] = this[i + start];
            }
          } else {
            Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
          }

          return len;
        }; // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])


        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === 'string') {
            if (typeof start === 'string') {
              encoding = start;
              start = 0;
              end = this.length;
            } else if (typeof end === 'string') {
              encoding = end;
              end = this.length;
            }

            if (val.length === 1) {
              var code = val.charCodeAt(0);

              if (code < 256) {
                val = code;
              }
            }

            if (encoding !== undefined && typeof encoding !== 'string') {
              throw new TypeError('encoding must be a string');
            }

            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding);
            }
          } else if (typeof val === 'number') {
            val = val & 255;
          } // Invalid ranges are not set to a default, so can range check early.


          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError('Out of range index');
          }

          if (end <= start) {
            return this;
          }

          start = start >>> 0;
          end = end === undefined ? this.length : end >>> 0;
          if (!val) val = 0;
          var i;

          if (typeof val === 'number') {
            for (i = start; i < end; ++i) {
              this[i] = val;
            }
          } else {
            var bytes = Buffer.isBuffer(val) ? val : new Buffer(val, encoding);
            var len = bytes.length;

            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len];
            }
          }

          return this;
        }; // HELPER FUNCTIONS
        // ================


        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

        function base64clean(str) {
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

          if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

          while (str.length % 4 !== 0) {
            str = str + '=';
          }

          return str;
        }

        function toHex(n) {
          if (n < 16) return '0' + n.toString(16);
          return n.toString(16);
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity;
          var codePoint;
          var length = string.length;
          var leadSurrogate = null;
          var bytes = [];

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i); // is surrogate component

            if (codePoint > 0xD7FF && codePoint < 0xE000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } // valid lead


                leadSurrogate = codePoint;
                continue;
              } // 2 leads in a row


              if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
              } // valid surrogate pair


              codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            }

            leadSurrogate = null; // encode utf8

            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break;
              bytes.push(codePoint);
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break;
              bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break;
              bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break;
              bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else {
              throw new Error('Invalid code point');
            }
          }

          return bytes;
        }

        function asciiToBytes(str) {
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xFF);
          }

          return byteArray;
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo;
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break;
            c = str.charCodeAt(i);
            hi = c >> 8;
            lo = c % 256;
            byteArray.push(lo);
            byteArray.push(hi);
          }

          return byteArray;
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str));
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if (i + offset >= dst.length || i >= src.length) break;
            dst[i + offset] = src[i];
          }

          return i;
        } // ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
        // but they should be treated as valid. See: https://github.com/feross/buffer/issues/166


        function isArrayBuffer(obj) {
          return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';
        } // Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`


        function isArrayBufferView(obj) {
          return typeof ArrayBuffer.isView === 'function' && ArrayBuffer.isView(obj);
        }

        function numberIsNaN(obj) {
          return obj !== obj; // eslint-disable-line no-self-compare
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(1));
      /***/
    },
    /* 3 */

    /***/
    function (module, exports) {
      'use strict';

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;

      function placeHoldersCount(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4');
        } // the number of equal signs (place holders)
        // if there are two placeholders, than the two characters before it
        // represent one byte
        // if there is only one, then the three characters before it represent 2 bytes
        // this is just a cheap hack to not do indexOf twice


        return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
      }

      function byteLength(b64) {
        // base64 is 4/3 + up to two characters of the original data
        return b64.length * 3 / 4 - placeHoldersCount(b64);
      }

      function toByteArray(b64) {
        var i, j, l, tmp, placeHolders, arr;
        var len = b64.length;
        placeHolders = placeHoldersCount(b64);
        arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

        l = placeHolders > 0 ? len - 4 : len;
        var L = 0;

        for (i = 0, j = 0; i < l; i += 4, j += 3) {
          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
          arr[L++] = tmp >> 16 & 0xFF;
          arr[L++] = tmp >> 8 & 0xFF;
          arr[L++] = tmp & 0xFF;
        }

        if (placeHolders === 2) {
          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
          arr[L++] = tmp & 0xFF;
        } else if (placeHolders === 1) {
          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
          arr[L++] = tmp >> 8 & 0xFF;
          arr[L++] = tmp & 0xFF;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];

        for (var i = start; i < end; i += 3) {
          tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
          output.push(tripletToBase64(tmp));
        }

        return output.join('');
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

        var output = '';
        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3
        // go through the array every three bytes, we'll deal with trailing stuff later

        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
        } // pad the end with zeros, but make sure to not forget the extra bytes


        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          output += lookup[tmp >> 2];
          output += lookup[tmp << 4 & 0x3F];
          output += '==';
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          output += lookup[tmp >> 10];
          output += lookup[tmp >> 4 & 0x3F];
          output += lookup[tmp << 2 & 0x3F];
          output += '=';
        }

        parts.push(output);
        return parts.join('');
      }
      /***/

    },
    /* 4 */

    /***/
    function (module, exports) {
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;

        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;

        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }

        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };

      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);

          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }

          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }

          if (value * c >= 2) {
            e++;
            c /= 2;
          }

          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = e << mLen | m;
        eLen += mLen;

        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128;
      };
      /***/

    },
    /* 5 */

    /***/
    function (module, exports) {
      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {};

          module.paths = []; // module.parent = undefined by default

          module.children = [];
          module.webpackPolyfill = 1;
        }

        return module;
      };
      /***/

    },
    /* 6 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Process = __webpack_require__(7);

      var process = new Process(),
          processProxy = {};

      function defineKey(key) {
        if (processProxy[key]) {
          // Probably a builtin Object property we don't care about.
          return;
        }

        if (typeof process[key] === 'function') {
          processProxy[key] = function () {
            return process[key].apply(process, arguments);
          };
        } else {
          processProxy[key] = process[key];
        }
      }

      for (var key in process) {
        // Don't check if process.hasOwnProperty; we want to also expose objects
        // up the prototype hierarchy.
        defineKey(key);
      } // Special key: Ensure we update public-facing values of stdin/stdout/stderr.


      processProxy.initializeTTYs = function () {
        if (process.stdin === null) {
          process.initializeTTYs();
          processProxy.stdin = process.stdin;
          processProxy.stdout = process.stdout;
          processProxy.stderr = process.stderr;
        }
      };

      process.nextTick(function () {
        processProxy.initializeTTYs();
      });
      module.exports = processProxy;
      /***/
    },
    /* 7 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (__dirname) {
        "use strict";

        var __extends = this && this.__extends || function (d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];

          function __() {
            this.constructor = d;
          }

          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };

        var events = __webpack_require__(8); // Path depends on process. Avoid a circular reference by dynamically including path when we need it.


        var path = null;

        var Item = function () {
          function Item(fun, array) {
            this.fun = fun;
            this.array = array;
          }

          Item.prototype.run = function () {
            this.fun.apply(null, this.array);
          };

          return Item;
        }();
        /**
         * Contains a queue of Items for process.nextTick.
         * Inspired by node-process: https://github.com/defunctzombie/node-process
         */


        var NextTickQueue = function () {
          function NextTickQueue() {
            this._queue = [];
            this._draining = false; // Used/assigned by the drainQueue function.

            this._currentQueue = null;
            this._queueIndex = -1;
          }

          NextTickQueue.prototype.push = function (item) {
            var _this = this;

            if (this._queue.push(item) === 1 && !this._draining) {
              setTimeout(function () {
                return _this._drainQueue();
              }, 0);
            }
          };

          NextTickQueue.prototype._cleanUpNextTick = function () {
            this._draining = false;

            if (this._currentQueue && this._currentQueue.length) {
              this._queue = this._currentQueue.concat(this._queue);
            } else {
              this._queueIndex = -1;
            }

            if (this._queue.length) {
              this._drainQueue();
            }
          };

          NextTickQueue.prototype._drainQueue = function () {
            var _this = this;

            if (this._draining) {
              return;
            } // If an Item throws an unhandled exception, this function will clean things up.


            var timeout = setTimeout(function () {
              return _this._cleanUpNextTick();
            });
            this._draining = true;
            var len = this._queue.length;

            while (len) {
              this._currentQueue = this._queue;
              this._queue = [];

              while (++this._queueIndex < len) {
                if (this._currentQueue) {
                  this._currentQueue[this._queueIndex].run();
                }
              }

              this._queueIndex = -1;
              len = this._queue.length;
            }

            this._currentQueue = null;
            this._draining = false;
            clearTimeout(timeout);
          };

          return NextTickQueue;
        }();
        /**
         * Partial implementation of Node's `process` module.
         * We implement the portions that are relevant for the filesystem.
         * @see http://nodejs.org/api/process.html
         * @class
         */


        var Process = function (_super) {
          __extends(Process, _super);

          function Process() {
            _super.apply(this, arguments);

            this.startTime = Date.now();
            this._cwd = '/';
            /**
             * Returns what platform you are running on.
             * @return [String]
             */

            this.platform = 'browser';
            this.argv = [];
            this.execArgv = [];
            this.stdout = null;
            this.stderr = null;
            this.stdin = null;
            this.domain = null;
            this._queue = new NextTickQueue();
            this.execPath = __dirname;
            this.env = {};
            this.exitCode = 0;
            this._gid = 1;
            this._uid = 1;
            this.version = 'v5.0';
            this.versions = {
              http_parser: '0.0',
              node: '5.0',
              v8: '0.0',
              uv: '0.0',
              zlib: '0.0',
              ares: '0.0',
              icu: '0.0',
              modules: '0',
              openssl: '0.0'
            };
            this.config = {
              target_defaults: {
                cflags: [],
                default_configuration: 'Release',
                defines: [],
                include_dirs: [],
                libraries: []
              },
              variables: {
                clang: 0,
                host_arch: 'x32',
                node_install_npm: false,
                node_install_waf: false,
                node_prefix: '',
                node_shared_cares: false,
                node_shared_http_parser: false,
                node_shared_libuv: false,
                node_shared_zlib: false,
                node_shared_v8: false,
                node_use_dtrace: false,
                node_use_etw: false,
                node_use_openssl: false,
                node_shared_openssl: false,
                strict_aliasing: false,
                target_arch: 'x32',
                v8_use_snapshot: false,
                v8_no_strict_aliasing: 0,
                visibility: ''
              }
            };
            this.pid = Math.random() * 1000 | 0;
            this.title = 'node';
            this.arch = 'x32';
            this._mask = 18; // Undefined in main thread. Worker-only.

            this.connected = undefined;
          }
          /**
           * Changes the current working directory.
           *
           * **Note**: BrowserFS does not validate that the directory actually exists.
           *
           * @example Usage example
           *   console.log('Starting directory: ' + process.cwd());
           *   process.chdir('/tmp');
           *   console.log('New directory: ' + process.cwd());
           * @param [String] dir The directory to change to.
           */


          Process.prototype.chdir = function (dir) {
            // XXX: Circular dependency hack.
            if (path === null) {
              path = __webpack_require__(9);
            }

            this._cwd = path.resolve(dir);
          };
          /**
           * Returns the current working directory.
           * @example Usage example
           *   console.log('Current directory: ' + process.cwd());
           * @return [String] The current working directory.
           */


          Process.prototype.cwd = function () {
            return this._cwd;
          };
          /**
           * Number of seconds BrowserFS has been running.
           * @return [Number]
           */


          Process.prototype.uptime = function () {
            return (Date.now() - this.startTime) / 1000 | 0;
          };

          Process.prototype.nextTick = function (fun) {
            var args = [];

            for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
            }

            this._queue.push(new Item(fun, args));
          };

          Process.prototype.abort = function () {
            this.emit('abort');
          };

          Process.prototype.exit = function (code) {
            this.exitCode = code;
            this.emit('exit', [code]);
          };

          Process.prototype.getgid = function () {
            return this._gid;
          };

          Process.prototype.setgid = function (gid) {
            if (typeof gid === 'number') {
              this._gid = gid;
            } else {
              this._gid = 1;
            }
          };

          Process.prototype.getuid = function () {
            return this._uid;
          };

          Process.prototype.setuid = function (uid) {
            if (typeof uid === 'number') {
              this._uid = uid;
            } else {
              this._uid = 1;
            }
          };

          Process.prototype.kill = function (pid, signal) {
            this.emit('kill', [pid, signal]);
          };

          Process.prototype.memoryUsage = function () {
            return {
              rss: 0,
              heapTotal: 0,
              heapUsed: 0
            };
          };

          Process.prototype.umask = function (mask) {
            if (mask === void 0) {
              mask = this._mask;
            }

            var oldMask = this._mask;
            this._mask = mask;
            this.emit('umask', [mask]);
            return oldMask;
          };

          Process.prototype.hrtime = function () {
            var timeinfo;

            if (typeof performance !== 'undefined') {
              timeinfo = performance.now();
            } else if (Date['now']) {
              timeinfo = Date.now();
            } else {
              timeinfo = new Date().getTime();
            }

            var secs = timeinfo / 1000 | 0;
            timeinfo -= secs * 1000;
            timeinfo = timeinfo * 1000000 | 0;
            return [secs, timeinfo];
          };
          /**
           * [BFS only] Initialize the TTY devices.
           */


          Process.prototype.initializeTTYs = function () {
            // Guard against multiple invocations.
            if (this.stdout === null) {
              var TTY = __webpack_require__(10);

              this.stdout = new TTY();
              this.stderr = new TTY();
              this.stdin = new TTY();
            }
          };
          /**
           * Worker-only function; irrelevant here.
           */


          Process.prototype.disconnect = function () {};

          return Process;
        }(events.EventEmitter);

        module.exports = Process;
        /* WEBPACK VAR INJECTION */
      }).call(exports, "/");
      /***/
    },
    /* 8 */

    /***/
    function (module, exports) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      function EventEmitter() {
        this._events = this._events || {};
        this._maxListeners = this._maxListeners || undefined;
      }

      module.exports = EventEmitter; // Backwards-compat with node 0.10.x

      EventEmitter.EventEmitter = EventEmitter;
      EventEmitter.prototype._events = undefined;
      EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
      // added to it. This is a useful default which helps finding memory leaks.

      EventEmitter.defaultMaxListeners = 10; // Obviously not all Emitters should be limited to 10. This function allows
      // that to be increased. Set to zero for unlimited.

      EventEmitter.prototype.setMaxListeners = function (n) {
        if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
        this._maxListeners = n;
        return this;
      };

      EventEmitter.prototype.emit = function (type) {
        var er, handler, len, args, i, listeners;
        if (!this._events) this._events = {}; // If there is no 'error' event listener then throw.

        if (type === 'error') {
          if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
            er = arguments[1];

            if (er instanceof Error) {
              throw er; // Unhandled 'error' event
            } else {
              // At least give some kind of context to the user
              var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
              err.context = er;
              throw err;
            }
          }
        }

        handler = this._events[type];
        if (isUndefined(handler)) return false;

        if (isFunction(handler)) {
          switch (arguments.length) {
            // fast cases
            case 1:
              handler.call(this);
              break;

            case 2:
              handler.call(this, arguments[1]);
              break;

            case 3:
              handler.call(this, arguments[1], arguments[2]);
              break;
            // slower

            default:
              args = Array.prototype.slice.call(arguments, 1);
              handler.apply(this, args);
          }
        } else if (isObject(handler)) {
          args = Array.prototype.slice.call(arguments, 1);
          listeners = handler.slice();
          len = listeners.length;

          for (i = 0; i < len; i++) listeners[i].apply(this, args);
        }

        return true;
      };

      EventEmitter.prototype.addListener = function (type, listener) {
        var m;
        if (!isFunction(listener)) throw TypeError('listener must be a function');
        if (!this._events) this._events = {}; // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".

        if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
        if (!this._events[type]) // Optimize the case of one listener. Don't need the extra array object.
          this._events[type] = listener;else if (isObject(this._events[type])) // If we've already got an array, just append.
          this._events[type].push(listener);else // Adding the second element, need to change to array.
          this._events[type] = [this._events[type], listener]; // Check for listener leak

        if (isObject(this._events[type]) && !this._events[type].warned) {
          if (!isUndefined(this._maxListeners)) {
            m = this._maxListeners;
          } else {
            m = EventEmitter.defaultMaxListeners;
          }

          if (m && m > 0 && this._events[type].length > m) {
            this._events[type].warned = true;
            console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);

            if (typeof console.trace === 'function') {
              // not supported in IE 10
              console.trace();
            }
          }
        }

        return this;
      };

      EventEmitter.prototype.on = EventEmitter.prototype.addListener;

      EventEmitter.prototype.once = function (type, listener) {
        if (!isFunction(listener)) throw TypeError('listener must be a function');
        var fired = false;

        function g() {
          this.removeListener(type, g);

          if (!fired) {
            fired = true;
            listener.apply(this, arguments);
          }
        }

        g.listener = listener;
        this.on(type, g);
        return this;
      }; // emits a 'removeListener' event iff the listener was removed


      EventEmitter.prototype.removeListener = function (type, listener) {
        var list, position, length, i;
        if (!isFunction(listener)) throw TypeError('listener must be a function');
        if (!this._events || !this._events[type]) return this;
        list = this._events[type];
        length = list.length;
        position = -1;

        if (list === listener || isFunction(list.listener) && list.listener === listener) {
          delete this._events[type];
          if (this._events.removeListener) this.emit('removeListener', type, listener);
        } else if (isObject(list)) {
          for (i = length; i-- > 0;) {
            if (list[i] === listener || list[i].listener && list[i].listener === listener) {
              position = i;
              break;
            }
          }

          if (position < 0) return this;

          if (list.length === 1) {
            list.length = 0;
            delete this._events[type];
          } else {
            list.splice(position, 1);
          }

          if (this._events.removeListener) this.emit('removeListener', type, listener);
        }

        return this;
      };

      EventEmitter.prototype.removeAllListeners = function (type) {
        var key, listeners;
        if (!this._events) return this; // not listening for removeListener, no need to emit

        if (!this._events.removeListener) {
          if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
          return this;
        } // emit removeListener for all listeners on all events


        if (arguments.length === 0) {
          for (key in this._events) {
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }

          this.removeAllListeners('removeListener');
          this._events = {};
          return this;
        }

        listeners = this._events[type];

        if (isFunction(listeners)) {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
        }

        delete this._events[type];
        return this;
      };

      EventEmitter.prototype.listeners = function (type) {
        var ret;
        if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
        return ret;
      };

      EventEmitter.prototype.listenerCount = function (type) {
        if (this._events) {
          var evlistener = this._events[type];
          if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
        }

        return 0;
      };

      EventEmitter.listenerCount = function (emitter, type) {
        return emitter.listenerCount(type);
      };

      function isFunction(arg) {
        return typeof arg === 'function';
      }

      function isNumber(arg) {
        return typeof arg === 'number';
      }

      function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
      }

      function isUndefined(arg) {
        return arg === void 0;
      }
      /***/

    },
    /* 9 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        "use strict"; // Split a filename into [root, dir, basename, ext], unix version
        // 'root' is just a slash, or nothing.

        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;

        function posixSplitPath(filename) {
          var out = splitPathRe.exec(filename);
          out.shift();
          return out;
        }
        /**
         * Emulates Node's `path` module. This module contains utilities for handling and
         * transforming file paths. **All** of these methods perform only string
         * transformations. The file system is not consulted to check whether paths are
         * valid.
         * @see http://nodejs.org/api/path.html
         * @class
         */


        var path = function () {
          function path() {}
          /**
           * Normalize a string path, taking care of '..' and '.' parts.
           *
           * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.
           * @example Usage example
           *   path.normalize('/foo/bar//baz/asdf/quux/..')
           *   // returns
           *   '/foo/bar/baz/asdf'
           * @param [String] p The path to normalize.
           * @return [String]
           */


          path.normalize = function (p) {
            // Special case: '' -> '.'
            if (p === '') {
              p = '.';
            } // It's very important to know if the path is relative or not, since it
            // changes how we process .. and reconstruct the split string.


            var absolute = p.charAt(0) === path.sep; // Remove repeated //s

            p = path._removeDuplicateSeps(p); // Try to remove as many '../' as possible, and remove '.' completely.

            var components = p.split(path.sep);
            var goodComponents = [];

            for (var idx = 0; idx < components.length; idx++) {
              var c = components[idx];

              if (c === '.') {
                continue;
              } else if (c === '..' && (absolute || !absolute && goodComponents.length > 0 && goodComponents[0] !== '..')) {
                // In the absolute case: Path is relative to root, so we may pop even if
                // goodComponents is empty (e.g. /../ => /)
                // In the relative case: We're getting rid of a directory that preceded
                // it (e.g. /foo/../bar -> /bar)
                goodComponents.pop();
              } else {
                goodComponents.push(c);
              }
            } // Add in '.' when it's a relative path with no other nonempty components.
            // Possible results: '.' and './' (input: [''] or [])
            // @todo Can probably simplify this logic.


            if (!absolute && goodComponents.length < 2) {
              switch (goodComponents.length) {
                case 1:
                  if (goodComponents[0] === '') {
                    goodComponents.unshift('.');
                  }

                  break;

                default:
                  goodComponents.push('.');
              }
            }

            p = goodComponents.join(path.sep);

            if (absolute && p.charAt(0) !== path.sep) {
              p = path.sep + p;
            }

            return p;
          };
          /**
           * Join all arguments together and normalize the resulting path.
           *
           * Arguments must be strings.
           * @example Usage
           *   path.join('/foo', 'bar', 'baz/asdf', 'quux', '..')
           *   // returns
           *   '/foo/bar/baz/asdf'
           *
           *   path.join('foo', {}, 'bar')
           *   // throws exception
           *   TypeError: Arguments to path.join must be strings
           * @param [String,...] paths Each component of the path
           * @return [String]
           */


          path.join = function () {
            var paths = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              paths[_i - 0] = arguments[_i];
            } // Required: Prune any non-strings from the path. I also prune empty segments
            // so we can do a simple join of the array.


            var processed = [];

            for (var i = 0; i < paths.length; i++) {
              var segment = paths[i];

              if (typeof segment !== 'string') {
                throw new TypeError("Invalid argument type to path.join: " + typeof segment);
              } else if (segment !== '') {
                processed.push(segment);
              }
            }

            return path.normalize(processed.join(path.sep));
          };
          /**
           * Resolves to to an absolute path.
           *
           * If to isn't already absolute from arguments are prepended in right to left
           * order, until an absolute path is found. If after using all from paths still
           * no absolute path is found, the current working directory is used as well.
           * The resulting path is normalized, and trailing slashes are removed unless
           * the path gets resolved to the root directory. Non-string arguments are
           * ignored.
           *
           * Another way to think of it is as a sequence of cd commands in a shell.
           *
           *     path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subfile')
           *
           * Is similar to:
           *
           *     cd foo/bar
           *     cd /tmp/file/
           *     cd ..
           *     cd a/../subfile
           *     pwd
           *
           * The difference is that the different paths don't need to exist and may also
           * be files.
           * @example Usage example
           *   path.resolve('/foo/bar', './baz')
           *   // returns
           *   '/foo/bar/baz'
           *
           *   path.resolve('/foo/bar', '/tmp/file/')
           *   // returns
           *   '/tmp/file'
           *
           *   path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')
           *   // if currently in /home/myself/node, it returns
           *   '/home/myself/node/wwwroot/static_files/gif/image.gif'
           * @param [String,...] paths
           * @return [String]
           */


          path.resolve = function () {
            var paths = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              paths[_i - 0] = arguments[_i];
            } // Monitor for invalid paths, throw out empty paths, and look for the *last*
            // absolute path that we see.


            var processed = [];

            for (var i = 0; i < paths.length; i++) {
              var p = paths[i];

              if (typeof p !== 'string') {
                throw new TypeError("Invalid argument type to path.join: " + typeof p);
              } else if (p !== '') {
                // Remove anything that has occurred before this absolute path, as it
                // doesn't matter.
                if (p.charAt(0) === path.sep) {
                  processed = [];
                }

                processed.push(p);
              }
            } // Special: Remove trailing slash unless it's the root


            var resolved = path.normalize(processed.join(path.sep));

            if (resolved.length > 1 && resolved.charAt(resolved.length - 1) === path.sep) {
              return resolved.substr(0, resolved.length - 1);
            } // Special: If it doesn't start with '/', it's relative and we need to append
            // the current directory.


            if (resolved.charAt(0) !== path.sep) {
              // Remove ./, since we're going to append the current directory.
              if (resolved.charAt(0) === '.' && (resolved.length === 1 || resolved.charAt(1) === path.sep)) {
                resolved = resolved.length === 1 ? '' : resolved.substr(2);
              } // Append the current directory, which *must* be an absolute path.


              var cwd = process.cwd();

              if (resolved !== '') {
                // cwd will never end in a /... unless it's the root.
                resolved = this.normalize(cwd + (cwd !== '/' ? path.sep : '') + resolved);
              } else {
                resolved = cwd;
              }
            }

            return resolved;
          };
          /**
           * Solve the relative path from from to to.
           *
           * At times we have two absolute paths, and we need to derive the relative path
           * from one to the other. This is actually the reverse transform of
           * path.resolve, which means we see that:
           *
           *    path.resolve(from, path.relative(from, to)) == path.resolve(to)
           *
           * @example Usage example
           *   path.relative('C:\\orandea\\test\\aaa', 'C:\\orandea\\impl\\bbb')
           *   // returns
           *   '..\\..\\impl\\bbb'
           *
           *   path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')
           *   // returns
           *   '../../impl/bbb'
           * @param [String] from
           * @param [String] to
           * @return [String]
           */


          path.relative = function (from, to) {
            var i; // Alright. Let's resolve these two to absolute paths and remove any
            // weirdness.

            from = path.resolve(from);
            to = path.resolve(to);
            var fromSegs = from.split(path.sep);
            var toSegs = to.split(path.sep); // Remove the first segment on both, as it's '' (both are absolute paths)

            toSegs.shift();
            fromSegs.shift(); // There are two segments to this path:
            // * Going *up* the directory hierarchy with '..'
            // * Going *down* the directory hierarchy with foo/baz/bat.

            var upCount = 0;
            var downSegs = []; // Figure out how many things in 'from' are shared with 'to'.

            for (i = 0; i < fromSegs.length; i++) {
              var seg = fromSegs[i];

              if (seg === toSegs[i]) {
                continue;
              } // The rest of 'from', including the current element, indicates how many
              // directories we need to go up.


              upCount = fromSegs.length - i;
              break;
            } // The rest of 'to' indicates where we need to change to. We place this
            // outside of the loop, as toSegs.length may be greater than fromSegs.length.


            downSegs = toSegs.slice(i); // Special case: If 'from' is '/'

            if (fromSegs.length === 1 && fromSegs[0] === '') {
              upCount = 0;
            } // upCount can't be greater than the number of fromSegs
            // (cd .. from / is still /)


            if (upCount > fromSegs.length) {
              upCount = fromSegs.length;
            } // Create the final string!


            var rv = '';

            for (i = 0; i < upCount; i++) {
              rv += '../';
            }

            rv += downSegs.join(path.sep); // Special case: Remove trailing '/'. Happens if it's all up and no down.

            if (rv.length > 1 && rv.charAt(rv.length - 1) === path.sep) {
              rv = rv.substr(0, rv.length - 1);
            }

            return rv;
          };
          /**
           * Return the directory name of a path. Similar to the Unix `dirname` command.
           *
           * Note that BrowserFS does not validate if the path is actually a valid
           * directory.
           * @example Usage example
           *   path.dirname('/foo/bar/baz/asdf/quux')
           *   // returns
           *   '/foo/bar/baz/asdf'
           * @param [String] p The path to get the directory name of.
           * @return [String]
           */


          path.dirname = function (p) {
            // We get rid of //, but we don't modify anything else (e.g. any extraneous .
            // and ../ are kept intact)
            p = path._removeDuplicateSeps(p);
            var absolute = p.charAt(0) === path.sep;
            var sections = p.split(path.sep); // Do 1 if it's /foo/bar, 2 if it's /foo/bar/

            if (sections.pop() === '' && sections.length > 0) {
              sections.pop();
            } // # of sections needs to be > 1 if absolute, since the first section is '' for '/'.
            // If not absolute, the first section is the first part of the path, and is OK
            // to return.


            if (sections.length > 1 || sections.length === 1 && !absolute) {
              return sections.join(path.sep);
            } else if (absolute) {
              return path.sep;
            } else {
              return '.';
            }
          };
          /**
           * Return the last portion of a path. Similar to the Unix basename command.
           * @example Usage example
           *   path.basename('/foo/bar/baz/asdf/quux.html')
           *   // returns
           *   'quux.html'
           *
           *   path.basename('/foo/bar/baz/asdf/quux.html', '.html')
           *   // returns
           *   'quux'
           * @param [String] p
           * @param [String?] ext
           * @return [String]
           */


          path.basename = function (p, ext) {
            if (ext === void 0) {
              ext = "";
            } // Special case: Normalize will modify this to '.'


            if (p === '') {
              return p;
            } // Normalize the string first to remove any weirdness.


            p = path.normalize(p); // Get the last part of the string.

            var sections = p.split(path.sep);
            var lastPart = sections[sections.length - 1]; // Special case: If it's empty, then we have a string like so: foo/
            // Meaning, 'foo' is guaranteed to be a directory.

            if (lastPart === '' && sections.length > 1) {
              return sections[sections.length - 2];
            } // Remove the extension, if need be.


            if (ext.length > 0) {
              var lastPartExt = lastPart.substr(lastPart.length - ext.length);

              if (lastPartExt === ext) {
                return lastPart.substr(0, lastPart.length - ext.length);
              }
            }

            return lastPart;
          };
          /**
           * Return the extension of the path, from the last '.' to end of string in the
           * last portion of the path. If there is no '.' in the last portion of the path
           * or the first character of it is '.', then it returns an empty string.
           * @example Usage example
           *   path.extname('index.html')
           *   // returns
           *   '.html'
           *
           *   path.extname('index.')
           *   // returns
           *   '.'
           *
           *   path.extname('index')
           *   // returns
           *   ''
           * @param [String] p
           * @return [String]
           */


          path.extname = function (p) {
            p = path.normalize(p);
            var sections = p.split(path.sep);
            p = sections.pop(); // Special case: foo/file.ext/ should return '.ext'

            if (p === '' && sections.length > 0) {
              p = sections.pop();
            }

            if (p === '..') {
              return '';
            }

            var i = p.lastIndexOf('.');

            if (i === -1 || i === 0) {
              return '';
            }

            return p.substr(i);
          };
          /**
           * Checks if the given path is an absolute path.
           *
           * Despite not being documented, this is a tested part of Node's path API.
           * @param [String] p
           * @return [Boolean] True if the path appears to be an absolute path.
           */


          path.isAbsolute = function (p) {
            return p.length > 0 && p.charAt(0) === path.sep;
          };
          /**
           * Unknown. Undocumented.
           */


          path._makeLong = function (p) {
            return p;
          };
          /**
           * Returns an object from a path string.
           */


          path.parse = function (p) {
            var allParts = posixSplitPath(p);
            return {
              root: allParts[0],
              dir: allParts[0] + allParts[1].slice(0, -1),
              base: allParts[2],
              ext: allParts[3],
              name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
            };
          };

          path.format = function (pathObject) {
            if (pathObject === null || typeof pathObject !== 'object') {
              throw new TypeError("Parameter 'pathObject' must be an object, not " + typeof pathObject);
            }

            var root = pathObject.root || '';

            if (typeof root !== 'string') {
              throw new TypeError("'pathObject.root' must be a string or undefined, not " + typeof pathObject.root);
            }

            var dir = pathObject.dir ? pathObject.dir + path.sep : '';
            var base = pathObject.base || '';
            return dir + base;
          };

          path._removeDuplicateSeps = function (p) {
            p = p.replace(this._replaceRegex, this.sep);
            return p;
          }; // The platform-specific file separator. BrowserFS uses `/`.


          path.sep = '/';
          path._replaceRegex = new RegExp("//+", 'g'); // The platform-specific path delimiter. BrowserFS uses `:`.

          path.delimiter = ':';
          path.posix = path; // XXX: Typing hack. We don't actually support win32.

          path.win32 = path;
          return path;
        }();

        var _ = path;
        module.exports = path;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(6));
      /***/
    },
    /* 10 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        "use strict";

        var __extends = this && this.__extends || function (d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];

          function __() {
            this.constructor = d;
          }

          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };

        var stream = __webpack_require__(11);

        var TTY = function (_super) {
          __extends(TTY, _super);

          function TTY() {
            _super.call(this);

            this.isRaw = false;
            this.columns = 80;
            this.rows = 120;
            this.isTTY = true;
            this._bufferedWrites = [];
            this._waitingForWrites = false;
          }
          /**
           * Toggle raw mode.
           */


          TTY.prototype.setRawMode = function (mode) {
            if (this.isRaw !== mode) {
              this.isRaw = mode; // [BFS] TTY implementations can use this to change their event emitting
              //       patterns.

              this.emit('modeChange');
            }
          };
          /**
           * [BFS] Update the number of columns available on the terminal.
           */


          TTY.prototype.changeColumns = function (columns) {
            if (columns !== this.columns) {
              this.columns = columns; // Resize event.

              this.emit('resize');
            }
          };
          /**
           * [BFS] Update the number of rows available on the terminal.
           */


          TTY.prototype.changeRows = function (rows) {
            if (rows !== this.rows) {
              this.rows = rows; // Resize event.

              this.emit('resize');
            }
          };
          /**
           * Returns 'true' if the given object is a TTY.
           */


          TTY.isatty = function (fd) {
            return fd && fd instanceof TTY;
          };

          TTY.prototype._write = function (chunk, encoding, cb) {
            var error;

            try {
              var data;

              if (typeof chunk === 'string') {
                data = new Buffer(chunk, encoding);
              } else {
                data = chunk;
              }

              this._bufferedWrites.push(data);

              if (this._waitingForWrites) {
                this._read(1024);
              }
            } catch (e) {
              error = e;
            } finally {
              cb(error);
            }
          };

          TTY.prototype._read = function (size) {
            // Size is advisory -- we can ignore it.
            if (this._bufferedWrites.length === 0) {
              this._waitingForWrites = true;
            } else {
              while (this._bufferedWrites.length > 0) {
                this._waitingForWrites = this.push(this._bufferedWrites.shift());

                if (!this._waitingForWrites) {
                  break;
                }
              }
            }
          };

          return TTY;
        }(stream.Duplex);

        module.exports = TTY;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(1));
      /***/
    },
    /* 11 */

    /***/
    function (module, exports, __webpack_require__) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      module.exports = Stream;

      var EE = __webpack_require__(8).EventEmitter;

      var inherits = __webpack_require__(12);

      inherits(Stream, EE);
      Stream.Readable = __webpack_require__(13);
      Stream.Writable = __webpack_require__(27);
      Stream.Duplex = __webpack_require__(28);
      Stream.Transform = __webpack_require__(29);
      Stream.PassThrough = __webpack_require__(30); // Backwards-compat with node 0.4.x

      Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
      // part of this class) is overridden in the Readable class.

      function Stream() {
        EE.call(this);
      }

      Stream.prototype.pipe = function (dest, options) {
        var source = this;

        function ondata(chunk) {
          if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) {
              source.pause();
            }
          }
        }

        source.on('data', ondata);

        function ondrain() {
          if (source.readable && source.resume) {
            source.resume();
          }
        }

        dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
        // source gets the 'end' or 'close' events.  Only dest.end() once.

        if (!dest._isStdio && (!options || options.end !== false)) {
          source.on('end', onend);
          source.on('close', onclose);
        }

        var didOnEnd = false;

        function onend() {
          if (didOnEnd) return;
          didOnEnd = true;
          dest.end();
        }

        function onclose() {
          if (didOnEnd) return;
          didOnEnd = true;
          if (typeof dest.destroy === 'function') dest.destroy();
        } // don't leave dangling pipes when there are errors.


        function onerror(er) {
          cleanup();

          if (EE.listenerCount(this, 'error') === 0) {
            throw er; // Unhandled stream error in pipe.
          }
        }

        source.on('error', onerror);
        dest.on('error', onerror); // remove all the event listeners that were added.

        function cleanup() {
          source.removeListener('data', ondata);
          dest.removeListener('drain', ondrain);
          source.removeListener('end', onend);
          source.removeListener('close', onclose);
          source.removeListener('error', onerror);
          dest.removeListener('error', onerror);
          source.removeListener('end', cleanup);
          source.removeListener('close', cleanup);
          dest.removeListener('close', cleanup);
        }

        source.on('end', cleanup);
        source.on('close', cleanup);
        dest.on('close', cleanup);
        dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

        return dest;
      };
      /***/

    },
    /* 12 */

    /***/
    function (module, exports) {
      if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function () {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        };
      }
      /***/

    },
    /* 13 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        var Stream = function () {
          try {
            return __webpack_require__(11); // hack to fix a circular dependency issue when used with browserify
          } catch (_) {}
        }();

        exports = module.exports = __webpack_require__(14);
        exports.Stream = Stream || exports;
        exports.Readable = exports;
        exports.Writable = __webpack_require__(22);
        exports.Duplex = __webpack_require__(21);
        exports.Transform = __webpack_require__(25);
        exports.PassThrough = __webpack_require__(26);

        if (!process.browser && undefined === 'disable' && Stream) {
          module.exports = Stream;
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(6));
      /***/
    },
    /* 14 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        'use strict';

        module.exports = Readable;
        /*<replacement>*/

        var processNextTick = __webpack_require__(15);
        /*</replacement>*/

        /*<replacement>*/


        var isArray = __webpack_require__(16);
        /*</replacement>*/

        /*<replacement>*/


        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;
        /*<replacement>*/

        var EE = __webpack_require__(8).EventEmitter;

        var EElistenerCount = function (emitter, type) {
          return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/


        var Stream;

        (function () {
          try {
            Stream = __webpack_require__(11);
          } catch (_) {} finally {
            if (!Stream) Stream = __webpack_require__(8).EventEmitter;
          }
        })();
        /*</replacement>*/


        var Buffer = __webpack_require__(2).Buffer;
        /*<replacement>*/


        var bufferShim = __webpack_require__(17);
        /*</replacement>*/

        /*<replacement>*/


        var util = __webpack_require__(18);

        util.inherits = __webpack_require__(12);
        /*</replacement>*/

        /*<replacement>*/

        var debugUtil = __webpack_require__(19);

        var debug = void 0;

        if (debugUtil && debugUtil.debuglog) {
          debug = debugUtil.debuglog('stream');
        } else {
          debug = function () {};
        }
        /*</replacement>*/


        var BufferList = __webpack_require__(20);

        var StringDecoder;
        util.inherits(Readable, Stream);

        function prependListener(emitter, event, fn) {
          // Sadly this is not cacheable as some libraries bundle their own
          // event emitter implementation with them.
          if (typeof emitter.prependListener === 'function') {
            return emitter.prependListener(event, fn);
          } else {
            // This is a hack to make sure that our error handler is attached before any
            // userland ones.  NEVER DO THIS. This is here only because this code needs
            // to continue to work with older versions of Node.js that do not include
            // the prependListener() method. The goal is to eventually remove this hack.
            if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
          }
        }

        function ReadableState(options, stream) {
          Duplex = Duplex || __webpack_require__(21);
          options = options || {}; // object stream flag. Used to make read(n) ignore n and to
          // make all the buffer merging and length checks go away

          this.objectMode = !!options.objectMode;
          if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
          // Note: 0 is a valid value, means "don't call _read preemptively ever"

          var hwm = options.highWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;
          this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

          this.highWaterMark = ~~this.highWaterMark; // A linked list is used to store data chunks instead of an array because the
          // linked list can remove elements from the beginning faster than
          // array.shift()

          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.

          this.sync = true; // whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.

          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen
          // after read()ing all the bytes and not getting any pushback.

          this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s

          this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

          this.readingMore = false;
          this.decoder = null;
          this.encoding = null;

          if (options.encoding) {
            if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }

        function Readable(options) {
          Duplex = Duplex || __webpack_require__(21);
          if (!(this instanceof Readable)) return new Readable(options);
          this._readableState = new ReadableState(options, this); // legacy

          this.readable = true;
          if (options && typeof options.read === 'function') this._read = options.read;
          Stream.call(this);
        } // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.


        Readable.prototype.push = function (chunk, encoding) {
          var state = this._readableState;

          if (!state.objectMode && typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;

            if (encoding !== state.encoding) {
              chunk = bufferShim.from(chunk, encoding);
              encoding = '';
            }
          }

          return readableAddChunk(this, state, chunk, encoding, false);
        }; // Unshift should *always* be something directly out of read()


        Readable.prototype.unshift = function (chunk) {
          var state = this._readableState;
          return readableAddChunk(this, state, chunk, '', true);
        };

        Readable.prototype.isPaused = function () {
          return this._readableState.flowing === false;
        };

        function readableAddChunk(stream, state, chunk, encoding, addToFront) {
          var er = chunkInvalid(state, chunk);

          if (er) {
            stream.emit('error', er);
          } else if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (state.ended && !addToFront) {
              var e = new Error('stream.push() after EOF');
              stream.emit('error', e);
            } else if (state.endEmitted && addToFront) {
              var _e = new Error('stream.unshift() after end event');

              stream.emit('error', _e);
            } else {
              var skipAdd;

              if (state.decoder && !addToFront && !encoding) {
                chunk = state.decoder.write(chunk);
                skipAdd = !state.objectMode && chunk.length === 0;
              }

              if (!addToFront) state.reading = false; // Don't add to the buffer if we've decoded to an empty string chunk and
              // we're not in object mode

              if (!skipAdd) {
                // if we want the data now, just emit it.
                if (state.flowing && state.length === 0 && !state.sync) {
                  stream.emit('data', chunk);
                  stream.read(0);
                } else {
                  // update the buffer info.
                  state.length += state.objectMode ? 1 : chunk.length;
                  if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
                  if (state.needReadable) emitReadable(stream);
                }
              }

              maybeReadMore(stream, state);
            }
          } else if (!addToFront) {
            state.reading = false;
          }

          return needMoreData(state);
        } // if it's past the high water mark, we can push in some more.
        // Also, if we have no data yet, we can stand some
        // more bytes.  This is to work around cases where hwm=0,
        // such as the repl.  Also, if the push() triggered a
        // readable event, and the user called read(largeNumber) such that
        // needReadable was set, then we ought to push more, so that another
        // 'readable' event will be triggered.


        function needMoreData(state) {
          return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
        } // backwards compatibility.


        Readable.prototype.setEncoding = function (enc) {
          if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
          this._readableState.decoder = new StringDecoder(enc);
          this._readableState.encoding = enc;
          return this;
        }; // Don't raise the hwm > 8MB


        var MAX_HWM = 0x800000;

        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            n = MAX_HWM;
          } else {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }

          return n;
        } // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function howMuchToRead(n, state) {
          if (n <= 0 || state.length === 0 && state.ended) return 0;
          if (state.objectMode) return 1;

          if (n !== n) {
            // Only flow one buffer at a time
            if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
          } // If we're asking for more than the current hwm, then raise the hwm.


          if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length) return n; // Don't have enough

          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }

          return state.length;
        } // you can override either this method, or the async _read(n) below.


        Readable.prototype.read = function (n) {
          debug('read', n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;
          if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
          // already have a bunch of data in the buffer, then just trigger
          // the 'readable' event and move on.

          if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
            debug('read: emitReadable', state.length, state.ended);
            if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
            return null;
          }

          n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

          if (n === 0 && state.ended) {
            if (state.length === 0) endReadable(this);
            return null;
          } // All the actual chunk generation logic needs to be
          // *below* the call to _read.  The reason is that in certain
          // synthetic stream cases, such as passthrough streams, _read
          // may be a completely synchronous operation which may change
          // the state of the read buffer, providing enough data when
          // before there was *not* enough.
          //
          // So, the steps are:
          // 1. Figure out what the state of things will be after we do
          // a read from the buffer.
          //
          // 2. If that resulting state will trigger a _read, then call _read.
          // Note that this may be asynchronous, or synchronous.  Yes, it is
          // deeply ugly to write APIs this way, but that still doesn't mean
          // that the Readable class should behave improperly, as streams are
          // designed to be sync/async agnostic.
          // Take note if the _read call is sync or async (ie, if the read call
          // has returned yet), so that we know whether or not it's safe to emit
          // 'readable' etc.
          //
          // 3. Actually pull the requested chunks out of the buffer and return.
          // if we need a readable event, then we need to do some reading.


          var doRead = state.needReadable;
          debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug('length less than watermark', doRead);
          } // however, if we've ended, then there's no point, and if we're already
          // reading, then it's unnecessary.


          if (state.ended || state.reading) {
            doRead = false;
            debug('reading or ended', doRead);
          } else if (doRead) {
            debug('do read');
            state.reading = true;
            state.sync = true; // if the length is currently zero, then we *need* a readable event.

            if (state.length === 0) state.needReadable = true; // call internal read method

            this._read(state.highWaterMark);

            state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.

            if (!state.reading) n = howMuchToRead(nOrig, state);
          }

          var ret;
          if (n > 0) ret = fromList(n, state);else ret = null;

          if (ret === null) {
            state.needReadable = true;
            n = 0;
          } else {
            state.length -= n;
          }

          if (state.length === 0) {
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

            if (nOrig !== n && state.ended) endReadable(this);
          }

          if (ret !== null) this.emit('data', ret);
          return ret;
        };

        function chunkInvalid(state, chunk) {
          var er = null;

          if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
            er = new TypeError('Invalid non-string/buffer chunk');
          }

          return er;
        }

        function onEofChunk(stream, state) {
          if (state.ended) return;

          if (state.decoder) {
            var chunk = state.decoder.end();

            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }

          state.ended = true; // emit 'readable' now to make sure it gets picked up.

          emitReadable(stream);
        } // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.


        function emitReadable(stream) {
          var state = stream._readableState;
          state.needReadable = false;

          if (!state.emittedReadable) {
            debug('emitReadable', state.flowing);
            state.emittedReadable = true;
            if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
          }
        }

        function emitReadable_(stream) {
          debug('emit readable');
          stream.emit('readable');
          flow(stream);
        } // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.


        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            processNextTick(maybeReadMore_, stream, state);
          }
        }

        function maybeReadMore_(stream, state) {
          var len = state.length;

          while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
            debug('maybeReadMore read 0');
            stream.read(0);
            if (len === state.length) // didn't get any data, stop spinning.
              break;else len = state.length;
          }

          state.readingMore = false;
        } // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.


        Readable.prototype._read = function (n) {
          this.emit('error', new Error('_read() is not implemented'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
          var src = this;
          var state = this._readableState;

          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;

            case 1:
              state.pipes = [state.pipes, dest];
              break;

            default:
              state.pipes.push(dest);
              break;
          }

          state.pipesCount += 1;
          debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
          var endFn = doEnd ? onend : cleanup;
          if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
          dest.on('unpipe', onunpipe);

          function onunpipe(readable) {
            debug('onunpipe');

            if (readable === src) {
              cleanup();
            }
          }

          function onend() {
            debug('onend');
            dest.end();
          } // when the dest drains, it reduces the awaitDrain counter
          // on the source.  This would be more elegant with a .once()
          // handler in flow(), but adding and removing repeatedly is
          // too slow.


          var ondrain = pipeOnDrain(src);
          dest.on('drain', ondrain);
          var cleanedUp = false;

          function cleanup() {
            debug('cleanup'); // cleanup event handlers once the pipe is broken

            dest.removeListener('close', onclose);
            dest.removeListener('finish', onfinish);
            dest.removeListener('drain', ondrain);
            dest.removeListener('error', onerror);
            dest.removeListener('unpipe', onunpipe);
            src.removeListener('end', onend);
            src.removeListener('end', cleanup);
            src.removeListener('data', ondata);
            cleanedUp = true; // if the reader is waiting for a drain event from this
            // specific writer, then it would cause it to never start
            // flowing again.
            // So, if this is awaiting a drain, then we just call it now.
            // If we don't know, then assume that we are waiting for one.

            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
          } // If the user pushes more data while we're writing to dest then we'll end up
          // in ondata again. However, we only want to increase awaitDrain once because
          // dest will only emit one 'drain' event for the multiple writes.
          // => Introduce a guard on increasing awaitDrain.


          var increasedAwaitDrain = false;
          src.on('data', ondata);

          function ondata(chunk) {
            debug('ondata');
            increasedAwaitDrain = false;
            var ret = dest.write(chunk);

            if (false === ret && !increasedAwaitDrain) {
              // If the user unpiped during `dest.write()`, it is possible
              // to get stuck in a permanently paused state if that write
              // also returned false.
              // => Check whether `dest` is still a piping destination.
              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', src._readableState.awaitDrain);
                src._readableState.awaitDrain++;
                increasedAwaitDrain = true;
              }

              src.pause();
            }
          } // if the dest has an error, then stop piping into it.
          // however, don't suppress the throwing behavior for this.


          function onerror(er) {
            debug('onerror', er);
            unpipe();
            dest.removeListener('error', onerror);
            if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
          } // Make sure our error handler is attached before userland ones.


          prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

          function onclose() {
            dest.removeListener('finish', onfinish);
            unpipe();
          }

          dest.once('close', onclose);

          function onfinish() {
            debug('onfinish');
            dest.removeListener('close', onclose);
            unpipe();
          }

          dest.once('finish', onfinish);

          function unpipe() {
            debug('unpipe');
            src.unpipe(dest);
          } // tell the dest that it's being piped to


          dest.emit('pipe', src); // start the flow if it hasn't been started already.

          if (!state.flowing) {
            debug('pipe resume');
            src.resume();
          }

          return dest;
        };

        function pipeOnDrain(src) {
          return function () {
            var state = src._readableState;
            debug('pipeOnDrain', state.awaitDrain);
            if (state.awaitDrain) state.awaitDrain--;

            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
              state.flowing = true;
              flow(src);
            }
          };
        }

        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState; // if we're not piping anywhere, then do nothing.

          if (state.pipesCount === 0) return this; // just one destination.  most common case.

          if (state.pipesCount === 1) {
            // passed in one, but it's not the right one.
            if (dest && dest !== state.pipes) return this;
            if (!dest) dest = state.pipes; // got a match.

            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest) dest.emit('unpipe', this);
            return this;
          } // slow case. multiple pipe destinations.


          if (!dest) {
            // remove all.
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;

            for (var i = 0; i < len; i++) {
              dests[i].emit('unpipe', this);
            }

            return this;
          } // try to find the right one.


          var index = indexOf(state.pipes, dest);
          if (index === -1) return this;
          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1) state.pipes = state.pipes[0];
          dest.emit('unpipe', this);
          return this;
        }; // set up data events if they are asked for
        // Ensure readable listeners eventually get something


        Readable.prototype.on = function (ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);

          if (ev === 'data') {
            // Start flowing on next tick if stream isn't explicitly paused
            if (this._readableState.flowing !== false) this.resume();
          } else if (ev === 'readable') {
            var state = this._readableState;

            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.emittedReadable = false;

              if (!state.reading) {
                processNextTick(nReadingNextTick, this);
              } else if (state.length) {
                emitReadable(this, state);
              }
            }
          }

          return res;
        };

        Readable.prototype.addListener = Readable.prototype.on;

        function nReadingNextTick(self) {
          debug('readable nexttick read 0');
          self.read(0);
        } // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.


        Readable.prototype.resume = function () {
          var state = this._readableState;

          if (!state.flowing) {
            debug('resume');
            state.flowing = true;
            resume(this, state);
          }

          return this;
        };

        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            processNextTick(resume_, stream, state);
          }
        }

        function resume_(stream, state) {
          if (!state.reading) {
            debug('resume read 0');
            stream.read(0);
          }

          state.resumeScheduled = false;
          state.awaitDrain = 0;
          stream.emit('resume');
          flow(stream);
          if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
          debug('call pause flowing=%j', this._readableState.flowing);

          if (false !== this._readableState.flowing) {
            debug('pause');
            this._readableState.flowing = false;
            this.emit('pause');
          }

          return this;
        };

        function flow(stream) {
          var state = stream._readableState;
          debug('flow', state.flowing);

          while (state.flowing && stream.read() !== null) {}
        } // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.


        Readable.prototype.wrap = function (stream) {
          var state = this._readableState;
          var paused = false;
          var self = this;
          stream.on('end', function () {
            debug('wrapped end');

            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) self.push(chunk);
            }

            self.push(null);
          });
          stream.on('data', function (chunk) {
            debug('wrapped data');
            if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

            if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
            var ret = self.push(chunk);

            if (!ret) {
              paused = true;
              stream.pause();
            }
          }); // proxy all the other methods.
          // important when wrapping filters and duplexes.

          for (var i in stream) {
            if (this[i] === undefined && typeof stream[i] === 'function') {
              this[i] = function (method) {
                return function () {
                  return stream[method].apply(stream, arguments);
                };
              }(i);
            }
          } // proxy certain important events.


          var events = ['error', 'close', 'destroy', 'pause', 'resume'];
          forEach(events, function (ev) {
            stream.on(ev, self.emit.bind(self, ev));
          }); // when we try to consume some more bytes, simply unpause the
          // underlying stream.

          self._read = function (n) {
            debug('wrapped _read', n);

            if (paused) {
              paused = false;
              stream.resume();
            }
          };

          return self;
        }; // exposed for testing purposes only.


        Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.

        function fromList(n, state) {
          // nothing buffered
          if (state.length === 0) return null;
          var ret;
          if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
            // read it all, truncate the list
            if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            // read part of list
            ret = fromListPartial(n, state.buffer, state.decoder);
          }
          return ret;
        } // Extracts only enough buffered data to satisfy the amount requested.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function fromListPartial(n, list, hasStrings) {
          var ret;

          if (n < list.head.data.length) {
            // slice is the same for buffers and strings
            ret = list.head.data.slice(0, n);
            list.head.data = list.head.data.slice(n);
          } else if (n === list.head.data.length) {
            // first chunk is a perfect match
            ret = list.shift();
          } else {
            // result spans more than one buffer
            ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
          }

          return ret;
        } // Copies a specified amount of characters from the list of buffered data
        // chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function copyFromBufferString(n, list) {
          var p = list.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;

          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;

            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) list.head = p.next;else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = str.slice(nb);
              }

              break;
            }

            ++c;
          }

          list.length -= c;
          return ret;
        } // Copies a specified amount of bytes from the list of buffered data chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function copyFromBuffer(n, list) {
          var ret = bufferShim.allocUnsafe(n);
          var p = list.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;

          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;

            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) list.head = p.next;else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = buf.slice(nb);
              }

              break;
            }

            ++c;
          }

          list.length -= c;
          return ret;
        }

        function endReadable(stream) {
          var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
          // bug in node.  Should never happen.

          if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

          if (!state.endEmitted) {
            state.ended = true;
            processNextTick(endReadableNT, state, stream);
          }
        }

        function endReadableNT(state, stream) {
          // Check that we didn't get one last unshift.
          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');
          }
        }

        function forEach(xs, f) {
          for (var i = 0, l = xs.length; i < l; i++) {
            f(xs[i], i);
          }
        }

        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) return i;
          }

          return -1;
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(6));
      /***/
    },
    /* 15 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        'use strict';

        if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
          module.exports = nextTick;
        } else {
          module.exports = process.nextTick;
        }

        function nextTick(fn, arg1, arg2, arg3) {
          if (typeof fn !== 'function') {
            throw new TypeError('"callback" argument must be a function');
          }

          var len = arguments.length;
          var args, i;

          switch (len) {
            case 0:
            case 1:
              return process.nextTick(fn);

            case 2:
              return process.nextTick(function afterTickOne() {
                fn.call(null, arg1);
              });

            case 3:
              return process.nextTick(function afterTickTwo() {
                fn.call(null, arg1, arg2);
              });

            case 4:
              return process.nextTick(function afterTickThree() {
                fn.call(null, arg1, arg2, arg3);
              });

            default:
              args = new Array(len - 1);
              i = 0;

              while (i < args.length) {
                args[i++] = arguments[i];
              }

              return process.nextTick(function afterTick() {
                fn.apply(null, args);
              });
          }
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(6));
      /***/
    },
    /* 16 */

    /***/
    function (module, exports) {
      var toString = {}.toString;

      module.exports = Array.isArray || function (arr) {
        return toString.call(arr) == '[object Array]';
      };
      /***/

    },
    /* 17 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (global) {
        'use strict';

        var buffer = __webpack_require__(2);

        var Buffer = buffer.Buffer;
        var SlowBuffer = buffer.SlowBuffer;
        var MAX_LEN = buffer.kMaxLength || 2147483647;

        exports.alloc = function alloc(size, fill, encoding) {
          if (typeof Buffer.alloc === 'function') {
            return Buffer.alloc(size, fill, encoding);
          }

          if (typeof encoding === 'number') {
            throw new TypeError('encoding must not be number');
          }

          if (typeof size !== 'number') {
            throw new TypeError('size must be a number');
          }

          if (size > MAX_LEN) {
            throw new RangeError('size is too large');
          }

          var enc = encoding;
          var _fill = fill;

          if (_fill === undefined) {
            enc = undefined;
            _fill = 0;
          }

          var buf = new Buffer(size);

          if (typeof _fill === 'string') {
            var fillBuf = new Buffer(_fill, enc);
            var flen = fillBuf.length;
            var i = -1;

            while (++i < size) {
              buf[i] = fillBuf[i % flen];
            }
          } else {
            buf.fill(_fill);
          }

          return buf;
        };

        exports.allocUnsafe = function allocUnsafe(size) {
          if (typeof Buffer.allocUnsafe === 'function') {
            return Buffer.allocUnsafe(size);
          }

          if (typeof size !== 'number') {
            throw new TypeError('size must be a number');
          }

          if (size > MAX_LEN) {
            throw new RangeError('size is too large');
          }

          return new Buffer(size);
        };

        exports.from = function from(value, encodingOrOffset, length) {
          if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
            return Buffer.from(value, encodingOrOffset, length);
          }

          if (typeof value === 'number') {
            throw new TypeError('"value" argument must not be a number');
          }

          if (typeof value === 'string') {
            return new Buffer(value, encodingOrOffset);
          }

          if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
            var offset = encodingOrOffset;

            if (arguments.length === 1) {
              return new Buffer(value);
            }

            if (typeof offset === 'undefined') {
              offset = 0;
            }

            var len = length;

            if (typeof len === 'undefined') {
              len = value.byteLength - offset;
            }

            if (offset >= value.byteLength) {
              throw new RangeError('\'offset\' is out of bounds');
            }

            if (len > value.byteLength - offset) {
              throw new RangeError('\'length\' is out of bounds');
            }

            return new Buffer(value.slice(offset, offset + len));
          }

          if (Buffer.isBuffer(value)) {
            var out = new Buffer(value.length);
            value.copy(out, 0, 0, value.length);
            return out;
          }

          if (value) {
            if (Array.isArray(value) || typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer || 'length' in value) {
              return new Buffer(value);
            }

            if (value.type === 'Buffer' && Array.isArray(value.data)) {
              return new Buffer(value.data);
            }
          }

          throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
        };

        exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
          if (typeof Buffer.allocUnsafeSlow === 'function') {
            return Buffer.allocUnsafeSlow(size);
          }

          if (typeof size !== 'number') {
            throw new TypeError('size must be a number');
          }

          if (size >= MAX_LEN) {
            throw new RangeError('size is too large');
          }

          return new SlowBuffer(size);
        };
        /* WEBPACK VAR INJECTION */

      }).call(exports, function () {
        return this;
      }());
      /***/
    },
    /* 18 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.
        function isArray(arg) {
          if (Array.isArray) {
            return Array.isArray(arg);
          }

          return objectToString(arg) === '[object Array]';
        }

        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }

        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }

        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }

        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === 'number';
        }

        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === 'string';
        }

        exports.isString = isString;

        function isSymbol(arg) {
          return typeof arg === 'symbol';
        }

        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }

        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return objectToString(re) === '[object RegExp]';
        }

        exports.isRegExp = isRegExp;

        function isObject(arg) {
          return typeof arg === 'object' && arg !== null;
        }

        exports.isObject = isObject;

        function isDate(d) {
          return objectToString(d) === '[object Date]';
        }

        exports.isDate = isDate;

        function isError(e) {
          return objectToString(e) === '[object Error]' || e instanceof Error;
        }

        exports.isError = isError;

        function isFunction(arg) {
          return typeof arg === 'function';
        }

        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
          typeof arg === 'undefined';
        }

        exports.isPrimitive = isPrimitive;
        exports.isBuffer = Buffer.isBuffer;

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(1));
      /***/
    },
    /* 19 */

    /***/
    function (module, exports) {
      /* (ignored) */

      /***/
    },
    /* 20 */

    /***/
    function (module, exports, __webpack_require__) {
      'use strict';

      var Buffer = __webpack_require__(2).Buffer;
      /*<replacement>*/


      var bufferShim = __webpack_require__(17);
      /*</replacement>*/


      module.exports = BufferList;

      function BufferList() {
        this.head = null;
        this.tail = null;
        this.length = 0;
      }

      BufferList.prototype.push = function (v) {
        var entry = {
          data: v,
          next: null
        };
        if (this.length > 0) this.tail.next = entry;else this.head = entry;
        this.tail = entry;
        ++this.length;
      };

      BufferList.prototype.unshift = function (v) {
        var entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      };

      BufferList.prototype.shift = function () {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
        --this.length;
        return ret;
      };

      BufferList.prototype.clear = function () {
        this.head = this.tail = null;
        this.length = 0;
      };

      BufferList.prototype.join = function (s) {
        if (this.length === 0) return '';
        var p = this.head;
        var ret = '' + p.data;

        while (p = p.next) {
          ret += s + p.data;
        }

        return ret;
      };

      BufferList.prototype.concat = function (n) {
        if (this.length === 0) return bufferShim.alloc(0);
        if (this.length === 1) return this.head.data;
        var ret = bufferShim.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;

        while (p) {
          p.data.copy(ret, i);
          i += p.data.length;
          p = p.next;
        }

        return ret;
      };
      /***/

    },
    /* 21 */

    /***/
    function (module, exports, __webpack_require__) {
      // a duplex stream is just a stream that is both readable and writable.
      // Since JS doesn't have multiple prototypal inheritance, this class
      // prototypally inherits from Readable, and then parasitically from
      // Writable.
      'use strict';
      /*<replacement>*/

      var objectKeys = Object.keys || function (obj) {
        var keys = [];

        for (var key in obj) {
          keys.push(key);
        }

        return keys;
      };
      /*</replacement>*/


      module.exports = Duplex;
      /*<replacement>*/

      var processNextTick = __webpack_require__(15);
      /*</replacement>*/

      /*<replacement>*/


      var util = __webpack_require__(18);

      util.inherits = __webpack_require__(12);
      /*</replacement>*/

      var Readable = __webpack_require__(14);

      var Writable = __webpack_require__(22);

      util.inherits(Duplex, Readable);
      var keys = objectKeys(Writable.prototype);

      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }

      function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);
        Readable.call(this, options);
        Writable.call(this, options);
        if (options && options.readable === false) this.readable = false;
        if (options && options.writable === false) this.writable = false;
        this.allowHalfOpen = true;
        if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
        this.once('end', onend);
      } // the no-half-open enforcer


      function onend() {
        // if we allow half-open state, or if the writable side ended,
        // then we're ok.
        if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
        // But allow more writes to happen in this tick.

        processNextTick(onEndNT, this);
      }

      function onEndNT(self) {
        self.end();
      }

      function forEach(xs, f) {
        for (var i = 0, l = xs.length; i < l; i++) {
          f(xs[i], i);
        }
      }
      /***/

    },
    /* 22 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.
        'use strict';

        module.exports = Writable;
        /*<replacement>*/

        var processNextTick = __webpack_require__(15);
        /*</replacement>*/

        /*<replacement>*/


        var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
        /*</replacement>*/

        /*<replacement>*/

        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;
        /*<replacement>*/

        var util = __webpack_require__(18);

        util.inherits = __webpack_require__(12);
        /*</replacement>*/

        /*<replacement>*/

        var internalUtil = {
          deprecate: __webpack_require__(23)
        };
        /*</replacement>*/

        /*<replacement>*/

        var Stream;

        (function () {
          try {
            Stream = __webpack_require__(11);
          } catch (_) {} finally {
            if (!Stream) Stream = __webpack_require__(8).EventEmitter;
          }
        })();
        /*</replacement>*/


        var Buffer = __webpack_require__(2).Buffer;
        /*<replacement>*/


        var bufferShim = __webpack_require__(17);
        /*</replacement>*/


        util.inherits(Writable, Stream);

        function nop() {}

        function WriteReq(chunk, encoding, cb) {
          this.chunk = chunk;
          this.encoding = encoding;
          this.callback = cb;
          this.next = null;
        }

        function WritableState(options, stream) {
          Duplex = Duplex || __webpack_require__(21);
          options = options || {}; // object stream flag to indicate whether or not this stream
          // contains buffers or objects.

          this.objectMode = !!options.objectMode;
          if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
          // Note: 0 is a valid value, means that we always return false if
          // the entire buffer is not flushed immediately on write()

          var hwm = options.highWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;
          this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

          this.highWaterMark = ~~this.highWaterMark; // drain event flag.

          this.needDrain = false; // at the start of calling end()

          this.ending = false; // when end() has been called, and returned

          this.ended = false; // when 'finish' is emitted

          this.finished = false; // should we decode strings into buffers before passing to _write?
          // this is here so that some node-core streams can optimize string
          // handling at a lower level.

          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
          // of how much we're waiting to get pushed to some underlying
          // socket or file.

          this.length = 0; // a flag to see when we're in the middle of a write.

          this.writing = false; // when true all writes will be buffered until .uncork() call

          this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.

          this.sync = true; // a flag to know if we're processing previously buffered items, which
          // may call the _write() callback in the same tick, so that we don't
          // end up in an overlapped onwrite situation.

          this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

          this.onwrite = function (er) {
            onwrite(stream, er);
          }; // the callback that the user supplies to write(chunk,encoding,cb)


          this.writecb = null; // the amount that is being written when _write is called.

          this.writelen = 0;
          this.bufferedRequest = null;
          this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
          // this must be 0 before 'finish' can be emitted

          this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
          // This is relevant for synchronous Transform streams

          this.prefinished = false; // True if the error was already emitted and should not be thrown again

          this.errorEmitted = false; // count buffered requests

          this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
          // one allocated and free to use, and we maintain at most two

          this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];

          while (current) {
            out.push(current);
            current = current.next;
          }

          return out;
        };

        (function () {
          try {
            Object.defineProperty(WritableState.prototype, 'buffer', {
              get: internalUtil.deprecate(function () {
                return this.getBuffer();
              }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
            });
          } catch (_) {}
        })(); // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.


        var realHasInstance;

        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function (object) {
              if (realHasInstance.call(this, object)) return true;
              return object && object._writableState instanceof WritableState;
            }
          });
        } else {
          realHasInstance = function (object) {
            return object instanceof this;
          };
        }

        function Writable(options) {
          Duplex = Duplex || __webpack_require__(21); // Writable ctor is applied to Duplexes, too.
          // `realHasInstance` is necessary because using plain `instanceof`
          // would return false, as no `_writableState` property is attached.
          // Trying to use the custom `instanceof` for Writable here will also break the
          // Node.js LazyTransform implementation, which has a non-trivial getter for
          // `_writableState` that would lead to infinite recursion.

          if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
            return new Writable(options);
          }

          this._writableState = new WritableState(options, this); // legacy.

          this.writable = true;

          if (options) {
            if (typeof options.write === 'function') this._write = options.write;
            if (typeof options.writev === 'function') this._writev = options.writev;
          }

          Stream.call(this);
        } // Otherwise people can pipe Writable streams, which is just wrong.


        Writable.prototype.pipe = function () {
          this.emit('error', new Error('Cannot pipe, not readable'));
        };

        function writeAfterEnd(stream, cb) {
          var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

          stream.emit('error', er);
          processNextTick(cb, er);
        } // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.


        function validChunk(stream, state, chunk, cb) {
          var valid = true;
          var er = false;

          if (chunk === null) {
            er = new TypeError('May not write null values to stream');
          } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new TypeError('Invalid non-string/buffer chunk');
          }

          if (er) {
            stream.emit('error', er);
            processNextTick(cb, er);
            valid = false;
          }

          return valid;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;
          var isBuf = Buffer.isBuffer(chunk);

          if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
          if (typeof cb !== 'function') cb = nop;
          if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }
          return ret;
        };

        Writable.prototype.cork = function () {
          var state = this._writableState;
          state.corked++;
        };

        Writable.prototype.uncork = function () {
          var state = this._writableState;

          if (state.corked) {
            state.corked--;
            if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
          }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          // node::ParseEncoding() requires lower case.
          if (typeof encoding === 'string') encoding = encoding.toLowerCase();
          if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };

        function decodeChunk(state, chunk, encoding) {
          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
            chunk = bufferShim.from(chunk, encoding);
          }

          return chunk;
        } // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.


        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            chunk = decodeChunk(state, chunk, encoding);
            if (Buffer.isBuffer(chunk)) encoding = 'buffer';
          }

          var len = state.objectMode ? 1 : chunk.length;
          state.length += len;
          var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

          if (!ret) state.needDrain = true;

          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);

            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }

            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }

          return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;
          if (sync) processNextTick(cb, er);else cb(er);
          stream._writableState.errorEmitted = true;
          stream.emit('error', er);
        }

        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }

        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;
          onwriteStateUpdate(state);
          if (er) onwriteError(stream, state, sync, er, cb);else {
            // Check if we're actually ready to finish, but don't emit yet
            var finished = needFinish(state);

            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
              clearBuffer(stream, state);
            }

            if (sync) {
              /*<replacement>*/
              asyncWrite(afterWrite, stream, state, finished, cb);
              /*</replacement>*/
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }

        function afterWrite(stream, state, finished, cb) {
          if (!finished) onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        } // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.


        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit('drain');
          }
        } // if there's something in the buffer waiting, then process it


        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;

          if (stream._writev && entry && entry.next) {
            // Fast case, write everything using _writev()
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;
            var count = 0;

            while (entry) {
              buffer[count] = entry;
              entry = entry.next;
              count += 1;
            }

            doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
            // as the hot path ends with doWrite

            state.pendingcb++;
            state.lastBufferedRequest = null;

            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }
          } else {
            // Slow case, write chunks one-by-one
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;
              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next; // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.

              if (state.writing) {
                break;
              }
            }

            if (entry === null) state.lastBufferedRequest = null;
          }

          state.bufferedRequestCount = 0;
          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
          cb(new Error('_write() is not implemented'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
          var state = this._writableState;

          if (typeof chunk === 'function') {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

          if (state.corked) {
            state.corked = 1;
            this.uncork();
          } // ignore unnecessary end() calls.


          if (!state.ending && !state.finished) endWritable(this, state, cb);
        };

        function needFinish(state) {
          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }

        function prefinish(stream, state) {
          if (!state.prefinished) {
            state.prefinished = true;
            stream.emit('prefinish');
          }
        }

        function finishMaybe(stream, state) {
          var need = needFinish(state);

          if (need) {
            if (state.pendingcb === 0) {
              prefinish(stream, state);
              state.finished = true;
              stream.emit('finish');
            } else {
              prefinish(stream, state);
            }
          }

          return need;
        }

        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);

          if (cb) {
            if (state.finished) processNextTick(cb);else stream.once('finish', cb);
          }

          state.ended = true;
          stream.writable = false;
        } // It seems a linked list but it is not
        // there will be only 2 of these for each stream


        function CorkedRequest(state) {
          var _this = this;

          this.next = null;
          this.entry = null;

          this.finish = function (err) {
            var entry = _this.entry;
            _this.entry = null;

            while (entry) {
              var cb = entry.callback;
              state.pendingcb--;
              cb(err);
              entry = entry.next;
            }

            if (state.corkedRequestsFree) {
              state.corkedRequestsFree.next = _this;
            } else {
              state.corkedRequestsFree = _this;
            }
          };
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(6));
      /***/
    },
    /* 23 */

    /***/
    function (module, exports) {
      /* WEBPACK VAR INJECTION */
      (function (global) {
        /**
         * Module exports.
         */
        module.exports = deprecate;
        /**
         * Mark that a method should not be used.
         * Returns a modified function which warns once by default.
         *
         * If `localStorage.noDeprecation = true` is set, then it is a no-op.
         *
         * If `localStorage.throwDeprecation = true` is set, then deprecated functions
         * will throw an Error when invoked.
         *
         * If `localStorage.traceDeprecation = true` is set, then deprecated functions
         * will invoke `console.trace()` instead of `console.error()`.
         *
         * @param {Function} fn - the function to deprecate
         * @param {String} msg - the string to print to the console when `fn` is invoked
         * @returns {Function} a new "deprecated" version of `fn`
         * @api public
         */

        function deprecate(fn, msg) {
          if (config('noDeprecation')) {
            return fn;
          }

          var warned = false;

          function deprecated() {
            if (!warned) {
              if (config('throwDeprecation')) {
                throw new Error(msg);
              } else if (config('traceDeprecation')) {
                console.trace(msg);
              } else {
                console.warn(msg);
              }

              warned = true;
            }

            return fn.apply(this, arguments);
          }

          return deprecated;
        }
        /**
         * Checks `localStorage` for boolean values for the given `name`.
         *
         * @param {String} name
         * @returns {Boolean}
         * @api private
         */


        function config(name) {
          // accessing global.localStorage can trigger a DOMException in sandboxed iframes
          try {
            if (!global.localStorage) return false;
          } catch (_) {
            return false;
          }

          var val = global.localStorage[name];
          if (null == val) return false;
          return String(val).toLowerCase() === 'true';
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, function () {
        return this;
      }());
      /***/
    },
    /* 24 */

    /***/
    function (module, exports, __webpack_require__) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      var Buffer = __webpack_require__(2).Buffer;

      var isBufferEncoding = Buffer.isEncoding || function (encoding) {
        switch (encoding && encoding.toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
          case 'raw':
            return true;

          default:
            return false;
        }
      };

      function assertEncoding(encoding) {
        if (encoding && !isBufferEncoding(encoding)) {
          throw new Error('Unknown encoding: ' + encoding);
        }
      } // StringDecoder provides an interface for efficiently splitting a series of
      // buffers into a series of JS strings without breaking apart multi-byte
      // characters. CESU-8 is handled as part of the UTF-8 encoding.
      //
      // @TODO Handling all encodings inside a single object makes it very difficult
      // to reason about this code, so it should be split up in the future.
      // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
      // points as used by CESU-8.


      var StringDecoder = exports.StringDecoder = function (encoding) {
        this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
        assertEncoding(encoding);

        switch (this.encoding) {
          case 'utf8':
            // CESU-8 represents each of Surrogate Pair by 3-bytes
            this.surrogateSize = 3;
            break;

          case 'ucs2':
          case 'utf16le':
            // UTF-16 represents each of Surrogate Pair by 2-bytes
            this.surrogateSize = 2;
            this.detectIncompleteChar = utf16DetectIncompleteChar;
            break;

          case 'base64':
            // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
            this.surrogateSize = 3;
            this.detectIncompleteChar = base64DetectIncompleteChar;
            break;

          default:
            this.write = passThroughWrite;
            return;
        } // Enough space to store all bytes of a single character. UTF-8 needs 4
        // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).


        this.charBuffer = new Buffer(6); // Number of bytes received for the current incomplete multi-byte character.

        this.charReceived = 0; // Number of bytes expected for the current incomplete multi-byte character.

        this.charLength = 0;
      }; // write decodes the given buffer and returns it as JS string that is
      // guaranteed to not contain any partial multi-byte characters. Any partial
      // character found at the end of the buffer is buffered up, and will be
      // returned when calling write again with the remaining bytes.
      //
      // Note: Converting a Buffer containing an orphan surrogate to a String
      // currently works, but converting a String to a Buffer (via `new Buffer`, or
      // Buffer#write) will replace incomplete surrogates with the unicode
      // replacement character. See https://codereview.chromium.org/121173009/ .


      StringDecoder.prototype.write = function (buffer) {
        var charStr = ''; // if our last write ended with an incomplete multibyte character

        while (this.charLength) {
          // determine how many remaining bytes this buffer has to offer for this char
          var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length; // add the new bytes to the char buffer

          buffer.copy(this.charBuffer, this.charReceived, 0, available);
          this.charReceived += available;

          if (this.charReceived < this.charLength) {
            // still not enough chars in this buffer? wait for more ...
            return '';
          } // remove bytes belonging to the current character from the buffer


          buffer = buffer.slice(available, buffer.length); // get the character that was split

          charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

          var charCode = charStr.charCodeAt(charStr.length - 1);

          if (charCode >= 0xD800 && charCode <= 0xDBFF) {
            this.charLength += this.surrogateSize;
            charStr = '';
            continue;
          }

          this.charReceived = this.charLength = 0; // if there are no more bytes in this buffer, just emit our char

          if (buffer.length === 0) {
            return charStr;
          }

          break;
        } // determine and set charLength / charReceived


        this.detectIncompleteChar(buffer);
        var end = buffer.length;

        if (this.charLength) {
          // buffer the incomplete character bytes we got
          buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
          end -= this.charReceived;
        }

        charStr += buffer.toString(this.encoding, 0, end);
        var end = charStr.length - 1;
        var charCode = charStr.charCodeAt(end); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          var size = this.surrogateSize;
          this.charLength += size;
          this.charReceived += size;
          this.charBuffer.copy(this.charBuffer, size, 0, size);
          buffer.copy(this.charBuffer, 0, 0, size);
          return charStr.substring(0, end);
        } // or just emit the charStr


        return charStr;
      }; // detectIncompleteChar determines if there is an incomplete UTF-8 character at
      // the end of the given buffer. If so, it sets this.charLength to the byte
      // length that character, and sets this.charReceived to the number of bytes
      // that are available for this character.


      StringDecoder.prototype.detectIncompleteChar = function (buffer) {
        // determine how many bytes we have to check at the end of this buffer
        var i = buffer.length >= 3 ? 3 : buffer.length; // Figure out if one of the last i bytes of our buffer announces an
        // incomplete char.

        for (; i > 0; i--) {
          var c = buffer[buffer.length - i]; // See http://en.wikipedia.org/wiki/UTF-8#Description
          // 110XXXXX

          if (i == 1 && c >> 5 == 0x06) {
            this.charLength = 2;
            break;
          } // 1110XXXX


          if (i <= 2 && c >> 4 == 0x0E) {
            this.charLength = 3;
            break;
          } // 11110XXX


          if (i <= 3 && c >> 3 == 0x1E) {
            this.charLength = 4;
            break;
          }
        }

        this.charReceived = i;
      };

      StringDecoder.prototype.end = function (buffer) {
        var res = '';
        if (buffer && buffer.length) res = this.write(buffer);

        if (this.charReceived) {
          var cr = this.charReceived;
          var buf = this.charBuffer;
          var enc = this.encoding;
          res += buf.slice(0, cr).toString(enc);
        }

        return res;
      };

      function passThroughWrite(buffer) {
        return buffer.toString(this.encoding);
      }

      function utf16DetectIncompleteChar(buffer) {
        this.charReceived = buffer.length % 2;
        this.charLength = this.charReceived ? 2 : 0;
      }

      function base64DetectIncompleteChar(buffer) {
        this.charReceived = buffer.length % 3;
        this.charLength = this.charReceived ? 3 : 0;
      }
      /***/

    },
    /* 25 */

    /***/
    function (module, exports, __webpack_require__) {
      // a transform stream is a readable/writable stream where you do
      // something with the data.  Sometimes it's called a "filter",
      // but that's not a great name for it, since that implies a thing where
      // some bits pass through, and others are simply ignored.  (That would
      // be a valid example of a transform, of course.)
      //
      // While the output is causally related to the input, it's not a
      // necessarily symmetric or synchronous transformation.  For example,
      // a zlib stream might take multiple plain-text writes(), and then
      // emit a single compressed chunk some time in the future.
      //
      // Here's how this works:
      //
      // The Transform stream has all the aspects of the readable and writable
      // stream classes.  When you write(chunk), that calls _write(chunk,cb)
      // internally, and returns false if there's a lot of pending writes
      // buffered up.  When you call read(), that calls _read(n) until
      // there's enough pending readable data buffered up.
      //
      // In a transform stream, the written data is placed in a buffer.  When
      // _read(n) is called, it transforms the queued up data, calling the
      // buffered _write cb's as it consumes chunks.  If consuming a single
      // written chunk would result in multiple output chunks, then the first
      // outputted bit calls the readcb, and subsequent chunks just go into
      // the read buffer, and will cause it to emit 'readable' if necessary.
      //
      // This way, back-pressure is actually determined by the reading side,
      // since _read has to be called to start processing a new chunk.  However,
      // a pathological inflate type of transform can cause excessive buffering
      // here.  For example, imagine a stream where every byte of input is
      // interpreted as an integer from 0-255, and then results in that many
      // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
      // 1kb of data being output.  In this case, you could write a very small
      // amount of input, and end up with a very large amount of output.  In
      // such a pathological inflating mechanism, there'd be no way to tell
      // the system to stop doing the transform.  A single 4MB write could
      // cause the system to run out of memory.
      //
      // However, even in such a pathological case, only a single written chunk
      // would be consumed, and then the rest would wait (un-transformed) until
      // the results of the previous transformed chunk were consumed.
      'use strict';

      module.exports = Transform;

      var Duplex = __webpack_require__(21);
      /*<replacement>*/


      var util = __webpack_require__(18);

      util.inherits = __webpack_require__(12);
      /*</replacement>*/

      util.inherits(Transform, Duplex);

      function TransformState(stream) {
        this.afterTransform = function (er, data) {
          return afterTransform(stream, er, data);
        };

        this.needTransform = false;
        this.transforming = false;
        this.writecb = null;
        this.writechunk = null;
        this.writeencoding = null;
      }

      function afterTransform(stream, er, data) {
        var ts = stream._transformState;
        ts.transforming = false;
        var cb = ts.writecb;
        if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
        ts.writechunk = null;
        ts.writecb = null;
        if (data !== null && data !== undefined) stream.push(data);
        cb(er);
        var rs = stream._readableState;
        rs.reading = false;

        if (rs.needReadable || rs.length < rs.highWaterMark) {
          stream._read(rs.highWaterMark);
        }
      }

      function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options);
        Duplex.call(this, options);
        this._transformState = new TransformState(this);
        var stream = this; // start out asking for a readable event once data is transformed.

        this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
        // that Readable wants before the first _read call, so unset the
        // sync guard flag.

        this._readableState.sync = false;

        if (options) {
          if (typeof options.transform === 'function') this._transform = options.transform;
          if (typeof options.flush === 'function') this._flush = options.flush;
        } // When the writable side finishes, then flush out anything remaining.


        this.once('prefinish', function () {
          if (typeof this._flush === 'function') this._flush(function (er, data) {
            done(stream, er, data);
          });else done(stream);
        });
      }

      Transform.prototype.push = function (chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      }; // This is the part where you do stuff!
      // override this function in implementation classes.
      // 'chunk' is an input chunk.
      //
      // Call `push(newChunk)` to pass along transformed output
      // to the readable side.  You may call 'push' zero or more times.
      //
      // Call `cb(err)` when you are done with this chunk.  If you pass
      // an error, then that'll put the hurt on the whole operation.  If you
      // never call cb(), then you'll never get another chunk.


      Transform.prototype._transform = function (chunk, encoding, cb) {
        throw new Error('_transform() is not implemented');
      };

      Transform.prototype._write = function (chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;

        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
      }; // Doesn't matter what the args are here.
      // _transform does all the work.
      // That we got here means that the readable side wants more data.


      Transform.prototype._read = function (n) {
        var ts = this._transformState;

        if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
          ts.transforming = true;

          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          // mark that we need a transform, so that any data that comes in
          // will get processed, now that we've asked for it.
          ts.needTransform = true;
        }
      };

      function done(stream, er, data) {
        if (er) return stream.emit('error', er);
        if (data !== null && data !== undefined) stream.push(data); // if there's nothing in the write buffer, then that means
        // that nothing more will ever be provided

        var ws = stream._writableState;
        var ts = stream._transformState;
        if (ws.length) throw new Error('Calling transform done when ws.length != 0');
        if (ts.transforming) throw new Error('Calling transform done when still transforming');
        return stream.push(null);
      }
      /***/

    },
    /* 26 */

    /***/
    function (module, exports, __webpack_require__) {
      // a passthrough stream.
      // basically just the most minimal sort of Transform stream.
      // Every written chunk gets output as-is.
      'use strict';

      module.exports = PassThrough;

      var Transform = __webpack_require__(25);
      /*<replacement>*/


      var util = __webpack_require__(18);

      util.inherits = __webpack_require__(12);
      /*</replacement>*/

      util.inherits(PassThrough, Transform);

      function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);
        Transform.call(this, options);
      }

      PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk);
      };
      /***/

    },
    /* 27 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(22);
      /***/
    },
    /* 28 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(21);
      /***/
    },
    /* 29 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(25);
      /***/
    },
    /* 30 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(26);
      /***/
    },
    /* 31 */

    /***/
    function (module, exports, __webpack_require__) {
      'use strict';

      var zlib_inflate = __webpack_require__(32);

      var utils = __webpack_require__(33);

      var strings = __webpack_require__(38);

      var c = __webpack_require__(39);

      var msg = __webpack_require__(40);

      var ZStream = __webpack_require__(41);

      var GZheader = __webpack_require__(42);

      var toString = Object.prototype.toString;
      /**
       * class Inflate
       *
       * Generic JS-style wrapper for zlib calls. If you don't need
       * streaming behaviour - use more simple functions: [[inflate]]
       * and [[inflateRaw]].
       **/

      /* internal
       * inflate.chunks -> Array
       *
       * Chunks of output data, if [[Inflate#onData]] not overriden.
       **/

      /**
       * Inflate.result -> Uint8Array|Array|String
       *
       * Uncompressed result, generated by default [[Inflate#onData]]
       * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
       * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
       * push a chunk with explicit flush (call [[Inflate#push]] with
       * `Z_SYNC_FLUSH` param).
       **/

      /**
       * Inflate.err -> Number
       *
       * Error code after inflate finished. 0 (Z_OK) on success.
       * Should be checked if broken data possible.
       **/

      /**
       * Inflate.msg -> String
       *
       * Error message, if [[Inflate.err]] != 0
       **/

      /**
       * new Inflate(options)
       * - options (Object): zlib inflate options.
       *
       * Creates new inflator instance with specified params. Throws exception
       * on bad params. Supported options:
       *
       * - `windowBits`
       * - `dictionary`
       *
       * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
       * for more information on these.
       *
       * Additional options, for internal needs:
       *
       * - `chunkSize` - size of generated data chunks (16K by default)
       * - `raw` (Boolean) - do raw inflate
       * - `to` (String) - if equal to 'string', then result will be converted
       *   from utf8 to utf16 (javascript) string. When string output requested,
       *   chunk length can differ from `chunkSize`, depending on content.
       *
       * By default, when no options set, autodetect deflate/gzip data format via
       * wrapper header.
       *
       * ##### Example:
       *
       * ```javascript
       * var pako = require('pako')
       *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
       *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
       *
       * var inflate = new pako.Inflate({ level: 3});
       *
       * inflate.push(chunk1, false);
       * inflate.push(chunk2, true);  // true -> last chunk
       *
       * if (inflate.err) { throw new Error(inflate.err); }
       *
       * console.log(inflate.result);
       * ```
       **/

      function Inflate(options) {
        if (!(this instanceof Inflate)) return new Inflate(options);
        this.options = utils.assign({
          chunkSize: 16384,
          windowBits: 0,
          to: ''
        }, options || {});
        var opt = this.options; // Force window size for `raw` data, if not set directly,
        // because we have no header for autodetect.

        if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
          opt.windowBits = -opt.windowBits;

          if (opt.windowBits === 0) {
            opt.windowBits = -15;
          }
        } // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate


        if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
          opt.windowBits += 32;
        } // Gzip header has no info about windows size, we can do autodetect only
        // for deflate. So, if window size not set, force it to max when gzip possible


        if (opt.windowBits > 15 && opt.windowBits < 48) {
          // bit 3 (16) -> gzipped data
          // bit 4 (32) -> autodetect gzip/deflate
          if ((opt.windowBits & 15) === 0) {
            opt.windowBits |= 15;
          }
        }

        this.err = 0; // error code, if happens (0 = Z_OK)

        this.msg = ''; // error message

        this.ended = false; // used to avoid multiple onEnd() calls

        this.chunks = []; // chunks of compressed data

        this.strm = new ZStream();
        this.strm.avail_out = 0;
        var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);

        if (status !== c.Z_OK) {
          throw new Error(msg[status]);
        }

        this.header = new GZheader();
        zlib_inflate.inflateGetHeader(this.strm, this.header);
      }
      /**
       * Inflate#push(data[, mode]) -> Boolean
       * - data (Uint8Array|Array|ArrayBuffer|String): input data
       * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
       *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
       *
       * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
       * new output chunks. Returns `true` on success. The last data block must have
       * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
       * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
       * can use mode Z_SYNC_FLUSH, keeping the decompression context.
       *
       * On fail call [[Inflate#onEnd]] with error code and return false.
       *
       * We strongly recommend to use `Uint8Array` on input for best speed (output
       * format is detected automatically). Also, don't skip last param and always
       * use the same type in your code (boolean or number). That will improve JS speed.
       *
       * For regular `Array`-s make sure all elements are [0..255].
       *
       * ##### Example
       *
       * ```javascript
       * push(chunk, false); // push one of data chunks
       * ...
       * push(chunk, true);  // push last chunk
       * ```
       **/


      Inflate.prototype.push = function (data, mode) {
        var strm = this.strm;
        var chunkSize = this.options.chunkSize;
        var dictionary = this.options.dictionary;

        var status, _mode;

        var next_out_utf8, tail, utf8str;
        var dict; // Flag to properly process Z_BUF_ERROR on testing inflate call
        // when we check that all output data was flushed.

        var allowBufError = false;

        if (this.ended) {
          return false;
        }

        _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH; // Convert data if needed

        if (typeof data === 'string') {
          // Only binary strings can be decompressed on practice
          strm.input = strings.binstring2buf(data);
        } else if (toString.call(data) === '[object ArrayBuffer]') {
          strm.input = new Uint8Array(data);
        } else {
          strm.input = data;
        }

        strm.next_in = 0;
        strm.avail_in = strm.input.length;

        do {
          if (strm.avail_out === 0) {
            strm.output = new utils.Buf8(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
          }

          status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);
          /* no bad return value */

          if (status === c.Z_NEED_DICT && dictionary) {
            // Convert data if needed
            if (typeof dictionary === 'string') {
              dict = strings.string2buf(dictionary);
            } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
              dict = new Uint8Array(dictionary);
            } else {
              dict = dictionary;
            }

            status = zlib_inflate.inflateSetDictionary(this.strm, dict);
          }

          if (status === c.Z_BUF_ERROR && allowBufError === true) {
            status = c.Z_OK;
            allowBufError = false;
          }

          if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
            this.onEnd(status);
            this.ended = true;
            return false;
          }

          if (strm.next_out) {
            if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH)) {
              if (this.options.to === 'string') {
                next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                tail = strm.next_out - next_out_utf8;
                utf8str = strings.buf2string(strm.output, next_out_utf8); // move tail

                strm.next_out = tail;
                strm.avail_out = chunkSize - tail;

                if (tail) {
                  utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
                }

                this.onData(utf8str);
              } else {
                this.onData(utils.shrinkBuf(strm.output, strm.next_out));
              }
            }
          } // When no more input data, we should check that internal inflate buffers
          // are flushed. The only way to do it when avail_out = 0 - run one more
          // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
          // Here we set flag to process this error properly.
          //
          // NOTE. Deflate does not return error in this case and does not needs such
          // logic.


          if (strm.avail_in === 0 && strm.avail_out === 0) {
            allowBufError = true;
          }
        } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

        if (status === c.Z_STREAM_END) {
          _mode = c.Z_FINISH;
        } // Finalize on the last chunk.


        if (_mode === c.Z_FINISH) {
          status = zlib_inflate.inflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return status === c.Z_OK;
        } // callback interim results if Z_SYNC_FLUSH.


        if (_mode === c.Z_SYNC_FLUSH) {
          this.onEnd(c.Z_OK);
          strm.avail_out = 0;
          return true;
        }

        return true;
      };
      /**
       * Inflate#onData(chunk) -> Void
       * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
       *   on js engine support. When string output requested, each chunk
       *   will be string.
       *
       * By default, stores data blocks in `chunks[]` property and glue
       * those in `onEnd`. Override this handler, if you need another behaviour.
       **/


      Inflate.prototype.onData = function (chunk) {
        this.chunks.push(chunk);
      };
      /**
       * Inflate#onEnd(status) -> Void
       * - status (Number): inflate status. 0 (Z_OK) on success,
       *   other if not.
       *
       * Called either after you tell inflate that the input stream is
       * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
       * or if an error happened. By default - join collected chunks,
       * free memory and fill `results` / `err` properties.
       **/


      Inflate.prototype.onEnd = function (status) {
        // On success - join
        if (status === c.Z_OK) {
          if (this.options.to === 'string') {
            // Glue & convert here, until we teach pako to send
            // utf8 alligned strings to onData
            this.result = this.chunks.join('');
          } else {
            this.result = utils.flattenChunks(this.chunks);
          }
        }

        this.chunks = [];
        this.err = status;
        this.msg = this.strm.msg;
      };
      /**
       * inflate(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to decompress.
       * - options (Object): zlib inflate options.
       *
       * Decompress `data` with inflate/ungzip and `options`. Autodetect
       * format via wrapper header by default. That's why we don't provide
       * separate `ungzip` method.
       *
       * Supported options are:
       *
       * - windowBits
       *
       * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
       * for more information.
       *
       * Sugar (options):
       *
       * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
       *   negative windowBits implicitly.
       * - `to` (String) - if equal to 'string', then result will be converted
       *   from utf8 to utf16 (javascript) string. When string output requested,
       *   chunk length can differ from `chunkSize`, depending on content.
       *
       *
       * ##### Example:
       *
       * ```javascript
       * var pako = require('pako')
       *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
       *   , output;
       *
       * try {
       *   output = pako.inflate(input);
       * } catch (err)
       *   console.log(err);
       * }
       * ```
       **/


      function inflate(input, options) {
        var inflator = new Inflate(options);
        inflator.push(input, true); // That will never happens, if you don't cheat with options :)

        if (inflator.err) {
          throw inflator.msg || msg[inflator.err];
        }

        return inflator.result;
      }
      /**
       * inflateRaw(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to decompress.
       * - options (Object): zlib inflate options.
       *
       * The same as [[inflate]], but creates raw data, without wrapper
       * (header and adler32 crc).
       **/


      function inflateRaw(input, options) {
        options = options || {};
        options.raw = true;
        return inflate(input, options);
      }
      /**
       * ungzip(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to decompress.
       * - options (Object): zlib inflate options.
       *
       * Just shortcut to [[inflate]], because it autodetects format
       * by header.content. Done for convenience.
       **/


      exports.Inflate = Inflate;
      exports.inflate = inflate;
      exports.inflateRaw = inflateRaw;
      exports.ungzip = inflate;
      /***/
    },
    /* 32 */

    /***/
    function (module, exports, __webpack_require__) {
      'use strict';

      var utils = __webpack_require__(33);

      var adler32 = __webpack_require__(34);

      var crc32 = __webpack_require__(35);

      var inflate_fast = __webpack_require__(36);

      var inflate_table = __webpack_require__(37);

      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      /* Public constants ==========================================================*/

      /* ===========================================================================*/

      /* Allowed flush values; see deflate() and inflate() below for details */
      //var Z_NO_FLUSH      = 0;
      //var Z_PARTIAL_FLUSH = 1;
      //var Z_SYNC_FLUSH    = 2;
      //var Z_FULL_FLUSH    = 3;

      var Z_FINISH = 4;
      var Z_BLOCK = 5;
      var Z_TREES = 6;
      /* Return codes for the compression/decompression functions. Negative values
       * are errors, positive values are used for special but normal events.
       */

      var Z_OK = 0;
      var Z_STREAM_END = 1;
      var Z_NEED_DICT = 2; //var Z_ERRNO         = -1;

      var Z_STREAM_ERROR = -2;
      var Z_DATA_ERROR = -3;
      var Z_MEM_ERROR = -4;
      var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

      /* The deflate compression method */

      var Z_DEFLATED = 8;
      /* STATES ====================================================================*/

      /* ===========================================================================*/

      var HEAD = 1;
      /* i: waiting for magic header */

      var FLAGS = 2;
      /* i: waiting for method and flags (gzip) */

      var TIME = 3;
      /* i: waiting for modification time (gzip) */

      var OS = 4;
      /* i: waiting for extra flags and operating system (gzip) */

      var EXLEN = 5;
      /* i: waiting for extra length (gzip) */

      var EXTRA = 6;
      /* i: waiting for extra bytes (gzip) */

      var NAME = 7;
      /* i: waiting for end of file name (gzip) */

      var COMMENT = 8;
      /* i: waiting for end of comment (gzip) */

      var HCRC = 9;
      /* i: waiting for header crc (gzip) */

      var DICTID = 10;
      /* i: waiting for dictionary check value */

      var DICT = 11;
      /* waiting for inflateSetDictionary() call */

      var TYPE = 12;
      /* i: waiting for type bits, including last-flag bit */

      var TYPEDO = 13;
      /* i: same, but skip check to exit inflate on new block */

      var STORED = 14;
      /* i: waiting for stored size (length and complement) */

      var COPY_ = 15;
      /* i/o: same as COPY below, but only first time in */

      var COPY = 16;
      /* i/o: waiting for input or output to copy stored block */

      var TABLE = 17;
      /* i: waiting for dynamic block table lengths */

      var LENLENS = 18;
      /* i: waiting for code length code lengths */

      var CODELENS = 19;
      /* i: waiting for length/lit and distance code lengths */

      var LEN_ = 20;
      /* i: same as LEN below, but only first time in */

      var LEN = 21;
      /* i: waiting for length/lit/eob code */

      var LENEXT = 22;
      /* i: waiting for length extra bits */

      var DIST = 23;
      /* i: waiting for distance code */

      var DISTEXT = 24;
      /* i: waiting for distance extra bits */

      var MATCH = 25;
      /* o: waiting for output space to copy string */

      var LIT = 26;
      /* o: waiting for output space to write literal */

      var CHECK = 27;
      /* i: waiting for 32-bit check value */

      var LENGTH = 28;
      /* i: waiting for 32-bit length (gzip) */

      var DONE = 29;
      /* finished check, done -- remain here until reset */

      var BAD = 30;
      /* got a data error -- remain here until reset */

      var MEM = 31;
      /* got an inflate() memory error -- remain here until reset */

      var SYNC = 32;
      /* looking for synchronization bytes to restart inflate() */

      /* ===========================================================================*/

      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592; //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

      var MAX_WBITS = 15;
      /* 32K LZ77 window */

      var DEF_WBITS = MAX_WBITS;

      function zswap32(q) {
        return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
      }

      function InflateState() {
        this.mode = 0;
        /* current inflate mode */

        this.last = false;
        /* true if processing last block */

        this.wrap = 0;
        /* bit 0 true for zlib, bit 1 true for gzip */

        this.havedict = false;
        /* true if dictionary provided */

        this.flags = 0;
        /* gzip header method and flags (0 if zlib) */

        this.dmax = 0;
        /* zlib header max distance (INFLATE_STRICT) */

        this.check = 0;
        /* protected copy of check value */

        this.total = 0;
        /* protected copy of output count */
        // TODO: may be {}

        this.head = null;
        /* where to save gzip header information */

        /* sliding window */

        this.wbits = 0;
        /* log base 2 of requested window size */

        this.wsize = 0;
        /* window size or zero if not using window */

        this.whave = 0;
        /* valid bytes in the window */

        this.wnext = 0;
        /* window write index */

        this.window = null;
        /* allocated sliding window, if needed */

        /* bit accumulator */

        this.hold = 0;
        /* input bit accumulator */

        this.bits = 0;
        /* number of bits in "in" */

        /* for string and stored block copying */

        this.length = 0;
        /* literal or length of data to copy */

        this.offset = 0;
        /* distance back to copy string from */

        /* for table and code decoding */

        this.extra = 0;
        /* extra bits needed */

        /* fixed and dynamic code tables */

        this.lencode = null;
        /* starting table for length/literal codes */

        this.distcode = null;
        /* starting table for distance codes */

        this.lenbits = 0;
        /* index bits for lencode */

        this.distbits = 0;
        /* index bits for distcode */

        /* dynamic table building */

        this.ncode = 0;
        /* number of code length code lengths */

        this.nlen = 0;
        /* number of length code lengths */

        this.ndist = 0;
        /* number of distance code lengths */

        this.have = 0;
        /* number of code lengths in lens[] */

        this.next = null;
        /* next available space in codes[] */

        this.lens = new utils.Buf16(320);
        /* temporary storage for code lengths */

        this.work = new utils.Buf16(288);
        /* work area for code table building */

        /*
         because we don't have pointers in js, we use lencode and distcode directly
         as buffers so we don't need codes
        */
        //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */

        this.lendyn = null;
        /* dynamic table for length/literal codes (JS specific) */

        this.distdyn = null;
        /* dynamic table for distance codes (JS specific) */

        this.sane = 0;
        /* if false, allow invalid distance too far */

        this.back = 0;
        /* bits back of last unprocessed length/lit */

        this.was = 0;
        /* initial length of match */
      }

      function inflateResetKeep(strm) {
        var state;

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        strm.total_in = strm.total_out = state.total = 0;
        strm.msg = '';
        /*Z_NULL*/

        if (state.wrap) {
          /* to support ill-conceived Java test suite */
          strm.adler = state.wrap & 1;
        }

        state.mode = HEAD;
        state.last = 0;
        state.havedict = 0;
        state.dmax = 32768;
        state.head = null
        /*Z_NULL*/
        ;
        state.hold = 0;
        state.bits = 0; //state.lencode = state.distcode = state.next = state.codes;

        state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
        state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
        state.sane = 1;
        state.back = -1; //Tracev((stderr, "inflate: reset\n"));

        return Z_OK;
      }

      function inflateReset(strm) {
        var state;

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        state.wsize = 0;
        state.whave = 0;
        state.wnext = 0;
        return inflateResetKeep(strm);
      }

      function inflateReset2(strm, windowBits) {
        var wrap;
        var state;
        /* get the state */

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        /* extract wrap request from windowBits parameter */

        if (windowBits < 0) {
          wrap = 0;
          windowBits = -windowBits;
        } else {
          wrap = (windowBits >> 4) + 1;

          if (windowBits < 48) {
            windowBits &= 15;
          }
        }
        /* set number of window bits, free window if different */


        if (windowBits && (windowBits < 8 || windowBits > 15)) {
          return Z_STREAM_ERROR;
        }

        if (state.window !== null && state.wbits !== windowBits) {
          state.window = null;
        }
        /* update state and reset the rest of it */


        state.wrap = wrap;
        state.wbits = windowBits;
        return inflateReset(strm);
      }

      function inflateInit2(strm, windowBits) {
        var ret;
        var state;

        if (!strm) {
          return Z_STREAM_ERROR;
        } //strm.msg = Z_NULL;                 /* in case we return an error */


        state = new InflateState(); //if (state === Z_NULL) return Z_MEM_ERROR;
        //Tracev((stderr, "inflate: allocated\n"));

        strm.state = state;
        state.window = null
        /*Z_NULL*/
        ;
        ret = inflateReset2(strm, windowBits);

        if (ret !== Z_OK) {
          strm.state = null
          /*Z_NULL*/
          ;
        }

        return ret;
      }

      function inflateInit(strm) {
        return inflateInit2(strm, DEF_WBITS);
      }
      /*
       Return state with length and distance decoding tables and index sizes set to
       fixed code decoding.  Normally this returns fixed tables from inffixed.h.
       If BUILDFIXED is defined, then instead this routine builds the tables the
       first time it's called, and returns those tables the first time and
       thereafter.  This reduces the size of the code by about 2K bytes, in
       exchange for a little execution time.  However, BUILDFIXED should not be
       used for threaded applications, since the rewriting of the tables and virgin
       may not be thread-safe.
       */


      var virgin = true;
      var lenfix, distfix; // We have no pointers in JS, so keep tables separate

      function fixedtables(state) {
        /* build fixed huffman tables if first call (may not be thread safe) */
        if (virgin) {
          var sym;
          lenfix = new utils.Buf32(512);
          distfix = new utils.Buf32(32);
          /* literal/length table */

          sym = 0;

          while (sym < 144) {
            state.lens[sym++] = 8;
          }

          while (sym < 256) {
            state.lens[sym++] = 9;
          }

          while (sym < 280) {
            state.lens[sym++] = 7;
          }

          while (sym < 288) {
            state.lens[sym++] = 8;
          }

          inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
            bits: 9
          });
          /* distance table */

          sym = 0;

          while (sym < 32) {
            state.lens[sym++] = 5;
          }

          inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
            bits: 5
          });
          /* do this just once */

          virgin = false;
        }

        state.lencode = lenfix;
        state.lenbits = 9;
        state.distcode = distfix;
        state.distbits = 5;
      }
      /*
       Update the window with the last wsize (normally 32K) bytes written before
       returning.  If window does not exist yet, create it.  This is only called
       when a window is already in use, or when output has been written during this
       inflate call, but the end of the deflate stream has not been reached yet.
       It is also called to create a window for dictionary data when a dictionary
       is loaded.
      
       Providing output buffers larger than 32K to inflate() should provide a speed
       advantage, since only the last 32K of output is copied to the sliding window
       upon return from inflate(), and since all distances after the first 32K of
       output will fall in the output data, making match copies simpler and faster.
       The advantage may be dependent on the size of the processor's data caches.
       */


      function updatewindow(strm, src, end, copy) {
        var dist;
        var state = strm.state;
        /* if it hasn't been done already, allocate space for the window */

        if (state.window === null) {
          state.wsize = 1 << state.wbits;
          state.wnext = 0;
          state.whave = 0;
          state.window = new utils.Buf8(state.wsize);
        }
        /* copy state->wsize or less output bytes into the circular window */


        if (copy >= state.wsize) {
          utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
          state.wnext = 0;
          state.whave = state.wsize;
        } else {
          dist = state.wsize - state.wnext;

          if (dist > copy) {
            dist = copy;
          } //zmemcpy(state->window + state->wnext, end - copy, dist);


          utils.arraySet(state.window, src, end - copy, dist, state.wnext);
          copy -= dist;

          if (copy) {
            //zmemcpy(state->window, end - copy, copy);
            utils.arraySet(state.window, src, end - copy, copy, 0);
            state.wnext = copy;
            state.whave = state.wsize;
          } else {
            state.wnext += dist;

            if (state.wnext === state.wsize) {
              state.wnext = 0;
            }

            if (state.whave < state.wsize) {
              state.whave += dist;
            }
          }
        }

        return 0;
      }

      function inflate(strm, flush) {
        var state;
        var input, output; // input/output buffers

        var next;
        /* next input INDEX */

        var put;
        /* next output INDEX */

        var have, left;
        /* available input and output */

        var hold;
        /* bit buffer */

        var bits;
        /* bits in bit buffer */

        var _in, _out;
        /* save starting available input and output */


        var copy;
        /* number of stored or match bytes to copy */

        var from;
        /* where to copy match bytes from */

        var from_source;
        var here = 0;
        /* current decoding table entry */

        var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
        //var last;                   /* parent table entry */

        var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)

        var len;
        /* length to copy for repeats, bits to drop */

        var ret;
        /* return code */

        var hbuf = new utils.Buf8(4);
        /* buffer for gzip header crc calculation */

        var opts;
        var n; // temporary var for NEED_BITS

        var order =
        /* permutation of code lengths */
        [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

        if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;

        if (state.mode === TYPE) {
          state.mode = TYPEDO;
        }
        /* skip check */
        //--- LOAD() ---


        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits; //---

        _in = have;
        _out = left;
        ret = Z_OK;

        inf_leave: // goto emulation
        for (;;) {
          switch (state.mode) {
            case HEAD:
              if (state.wrap === 0) {
                state.mode = TYPEDO;
                break;
              } //=== NEEDBITS(16);


              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.wrap & 2 && hold === 0x8b1f) {
                /* gzip header */
                state.check = 0
                /*crc32(0L, Z_NULL, 0)*/
                ; //=== CRC2(state.check, hold);

                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
                //=== INITBITS();

                hold = 0;
                bits = 0; //===//

                state.mode = FLAGS;
                break;
              }

              state.flags = 0;
              /* expect zlib header */

              if (state.head) {
                state.head.done = false;
              }

              if (!(state.wrap & 1) ||
              /* check if zlib header allowed */
              (((hold & 0xff) <<
              /*BITS(8)*/
              8) + (hold >> 8)) % 31) {
                strm.msg = 'incorrect header check';
                state.mode = BAD;
                break;
              }

              if ((hold & 0x0f) !==
              /*BITS(4)*/
              Z_DEFLATED) {
                strm.msg = 'unknown compression method';
                state.mode = BAD;
                break;
              } //--- DROPBITS(4) ---//


              hold >>>= 4;
              bits -= 4; //---//

              len = (hold & 0x0f) +
              /*BITS(4)*/
              8;

              if (state.wbits === 0) {
                state.wbits = len;
              } else if (len > state.wbits) {
                strm.msg = 'invalid window size';
                state.mode = BAD;
                break;
              }

              state.dmax = 1 << len; //Tracev((stderr, "inflate:   zlib header ok\n"));

              strm.adler = state.check = 1
              /*adler32(0L, Z_NULL, 0)*/
              ;
              state.mode = hold & 0x200 ? DICTID : TYPE; //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              break;

            case FLAGS:
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.flags = hold;

              if ((state.flags & 0xff) !== Z_DEFLATED) {
                strm.msg = 'unknown compression method';
                state.mode = BAD;
                break;
              }

              if (state.flags & 0xe000) {
                strm.msg = 'unknown header flags set';
                state.mode = BAD;
                break;
              }

              if (state.head) {
                state.head.text = hold >> 8 & 1;
              }

              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = TIME;

            /* falls through */

            case TIME:
              //=== NEEDBITS(32); */
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.head) {
                state.head.time = hold;
              }

              if (state.flags & 0x0200) {
                //=== CRC4(state.check, hold)
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                hbuf[2] = hold >>> 16 & 0xff;
                hbuf[3] = hold >>> 24 & 0xff;
                state.check = crc32(state.check, hbuf, 4, 0); //===
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = OS;

            /* falls through */

            case OS:
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.head) {
                state.head.xflags = hold & 0xff;
                state.head.os = hold >> 8;
              }

              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = EXLEN;

            /* falls through */

            case EXLEN:
              if (state.flags & 0x0400) {
                //=== NEEDBITS(16); */
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.length = hold;

                if (state.head) {
                  state.head.extra_len = hold;
                }

                if (state.flags & 0x0200) {
                  //=== CRC2(state.check, hold);
                  hbuf[0] = hold & 0xff;
                  hbuf[1] = hold >>> 8 & 0xff;
                  state.check = crc32(state.check, hbuf, 2, 0); //===//
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
              } else if (state.head) {
                state.head.extra = null
                /*Z_NULL*/
                ;
              }

              state.mode = EXTRA;

            /* falls through */

            case EXTRA:
              if (state.flags & 0x0400) {
                copy = state.length;

                if (copy > have) {
                  copy = have;
                }

                if (copy) {
                  if (state.head) {
                    len = state.head.extra_len - state.length;

                    if (!state.head.extra) {
                      // Use untyped array for more conveniend processing later
                      state.head.extra = new Array(state.head.extra_len);
                    }

                    utils.arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    copy,
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len); //zmemcpy(state.head.extra + len, next,
                    //        len + copy > state.head.extra_max ?
                    //        state.head.extra_max - len : copy);
                  }

                  if (state.flags & 0x0200) {
                    state.check = crc32(state.check, input, copy, next);
                  }

                  have -= copy;
                  next += copy;
                  state.length -= copy;
                }

                if (state.length) {
                  break inf_leave;
                }
              }

              state.length = 0;
              state.mode = NAME;

            /* falls through */

            case NAME:
              if (state.flags & 0x0800) {
                if (have === 0) {
                  break inf_leave;
                }

                copy = 0;

                do {
                  // TODO: 2 or 1 bytes?
                  len = input[next + copy++];
                  /* use constant limit because in js we should not preallocate memory */

                  if (state.head && len && state.length < 65536
                  /*state.head.name_max*/
                  ) {
                    state.head.name += String.fromCharCode(len);
                  }
                } while (len && copy < have);

                if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }

                have -= copy;
                next += copy;

                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.name = null;
              }

              state.length = 0;
              state.mode = COMMENT;

            /* falls through */

            case COMMENT:
              if (state.flags & 0x1000) {
                if (have === 0) {
                  break inf_leave;
                }

                copy = 0;

                do {
                  len = input[next + copy++];
                  /* use constant limit because in js we should not preallocate memory */

                  if (state.head && len && state.length < 65536
                  /*state.head.comm_max*/
                  ) {
                    state.head.comment += String.fromCharCode(len);
                  }
                } while (len && copy < have);

                if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }

                have -= copy;
                next += copy;

                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.comment = null;
              }

              state.mode = HCRC;

            /* falls through */

            case HCRC:
              if (state.flags & 0x0200) {
                //=== NEEDBITS(16); */
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                if (hold !== (state.check & 0xffff)) {
                  strm.msg = 'header crc mismatch';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
              }

              if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
              }

              strm.adler = state.check = 0;
              state.mode = TYPE;
              break;

            case DICTID:
              //=== NEEDBITS(32); */
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              strm.adler = state.check = zswap32(hold); //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              state.mode = DICT;

            /* falls through */

            case DICT:
              if (state.havedict === 0) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits; //---

                return Z_NEED_DICT;
              }

              strm.adler = state.check = 1
              /*adler32(0L, Z_NULL, 0)*/
              ;
              state.mode = TYPE;

            /* falls through */

            case TYPE:
              if (flush === Z_BLOCK || flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case TYPEDO:
              if (state.last) {
                //--- BYTEBITS() ---//
                hold >>>= bits & 7;
                bits -= bits & 7; //---//

                state.mode = CHECK;
                break;
              } //=== NEEDBITS(3); */


              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.last = hold & 0x01
              /*BITS(1)*/
              ; //--- DROPBITS(1) ---//

              hold >>>= 1;
              bits -= 1; //---//

              switch (hold & 0x03) {
                /*BITS(2)*/
                case 0:
                  /* stored block */
                  //Tracev((stderr, "inflate:     stored block%s\n",
                  //        state.last ? " (last)" : ""));
                  state.mode = STORED;
                  break;

                case 1:
                  /* fixed block */
                  fixedtables(state); //Tracev((stderr, "inflate:     fixed codes block%s\n",
                  //        state.last ? " (last)" : ""));

                  state.mode = LEN_;
                  /* decode codes */

                  if (flush === Z_TREES) {
                    //--- DROPBITS(2) ---//
                    hold >>>= 2;
                    bits -= 2; //---//

                    break inf_leave;
                  }

                  break;

                case 2:
                  /* dynamic block */
                  //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                  //        state.last ? " (last)" : ""));
                  state.mode = TABLE;
                  break;

                case 3:
                  strm.msg = 'invalid block type';
                  state.mode = BAD;
              } //--- DROPBITS(2) ---//


              hold >>>= 2;
              bits -= 2; //---//

              break;

            case STORED:
              //--- BYTEBITS() ---// /* go to byte boundary */
              hold >>>= bits & 7;
              bits -= bits & 7; //---//
              //=== NEEDBITS(32); */

              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
                strm.msg = 'invalid stored block lengths';
                state.mode = BAD;
                break;
              }

              state.length = hold & 0xffff; //Tracev((stderr, "inflate:       stored length %u\n",
              //        state.length));
              //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              state.mode = COPY_;

              if (flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case COPY_:
              state.mode = COPY;

            /* falls through */

            case COPY:
              copy = state.length;

              if (copy) {
                if (copy > have) {
                  copy = have;
                }

                if (copy > left) {
                  copy = left;
                }

                if (copy === 0) {
                  break inf_leave;
                } //--- zmemcpy(put, next, copy); ---


                utils.arraySet(output, input, next, copy, put); //---//

                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state.length -= copy;
                break;
              } //Tracev((stderr, "inflate:       stored end\n"));


              state.mode = TYPE;
              break;

            case TABLE:
              //=== NEEDBITS(14); */
              while (bits < 14) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.nlen = (hold & 0x1f) +
              /*BITS(5)*/
              257; //--- DROPBITS(5) ---//

              hold >>>= 5;
              bits -= 5; //---//

              state.ndist = (hold & 0x1f) +
              /*BITS(5)*/
              1; //--- DROPBITS(5) ---//

              hold >>>= 5;
              bits -= 5; //---//

              state.ncode = (hold & 0x0f) +
              /*BITS(4)*/
              4; //--- DROPBITS(4) ---//

              hold >>>= 4;
              bits -= 4; //---//
              //#ifndef PKZIP_BUG_WORKAROUND

              if (state.nlen > 286 || state.ndist > 30) {
                strm.msg = 'too many length or distance symbols';
                state.mode = BAD;
                break;
              } //#endif
              //Tracev((stderr, "inflate:       table sizes ok\n"));


              state.have = 0;
              state.mode = LENLENS;

            /* falls through */

            case LENLENS:
              while (state.have < state.ncode) {
                //=== NEEDBITS(3);
                while (bits < 3) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
                //--- DROPBITS(3) ---//

                hold >>>= 3;
                bits -= 3; //---//
              }

              while (state.have < 19) {
                state.lens[order[state.have++]] = 0;
              } // We have separate tables & no pointers. 2 commented lines below not needed.
              //state.next = state.codes;
              //state.lencode = state.next;
              // Switch to use dynamic table


              state.lencode = state.lendyn;
              state.lenbits = 7;
              opts = {
                bits: state.lenbits
              };
              ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
              state.lenbits = opts.bits;

              if (ret) {
                strm.msg = 'invalid code lengths set';
                state.mode = BAD;
                break;
              } //Tracev((stderr, "inflate:       code lengths ok\n"));


              state.have = 0;
              state.mode = CODELENS;

            /* falls through */

            case CODELENS:
              while (state.have < state.nlen + state.ndist) {
                for (;;) {
                  here = state.lencode[hold & (1 << state.lenbits) - 1];
                  /*BITS(state.lenbits)*/

                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                }

                if (here_val < 16) {
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits; //---//

                  state.lens[state.have++] = here_val;
                } else {
                  if (here_val === 16) {
                    //=== NEEDBITS(here.bits + 2);
                    n = here_bits + 2;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    if (state.have === 0) {
                      strm.msg = 'invalid bit length repeat';
                      state.mode = BAD;
                      break;
                    }

                    len = state.lens[state.have - 1];
                    copy = 3 + (hold & 0x03); //BITS(2);
                    //--- DROPBITS(2) ---//

                    hold >>>= 2;
                    bits -= 2; //---//
                  } else if (here_val === 17) {
                    //=== NEEDBITS(here.bits + 3);
                    n = here_bits + 3;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    len = 0;
                    copy = 3 + (hold & 0x07); //BITS(3);
                    //--- DROPBITS(3) ---//

                    hold >>>= 3;
                    bits -= 3; //---//
                  } else {
                    //=== NEEDBITS(here.bits + 7);
                    n = here_bits + 7;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    len = 0;
                    copy = 11 + (hold & 0x7f); //BITS(7);
                    //--- DROPBITS(7) ---//

                    hold >>>= 7;
                    bits -= 7; //---//
                  }

                  if (state.have + copy > state.nlen + state.ndist) {
                    strm.msg = 'invalid bit length repeat';
                    state.mode = BAD;
                    break;
                  }

                  while (copy--) {
                    state.lens[state.have++] = len;
                  }
                }
              }
              /* handle error breaks in while */


              if (state.mode === BAD) {
                break;
              }
              /* check for end-of-block code (better have one) */


              if (state.lens[256] === 0) {
                strm.msg = 'invalid code -- missing end-of-block';
                state.mode = BAD;
                break;
              }
              /* build code tables -- note: do not change the lenbits or distbits
                 values here (9 and 6) without reading the comments in inftrees.h
                 concerning the ENOUGH constants, which depend on those values */


              state.lenbits = 9;
              opts = {
                bits: state.lenbits
              };
              ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
              // state.next_index = opts.table_index;

              state.lenbits = opts.bits; // state.lencode = state.next;

              if (ret) {
                strm.msg = 'invalid literal/lengths set';
                state.mode = BAD;
                break;
              }

              state.distbits = 6; //state.distcode.copy(state.codes);
              // Switch to use dynamic table

              state.distcode = state.distdyn;
              opts = {
                bits: state.distbits
              };
              ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
              // state.next_index = opts.table_index;

              state.distbits = opts.bits; // state.distcode = state.next;

              if (ret) {
                strm.msg = 'invalid distances set';
                state.mode = BAD;
                break;
              } //Tracev((stderr, 'inflate:       codes ok\n'));


              state.mode = LEN_;

              if (flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case LEN_:
              state.mode = LEN;

            /* falls through */

            case LEN:
              if (have >= 6 && left >= 258) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits; //---

                inflate_fast(strm, _out); //--- LOAD() ---

                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits; //---

                if (state.mode === TYPE) {
                  state.back = -1;
                }

                break;
              }

              state.back = 0;

              for (;;) {
                here = state.lencode[hold & (1 << state.lenbits) - 1];
                /*BITS(state.lenbits)*/

                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;

                if (here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//


                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8; //---//
              }

              if (here_op && (here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;

                for (;;) {
                  here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                  /*BITS(last.bits + last.op)*/
                  last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (last_bits + here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                } //--- DROPBITS(last.bits) ---//


                hold >>>= last_bits;
                bits -= last_bits; //---//

                state.back += last_bits;
              } //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              state.back += here_bits;
              state.length = here_val;

              if (here_op === 0) {
                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                //        "inflate:         literal '%c'\n" :
                //        "inflate:         literal 0x%02x\n", here.val));
                state.mode = LIT;
                break;
              }

              if (here_op & 32) {
                //Tracevv((stderr, "inflate:         end of block\n"));
                state.back = -1;
                state.mode = TYPE;
                break;
              }

              if (here_op & 64) {
                strm.msg = 'invalid literal/length code';
                state.mode = BAD;
                break;
              }

              state.extra = here_op & 15;
              state.mode = LENEXT;

            /* falls through */

            case LENEXT:
              if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.length += hold & (1 << state.extra) - 1
                /*BITS(state.extra)*/
                ; //--- DROPBITS(state.extra) ---//

                hold >>>= state.extra;
                bits -= state.extra; //---//

                state.back += state.extra;
              } //Tracevv((stderr, "inflate:         length %u\n", state.length));


              state.was = state.length;
              state.mode = DIST;

            /* falls through */

            case DIST:
              for (;;) {
                here = state.distcode[hold & (1 << state.distbits) - 1];
                /*BITS(state.distbits)*/

                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;

                if (here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//


                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8; //---//
              }

              if ((here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;

                for (;;) {
                  here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                  /*BITS(last.bits + last.op)*/
                  last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (last_bits + here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                } //--- DROPBITS(last.bits) ---//


                hold >>>= last_bits;
                bits -= last_bits; //---//

                state.back += last_bits;
              } //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              state.back += here_bits;

              if (here_op & 64) {
                strm.msg = 'invalid distance code';
                state.mode = BAD;
                break;
              }

              state.offset = here_val;
              state.extra = here_op & 15;
              state.mode = DISTEXT;

            /* falls through */

            case DISTEXT:
              if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.offset += hold & (1 << state.extra) - 1
                /*BITS(state.extra)*/
                ; //--- DROPBITS(state.extra) ---//

                hold >>>= state.extra;
                bits -= state.extra; //---//

                state.back += state.extra;
              } //#ifdef INFLATE_STRICT


              if (state.offset > state.dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break;
              } //#endif
              //Tracevv((stderr, "inflate:         distance %u\n", state.offset));


              state.mode = MATCH;

            /* falls through */

            case MATCH:
              if (left === 0) {
                break inf_leave;
              }

              copy = _out - left;

              if (state.offset > copy) {
                /* copy from window */
                copy = state.offset - copy;

                if (copy > state.whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break;
                  } // (!) This block is disabled in zlib defailts,
                  // don't enable it for binary compatibility
                  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                  //          Trace((stderr, "inflate.c too far\n"));
                  //          copy -= state.whave;
                  //          if (copy > state.length) { copy = state.length; }
                  //          if (copy > left) { copy = left; }
                  //          left -= copy;
                  //          state.length -= copy;
                  //          do {
                  //            output[put++] = 0;
                  //          } while (--copy);
                  //          if (state.length === 0) { state.mode = LEN; }
                  //          break;
                  //#endif

                }

                if (copy > state.wnext) {
                  copy -= state.wnext;
                  from = state.wsize - copy;
                } else {
                  from = state.wnext - copy;
                }

                if (copy > state.length) {
                  copy = state.length;
                }

                from_source = state.window;
              } else {
                /* copy from output */
                from_source = output;
                from = put - state.offset;
                copy = state.length;
              }

              if (copy > left) {
                copy = left;
              }

              left -= copy;
              state.length -= copy;

              do {
                output[put++] = from_source[from++];
              } while (--copy);

              if (state.length === 0) {
                state.mode = LEN;
              }

              break;

            case LIT:
              if (left === 0) {
                break inf_leave;
              }

              output[put++] = state.length;
              left--;
              state.mode = LEN;
              break;

            case CHECK:
              if (state.wrap) {
                //=== NEEDBITS(32);
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--; // Use '|' insdead of '+' to make sure that result is signed

                  hold |= input[next++] << bits;
                  bits += 8;
                } //===//


                _out -= left;
                strm.total_out += _out;
                state.total += _out;

                if (_out) {
                  strm.adler = state.check =
                  /*UPDATE(state.check, put - _out, _out);*/
                  state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                }

                _out = left; // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too

                if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                  strm.msg = 'incorrect data check';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
                //Tracev((stderr, "inflate:   check matches trailer\n"));
              }

              state.mode = LENGTH;

            /* falls through */

            case LENGTH:
              if (state.wrap && state.flags) {
                //=== NEEDBITS(32);
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                if (hold !== (state.total & 0xffffffff)) {
                  strm.msg = 'incorrect length check';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
                //Tracev((stderr, "inflate:   length matches trailer\n"));
              }

              state.mode = DONE;

            /* falls through */

            case DONE:
              ret = Z_STREAM_END;
              break inf_leave;

            case BAD:
              ret = Z_DATA_ERROR;
              break inf_leave;

            case MEM:
              return Z_MEM_ERROR;

            case SYNC:
            /* falls through */

            default:
              return Z_STREAM_ERROR;
          }
        } // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

        /*
           Return from inflate(), updating the total counts and the check value.
           If there was no progress during the inflate() call, return a buffer
           error.  Call updatewindow() to create and/or update the window state.
           Note: a memory error from inflate() is non-recoverable.
         */
        //--- RESTORE() ---


        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits; //---

        if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
          if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
            state.mode = MEM;
            return Z_MEM_ERROR;
          }
        }

        _in -= strm.avail_in;
        _out -= strm.avail_out;
        strm.total_in += _in;
        strm.total_out += _out;
        state.total += _out;

        if (state.wrap && _out) {
          strm.adler = state.check =
          /*UPDATE(state.check, strm.next_out - _out, _out);*/
          state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
        }

        strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);

        if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
          ret = Z_BUF_ERROR;
        }

        return ret;
      }

      function inflateEnd(strm) {
        if (!strm || !strm.state
        /*|| strm->zfree == (free_func)0*/
        ) {
            return Z_STREAM_ERROR;
          }

        var state = strm.state;

        if (state.window) {
          state.window = null;
        }

        strm.state = null;
        return Z_OK;
      }

      function inflateGetHeader(strm, head) {
        var state;
        /* check state */

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;

        if ((state.wrap & 2) === 0) {
          return Z_STREAM_ERROR;
        }
        /* save header structure */


        state.head = head;
        head.done = false;
        return Z_OK;
      }

      function inflateSetDictionary(strm, dictionary) {
        var dictLength = dictionary.length;
        var state;
        var dictid;
        var ret;
        /* check state */

        if (!strm
        /* == Z_NULL */
        || !strm.state
        /* == Z_NULL */
        ) {
            return Z_STREAM_ERROR;
          }

        state = strm.state;

        if (state.wrap !== 0 && state.mode !== DICT) {
          return Z_STREAM_ERROR;
        }
        /* check for correct dictionary identifier */


        if (state.mode === DICT) {
          dictid = 1;
          /* adler32(0, null, 0)*/

          /* dictid = adler32(dictid, dictionary, dictLength); */

          dictid = adler32(dictid, dictionary, dictLength, 0);

          if (dictid !== state.check) {
            return Z_DATA_ERROR;
          }
        }
        /* copy dictionary to window using updatewindow(), which will amend the
         existing dictionary if appropriate */


        ret = updatewindow(strm, dictionary, dictLength, dictLength);

        if (ret) {
          state.mode = MEM;
          return Z_MEM_ERROR;
        }

        state.havedict = 1; // Tracev((stderr, "inflate:   dictionary set\n"));

        return Z_OK;
      }

      exports.inflateReset = inflateReset;
      exports.inflateReset2 = inflateReset2;
      exports.inflateResetKeep = inflateResetKeep;
      exports.inflateInit = inflateInit;
      exports.inflateInit2 = inflateInit2;
      exports.inflate = inflate;
      exports.inflateEnd = inflateEnd;
      exports.inflateGetHeader = inflateGetHeader;
      exports.inflateSetDictionary = inflateSetDictionary;
      exports.inflateInfo = 'pako inflate (from Nodeca project)';
      /* Not implemented
      exports.inflateCopy = inflateCopy;
      exports.inflateGetDictionary = inflateGetDictionary;
      exports.inflateMark = inflateMark;
      exports.inflatePrime = inflatePrime;
      exports.inflateSync = inflateSync;
      exports.inflateSyncPoint = inflateSyncPoint;
      exports.inflateUndermine = inflateUndermine;
      */

      /***/
    },
    /* 33 */

    /***/
    function (module, exports) {
      'use strict';

      var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';

      exports.assign = function (obj
      /*from1, from2, from3, ...*/
      ) {
        var sources = Array.prototype.slice.call(arguments, 1);

        while (sources.length) {
          var source = sources.shift();

          if (!source) {
            continue;
          }

          if (typeof source !== 'object') {
            throw new TypeError(source + 'must be non-object');
          }

          for (var p in source) {
            if (source.hasOwnProperty(p)) {
              obj[p] = source[p];
            }
          }
        }

        return obj;
      }; // reduce buffer size, avoiding mem copy


      exports.shrinkBuf = function (buf, size) {
        if (buf.length === size) {
          return buf;
        }

        if (buf.subarray) {
          return buf.subarray(0, size);
        }

        buf.length = size;
        return buf;
      };

      var fnTyped = {
        arraySet: function (dest, src, src_offs, len, dest_offs) {
          if (src.subarray && dest.subarray) {
            dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
            return;
          } // Fallback to ordinary array


          for (var i = 0; i < len; i++) {
            dest[dest_offs + i] = src[src_offs + i];
          }
        },
        // Join array of chunks to single array.
        flattenChunks: function (chunks) {
          var i, l, len, pos, chunk, result; // calculate data length

          len = 0;

          for (i = 0, l = chunks.length; i < l; i++) {
            len += chunks[i].length;
          } // join chunks


          result = new Uint8Array(len);
          pos = 0;

          for (i = 0, l = chunks.length; i < l; i++) {
            chunk = chunks[i];
            result.set(chunk, pos);
            pos += chunk.length;
          }

          return result;
        }
      };
      var fnUntyped = {
        arraySet: function (dest, src, src_offs, len, dest_offs) {
          for (var i = 0; i < len; i++) {
            dest[dest_offs + i] = src[src_offs + i];
          }
        },
        // Join array of chunks to single array.
        flattenChunks: function (chunks) {
          return [].concat.apply([], chunks);
        }
      }; // Enable/Disable typed arrays use, for testing
      //

      exports.setTyped = function (on) {
        if (on) {
          exports.Buf8 = Uint8Array;
          exports.Buf16 = Uint16Array;
          exports.Buf32 = Int32Array;
          exports.assign(exports, fnTyped);
        } else {
          exports.Buf8 = Array;
          exports.Buf16 = Array;
          exports.Buf32 = Array;
          exports.assign(exports, fnUntyped);
        }
      };

      exports.setTyped(TYPED_OK);
      /***/
    },
    /* 34 */

    /***/
    function (module, exports) {
      'use strict'; // Note: adler32 takes 12% for level 0 and 2% for level 6.
      // It doesn't worth to make additional optimizationa as in original.
      // Small size is preferable.

      function adler32(adler, buf, len, pos) {
        var s1 = adler & 0xffff | 0,
            s2 = adler >>> 16 & 0xffff | 0,
            n = 0;

        while (len !== 0) {
          // Set limit ~ twice less than 5552, to keep
          // s2 in 31-bits, because we force signed ints.
          // in other case %= will fail.
          n = len > 2000 ? 2000 : len;
          len -= n;

          do {
            s1 = s1 + buf[pos++] | 0;
            s2 = s2 + s1 | 0;
          } while (--n);

          s1 %= 65521;
          s2 %= 65521;
        }

        return s1 | s2 << 16 | 0;
      }

      module.exports = adler32;
      /***/
    },
    /* 35 */

    /***/
    function (module, exports) {
      'use strict'; // Note: we can't get significant speed boost here.
      // So write code to minimize size - no pregenerated tables
      // and array tools dependencies.
      // Use ordinary array, since untyped makes no boost here

      function makeTable() {
        var c,
            table = [];

        for (var n = 0; n < 256; n++) {
          c = n;

          for (var k = 0; k < 8; k++) {
            c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
          }

          table[n] = c;
        }

        return table;
      } // Create table on load. Just 255 signed longs. Not a problem.


      var crcTable = makeTable();

      function crc32(crc, buf, len, pos) {
        var t = crcTable,
            end = pos + len;
        crc ^= -1;

        for (var i = pos; i < end; i++) {
          crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
        }

        return crc ^ -1; // >>> 0;
      }

      module.exports = crc32;
      /***/
    },
    /* 36 */

    /***/
    function (module, exports) {
      'use strict'; // See state defs from inflate.js

      var BAD = 30;
      /* got a data error -- remain here until reset */

      var TYPE = 12;
      /* i: waiting for type bits, including last-flag bit */

      /*
         Decode literal, length, and distance codes and write out the resulting
         literal and match bytes until either not enough input or output is
         available, an end-of-block is encountered, or a data error is encountered.
         When large enough input and output buffers are supplied to inflate(), for
         example, a 16K input buffer and a 64K output buffer, more than 95% of the
         inflate execution time is spent in this routine.
      
         Entry assumptions:
      
              state.mode === LEN
              strm.avail_in >= 6
              strm.avail_out >= 258
              start >= strm.avail_out
              state.bits < 8
      
         On return, state.mode is one of:
      
              LEN -- ran out of enough output space or enough available input
              TYPE -- reached end of block code, inflate() to interpret next block
              BAD -- error in block data
      
         Notes:
      
          - The maximum input bits used by a length/distance pair is 15 bits for the
            length code, 5 bits for the length extra, 15 bits for the distance code,
            and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
            Therefore if strm.avail_in >= 6, then there is enough input to avoid
            checking for available input while decoding.
      
          - The maximum bytes that a single length/distance pair can output is 258
            bytes, which is the maximum length that can be coded.  inflate_fast()
            requires strm.avail_out >= 258 for each loop to avoid checking for
            output space.
       */

      module.exports = function inflate_fast(strm, start) {
        var state;

        var _in;
        /* local strm.input */


        var last;
        /* have enough input while in < last */

        var _out;
        /* local strm.output */


        var beg;
        /* inflate()'s initial strm.output */

        var end;
        /* while out < end, enough space available */
        //#ifdef INFLATE_STRICT

        var dmax;
        /* maximum distance from zlib header */
        //#endif

        var wsize;
        /* window size or zero if not using window */

        var whave;
        /* valid bytes in the window */

        var wnext;
        /* window write index */
        // Use `s_window` instead `window`, avoid conflict with instrumentation tools

        var s_window;
        /* allocated sliding window, if wsize != 0 */

        var hold;
        /* local strm.hold */

        var bits;
        /* local strm.bits */

        var lcode;
        /* local strm.lencode */

        var dcode;
        /* local strm.distcode */

        var lmask;
        /* mask for first level of length codes */

        var dmask;
        /* mask for first level of distance codes */

        var here;
        /* retrieved table entry */

        var op;
        /* code bits, operation, extra bits, or */

        /*  window position, window bytes to copy */

        var len;
        /* match length, unused bytes */

        var dist;
        /* match distance */

        var from;
        /* where to copy match from */

        var from_source;
        var input, output; // JS specific, because we have no pointers

        /* copy state to local variables */

        state = strm.state; //here = state.here;

        _in = strm.next_in;
        input = strm.input;
        last = _in + (strm.avail_in - 5);
        _out = strm.next_out;
        output = strm.output;
        beg = _out - (start - strm.avail_out);
        end = _out + (strm.avail_out - 257); //#ifdef INFLATE_STRICT

        dmax = state.dmax; //#endif

        wsize = state.wsize;
        whave = state.whave;
        wnext = state.wnext;
        s_window = state.window;
        hold = state.hold;
        bits = state.bits;
        lcode = state.lencode;
        dcode = state.distcode;
        lmask = (1 << state.lenbits) - 1;
        dmask = (1 << state.distbits) - 1;
        /* decode literals and length/distances until end-of-block or not enough
           input data or output space */

        top: do {
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }

          here = lcode[hold & lmask];

          dolen: for (;;) {
            // Goto emulation
            op = here >>> 24
            /*here.bits*/
            ;
            hold >>>= op;
            bits -= op;
            op = here >>> 16 & 0xff
            /*here.op*/
            ;

            if (op === 0) {
              /* literal */
              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
              //        "inflate:         literal '%c'\n" :
              //        "inflate:         literal 0x%02x\n", here.val));
              output[_out++] = here & 0xffff
              /*here.val*/
              ;
            } else if (op & 16) {
              /* length base */
              len = here & 0xffff
              /*here.val*/
              ;
              op &= 15;
              /* number of extra bits */

              if (op) {
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }

                len += hold & (1 << op) - 1;
                hold >>>= op;
                bits -= op;
              } //Tracevv((stderr, "inflate:         length %u\n", len));


              if (bits < 15) {
                hold += input[_in++] << bits;
                bits += 8;
                hold += input[_in++] << bits;
                bits += 8;
              }

              here = dcode[hold & dmask];

              dodist: for (;;) {
                // goto emulation
                op = here >>> 24
                /*here.bits*/
                ;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 0xff
                /*here.op*/
                ;

                if (op & 16) {
                  /* distance base */
                  dist = here & 0xffff
                  /*here.val*/
                  ;
                  op &= 15;
                  /* number of extra bits */

                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;

                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                  }

                  dist += hold & (1 << op) - 1; //#ifdef INFLATE_STRICT

                  if (dist > dmax) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break top;
                  } //#endif


                  hold >>>= op;
                  bits -= op; //Tracevv((stderr, "inflate:         distance %u\n", dist));

                  op = _out - beg;
                  /* max distance in output */

                  if (dist > op) {
                    /* see if copy from window */
                    op = dist - op;
                    /* distance back in window */

                    if (op > whave) {
                      if (state.sane) {
                        strm.msg = 'invalid distance too far back';
                        state.mode = BAD;
                        break top;
                      } // (!) This block is disabled in zlib defailts,
                      // don't enable it for binary compatibility
                      //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                      //                if (len <= op - whave) {
                      //                  do {
                      //                    output[_out++] = 0;
                      //                  } while (--len);
                      //                  continue top;
                      //                }
                      //                len -= op - whave;
                      //                do {
                      //                  output[_out++] = 0;
                      //                } while (--op > whave);
                      //                if (op === 0) {
                      //                  from = _out - dist;
                      //                  do {
                      //                    output[_out++] = output[from++];
                      //                  } while (--len);
                      //                  continue top;
                      //                }
                      //#endif

                    }

                    from = 0; // window index

                    from_source = s_window;

                    if (wnext === 0) {
                      /* very common case */
                      from += wsize - op;

                      if (op < len) {
                        /* some from window */
                        len -= op;

                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);

                        from = _out - dist;
                        /* rest from output */

                        from_source = output;
                      }
                    } else if (wnext < op) {
                      /* wrap around window */
                      from += wsize + wnext - op;
                      op -= wnext;

                      if (op < len) {
                        /* some from end of window */
                        len -= op;

                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);

                        from = 0;

                        if (wnext < len) {
                          /* some from start of window */
                          op = wnext;
                          len -= op;

                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);

                          from = _out - dist;
                          /* rest from output */

                          from_source = output;
                        }
                      }
                    } else {
                      /* contiguous in window */
                      from += wnext - op;

                      if (op < len) {
                        /* some from window */
                        len -= op;

                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);

                        from = _out - dist;
                        /* rest from output */

                        from_source = output;
                      }
                    }

                    while (len > 2) {
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      len -= 3;
                    }

                    if (len) {
                      output[_out++] = from_source[from++];

                      if (len > 1) {
                        output[_out++] = from_source[from++];
                      }
                    }
                  } else {
                    from = _out - dist;
                    /* copy direct from output */

                    do {
                      /* minimum length is three */
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      len -= 3;
                    } while (len > 2);

                    if (len) {
                      output[_out++] = output[from++];

                      if (len > 1) {
                        output[_out++] = output[from++];
                      }
                    }
                  }
                } else if ((op & 64) === 0) {
                  /* 2nd level distance code */
                  here = dcode[(here & 0xffff) + (
                  /*here.val*/
                  hold & (1 << op) - 1)];
                  continue dodist;
                } else {
                  strm.msg = 'invalid distance code';
                  state.mode = BAD;
                  break top;
                }

                break; // need to emulate goto via "continue"
              }
            } else if ((op & 64) === 0) {
              /* 2nd level length code */
              here = lcode[(here & 0xffff) + (
              /*here.val*/
              hold & (1 << op) - 1)];
              continue dolen;
            } else if (op & 32) {
              /* end-of-block */
              //Tracevv((stderr, "inflate:         end of block\n"));
              state.mode = TYPE;
              break top;
            } else {
              strm.msg = 'invalid literal/length code';
              state.mode = BAD;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        } while (_in < last && _out < end);
        /* return unused bytes (on entry, bits < 8, so in won't go too far back) */


        len = bits >> 3;
        _in -= len;
        bits -= len << 3;
        hold &= (1 << bits) - 1;
        /* update state and return */

        strm.next_in = _in;
        strm.next_out = _out;
        strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
        strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
        state.hold = hold;
        state.bits = bits;
        return;
      };
      /***/

    },
    /* 37 */

    /***/
    function (module, exports, __webpack_require__) {
      'use strict';

      var utils = __webpack_require__(33);

      var MAXBITS = 15;
      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592; //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      var lbase = [
      /* Length codes 257..285 base */
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
      var lext = [
      /* Length codes 257..285 extra */
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
      var dbase = [
      /* Distance codes 0..29 base */
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
      var dext = [
      /* Distance codes 0..29 extra */
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

      module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
        var bits = opts.bits; //here = opts.here; /* table entry for duplication */

        var len = 0;
        /* a code's length in bits */

        var sym = 0;
        /* index of code symbols */

        var min = 0,
            max = 0;
        /* minimum and maximum code lengths */

        var root = 0;
        /* number of index bits for root table */

        var curr = 0;
        /* number of index bits for current table */

        var drop = 0;
        /* code bits to drop for sub-table */

        var left = 0;
        /* number of prefix codes available */

        var used = 0;
        /* code entries in table used */

        var huff = 0;
        /* Huffman code */

        var incr;
        /* for incrementing code, index */

        var fill;
        /* index for replicating entries */

        var low;
        /* low bits for current root entry */

        var mask;
        /* mask for low root bits */

        var next;
        /* next available space in table */

        var base = null;
        /* base value table to use */

        var base_index = 0; //  var shoextra;    /* extra bits table to use */

        var end;
        /* use base and extra for symbol > end */

        var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */

        var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */

        var extra = null;
        var extra_index = 0;
        var here_bits, here_op, here_val;
        /*
         Process a set of code lengths to create a canonical Huffman code.  The
         code lengths are lens[0..codes-1].  Each length corresponds to the
         symbols 0..codes-1.  The Huffman code is generated by first sorting the
         symbols by length from short to long, and retaining the symbol order
         for codes with equal lengths.  Then the code starts with all zero bits
         for the first code of the shortest length, and the codes are integer
         increments for the same length, and zeros are appended as the length
         increases.  For the deflate format, these bits are stored backwards
         from their more natural integer increment ordering, and so when the
         decoding tables are built in the large loop below, the integer codes
         are incremented backwards.
           This routine assumes, but does not check, that all of the entries in
         lens[] are in the range 0..MAXBITS.  The caller must assure this.
         1..MAXBITS is interpreted as that code length.  zero means that that
         symbol does not occur in this code.
           The codes are sorted by computing a count of codes for each length,
         creating from that a table of starting indices for each length in the
         sorted table, and then entering the symbols in order in the sorted
         table.  The sorted table is work[], with that space being provided by
         the caller.
           The length counts are used for other purposes as well, i.e. finding
         the minimum and maximum length codes, determining if there are any
         codes at all, checking for a valid set of lengths, and looking ahead
         at length counts to determine sub-table sizes when building the
         decoding tables.
         */

        /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */

        for (len = 0; len <= MAXBITS; len++) {
          count[len] = 0;
        }

        for (sym = 0; sym < codes; sym++) {
          count[lens[lens_index + sym]]++;
        }
        /* bound code lengths, force root to be within code lengths */


        root = bits;

        for (max = MAXBITS; max >= 1; max--) {
          if (count[max] !== 0) {
            break;
          }
        }

        if (root > max) {
          root = max;
        }

        if (max === 0) {
          /* no symbols to code at all */
          //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
          //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
          //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
          table[table_index++] = 1 << 24 | 64 << 16 | 0; //table.op[opts.table_index] = 64;
          //table.bits[opts.table_index] = 1;
          //table.val[opts.table_index++] = 0;

          table[table_index++] = 1 << 24 | 64 << 16 | 0;
          opts.bits = 1;
          return 0;
          /* no symbols, but wait for decoding to report error */
        }

        for (min = 1; min < max; min++) {
          if (count[min] !== 0) {
            break;
          }
        }

        if (root < min) {
          root = min;
        }
        /* check for an over-subscribed or incomplete set of lengths */


        left = 1;

        for (len = 1; len <= MAXBITS; len++) {
          left <<= 1;
          left -= count[len];

          if (left < 0) {
            return -1;
          }
          /* over-subscribed */

        }

        if (left > 0 && (type === CODES || max !== 1)) {
          return -1;
          /* incomplete set */
        }
        /* generate offsets into symbol table for each length for sorting */


        offs[1] = 0;

        for (len = 1; len < MAXBITS; len++) {
          offs[len + 1] = offs[len] + count[len];
        }
        /* sort symbols by length, by symbol order within each length */


        for (sym = 0; sym < codes; sym++) {
          if (lens[lens_index + sym] !== 0) {
            work[offs[lens[lens_index + sym]]++] = sym;
          }
        }
        /*
         Create and fill in decoding tables.  In this loop, the table being
         filled is at next and has curr index bits.  The code being used is huff
         with length len.  That code is converted to an index by dropping drop
         bits off of the bottom.  For codes where len is less than drop + curr,
         those top drop + curr - len bits are incremented through all values to
         fill the table with replicated entries.
           root is the number of index bits for the root table.  When len exceeds
         root, sub-tables are created pointed to by the root entry with an index
         of the low root bits of huff.  This is saved in low to check for when a
         new sub-table should be started.  drop is zero when the root table is
         being filled, and drop is root when sub-tables are being filled.
           When a new sub-table is needed, it is necessary to look ahead in the
         code lengths to determine what size sub-table is needed.  The length
         counts are used for this, and so count[] is decremented as codes are
         entered in the tables.
           used keeps track of how many table entries have been allocated from the
         provided *table space.  It is checked for LENS and DIST tables against
         the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
         the initial root table size constants.  See the comments in inftrees.h
         for more information.
           sym increments through all symbols, and the loop terminates when
         all codes of length max, i.e. all codes, have been processed.  This
         routine permits incomplete codes, so another loop after this one fills
         in the rest of the decoding tables with invalid code markers.
         */

        /* set up for code type */
        // poor man optimization - use if-else instead of switch,
        // to avoid deopts in old v8


        if (type === CODES) {
          base = extra = work;
          /* dummy value--not used */

          end = 19;
        } else if (type === LENS) {
          base = lbase;
          base_index -= 257;
          extra = lext;
          extra_index -= 257;
          end = 256;
        } else {
          /* DISTS */
          base = dbase;
          extra = dext;
          end = -1;
        }
        /* initialize opts for loop */


        huff = 0;
        /* starting code */

        sym = 0;
        /* starting code symbol */

        len = min;
        /* starting code length */

        next = table_index;
        /* current table to fill in */

        curr = root;
        /* current table index bits */

        drop = 0;
        /* current bits to drop from code for index */

        low = -1;
        /* trigger new sub-table when len > root */

        used = 1 << root;
        /* use root table entries */

        mask = used - 1;
        /* mask for comparing low */

        /* check available table space */

        if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
          return 1;
        }
        /* process all codes and make table entries */


        for (;;) {
          /* create table entry */
          here_bits = len - drop;

          if (work[sym] < end) {
            here_op = 0;
            here_val = work[sym];
          } else if (work[sym] > end) {
            here_op = extra[extra_index + work[sym]];
            here_val = base[base_index + work[sym]];
          } else {
            here_op = 32 + 64;
            /* end of block */

            here_val = 0;
          }
          /* replicate for those indices with low len bits equal to huff */


          incr = 1 << len - drop;
          fill = 1 << curr;
          min = fill;
          /* save offset to next table */

          do {
            fill -= incr;
            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
          } while (fill !== 0);
          /* backwards increment the len-bit code huff */


          incr = 1 << len - 1;

          while (huff & incr) {
            incr >>= 1;
          }

          if (incr !== 0) {
            huff &= incr - 1;
            huff += incr;
          } else {
            huff = 0;
          }
          /* go to next symbol, update count, len */


          sym++;

          if (--count[len] === 0) {
            if (len === max) {
              break;
            }

            len = lens[lens_index + work[sym]];
          }
          /* create new sub-table if needed */


          if (len > root && (huff & mask) !== low) {
            /* if first time, transition to sub-tables */
            if (drop === 0) {
              drop = root;
            }
            /* increment past last table */


            next += min;
            /* here min is 1 << curr */

            /* determine length of next table */

            curr = len - drop;
            left = 1 << curr;

            while (curr + drop < max) {
              left -= count[curr + drop];

              if (left <= 0) {
                break;
              }

              curr++;
              left <<= 1;
            }
            /* check for enough space */


            used += 1 << curr;

            if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
              return 1;
            }
            /* point entry in root table to sub-table */


            low = huff & mask;
            /*table.op[low] = curr;
            table.bits[low] = root;
            table.val[low] = next - opts.table_index;*/

            table[low] = root << 24 | curr << 16 | next - table_index | 0;
          }
        }
        /* fill in remaining table entry if code is incomplete (guaranteed to have
         at most one remaining entry, since if the code is incomplete, the
         maximum code length that was allowed to get this far is one bit) */


        if (huff !== 0) {
          //table.op[next + huff] = 64;            /* invalid code marker */
          //table.bits[next + huff] = len - drop;
          //table.val[next + huff] = 0;
          table[next + huff] = len - drop << 24 | 64 << 16 | 0;
        }
        /* set return parameters */
        //opts.table_index += used;


        opts.bits = root;
        return 0;
      };
      /***/

    },
    /* 38 */

    /***/
    function (module, exports, __webpack_require__) {
      // String encode/decode helpers
      'use strict';

      var utils = __webpack_require__(33); // Quick check if we can use fast array to bin string conversion
      //
      // - apply(Array) can fail on Android 2.2
      // - apply(Uint8Array) can fail on iOS 5.1 Safary
      //


      var STR_APPLY_OK = true;
      var STR_APPLY_UIA_OK = true;

      try {
        String.fromCharCode.apply(null, [0]);
      } catch (__) {
        STR_APPLY_OK = false;
      }

      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (__) {
        STR_APPLY_UIA_OK = false;
      } // Table with utf8 lengths (calculated by first byte of sequence)
      // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
      // because max possible codepoint is 0x10ffff


      var _utf8len = new utils.Buf8(256);

      for (var q = 0; q < 256; q++) {
        _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
      }

      _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start
      // convert string to array (typed, when possible)

      exports.string2buf = function (str) {
        var buf,
            c,
            c2,
            m_pos,
            i,
            str_len = str.length,
            buf_len = 0; // count binary size

        for (m_pos = 0; m_pos < str_len; m_pos++) {
          c = str.charCodeAt(m_pos);

          if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);

            if ((c2 & 0xfc00) === 0xdc00) {
              c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
              m_pos++;
            }
          }

          buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
        } // allocate buffer


        buf = new utils.Buf8(buf_len); // convert

        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
          c = str.charCodeAt(m_pos);

          if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);

            if ((c2 & 0xfc00) === 0xdc00) {
              c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
              m_pos++;
            }
          }

          if (c < 0x80) {
            /* one byte */
            buf[i++] = c;
          } else if (c < 0x800) {
            /* two bytes */
            buf[i++] = 0xC0 | c >>> 6;
            buf[i++] = 0x80 | c & 0x3f;
          } else if (c < 0x10000) {
            /* three bytes */
            buf[i++] = 0xE0 | c >>> 12;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
          } else {
            /* four bytes */
            buf[i++] = 0xf0 | c >>> 18;
            buf[i++] = 0x80 | c >>> 12 & 0x3f;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
          }
        }

        return buf;
      }; // Helper (used in 2 places)


      function buf2binstring(buf, len) {
        // use fallback for big arrays to avoid stack overflow
        if (len < 65537) {
          if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {
            return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
          }
        }

        var result = '';

        for (var i = 0; i < len; i++) {
          result += String.fromCharCode(buf[i]);
        }

        return result;
      } // Convert byte array to binary string


      exports.buf2binstring = function (buf) {
        return buf2binstring(buf, buf.length);
      }; // Convert binary string (typed, when possible)


      exports.binstring2buf = function (str) {
        var buf = new utils.Buf8(str.length);

        for (var i = 0, len = buf.length; i < len; i++) {
          buf[i] = str.charCodeAt(i);
        }

        return buf;
      }; // convert array to string


      exports.buf2string = function (buf, max) {
        var i, out, c, c_len;
        var len = max || buf.length; // Reserve max possible length (2 words per char)
        // NB: by unknown reasons, Array is significantly faster for
        //     String.fromCharCode.apply than Uint16Array.

        var utf16buf = new Array(len * 2);

        for (out = 0, i = 0; i < len;) {
          c = buf[i++]; // quick process ascii

          if (c < 0x80) {
            utf16buf[out++] = c;
            continue;
          }

          c_len = _utf8len[c]; // skip 5 & 6 byte codes

          if (c_len > 4) {
            utf16buf[out++] = 0xfffd;
            i += c_len - 1;
            continue;
          } // apply mask on first byte


          c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07; // join the rest

          while (c_len > 1 && i < len) {
            c = c << 6 | buf[i++] & 0x3f;
            c_len--;
          } // terminated by end of string?


          if (c_len > 1) {
            utf16buf[out++] = 0xfffd;
            continue;
          }

          if (c < 0x10000) {
            utf16buf[out++] = c;
          } else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;
            utf16buf[out++] = 0xdc00 | c & 0x3ff;
          }
        }

        return buf2binstring(utf16buf, out);
      }; // Calculate max possible position in utf8 buffer,
      // that will not break sequence. If that's not possible
      // - (very small limits) return max size as is.
      //
      // buf[] - utf8 bytes array
      // max   - length limit (mandatory);


      exports.utf8border = function (buf, max) {
        var pos;
        max = max || buf.length;

        if (max > buf.length) {
          max = buf.length;
        } // go back from last position, until start of sequence found


        pos = max - 1;

        while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {
          pos--;
        } // Fuckup - very small and broken sequence,
        // return max, because we should return something anyway.


        if (pos < 0) {
          return max;
        } // If we came to start of buffer - that means vuffer is too small,
        // return max too.


        if (pos === 0) {
          return max;
        }

        return pos + _utf8len[buf[pos]] > max ? pos : max;
      };
      /***/

    },
    /* 39 */

    /***/
    function (module, exports) {
      'use strict';

      module.exports = {
        /* Allowed flush values; see deflate() and inflate() below for details */
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_TREES: 6,

        /* Return codes for the compression/decompression functions. Negative values
        * are errors, positive values are used for special but normal events.
        */
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        //Z_MEM_ERROR:     -4,
        Z_BUF_ERROR: -5,
        //Z_VERSION_ERROR: -6,

        /* compression levels */
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,

        /* Possible values of the data_type field (though see inflate()) */
        Z_BINARY: 0,
        Z_TEXT: 1,
        //Z_ASCII:                1, // = Z_TEXT (deprecated)
        Z_UNKNOWN: 2,

        /* The deflate compression method */
        Z_DEFLATED: 8 //Z_NULL:                 null // Use -1 or null inline, depending on var type

      };
      /***/
    },
    /* 40 */

    /***/
    function (module, exports) {
      'use strict';

      module.exports = {
        2: 'need dictionary',

        /* Z_NEED_DICT       2  */
        1: 'stream end',

        /* Z_STREAM_END      1  */
        0: '',

        /* Z_OK              0  */
        '-1': 'file error',

        /* Z_ERRNO         (-1) */
        '-2': 'stream error',

        /* Z_STREAM_ERROR  (-2) */
        '-3': 'data error',

        /* Z_DATA_ERROR    (-3) */
        '-4': 'insufficient memory',

        /* Z_MEM_ERROR     (-4) */
        '-5': 'buffer error',

        /* Z_BUF_ERROR     (-5) */
        '-6': 'incompatible version'
        /* Z_VERSION_ERROR (-6) */

      };
      /***/
    },
    /* 41 */

    /***/
    function (module, exports) {
      'use strict';

      function ZStream() {
        /* next input byte */
        this.input = null; // JS specific, because we have no pointers

        this.next_in = 0;
        /* number of bytes available at input */

        this.avail_in = 0;
        /* total number of input bytes read so far */

        this.total_in = 0;
        /* next output byte should be put there */

        this.output = null; // JS specific, because we have no pointers

        this.next_out = 0;
        /* remaining free space at output */

        this.avail_out = 0;
        /* total number of bytes output so far */

        this.total_out = 0;
        /* last error message, NULL if no error */

        this.msg = ''
        /*Z_NULL*/
        ;
        /* not visible by applications */

        this.state = null;
        /* best guess about the data type: binary or text */

        this.data_type = 2
        /*Z_UNKNOWN*/
        ;
        /* adler32 value of the uncompressed data */

        this.adler = 0;
      }

      module.exports = ZStream;
      /***/
    },
    /* 42 */

    /***/
    function (module, exports) {
      'use strict';

      function GZheader() {
        /* true if compressed data believed to be text */
        this.text = 0;
        /* modification time */

        this.time = 0;
        /* extra flags (not used when writing a gzip file) */

        this.xflags = 0;
        /* operating system */

        this.os = 0;
        /* pointer to extra field or Z_NULL if none */

        this.extra = null;
        /* extra field length (valid if extra != Z_NULL) */

        this.extra_len = 0; // Actually, we don't need it in JS,
        // but leave for few code modifications
        //
        // Setup limits is not necessary because in js we should not preallocate memory
        // for inflate use constant limit in 65536 bytes
        //

        /* space at extra (only when reading header) */
        // this.extra_max  = 0;

        /* pointer to zero-terminated file name or Z_NULL */

        this.name = '';
        /* space at name (only when reading header) */
        // this.name_max   = 0;

        /* pointer to zero-terminated comment or Z_NULL */

        this.comment = '';
        /* space at comment (only when reading header) */
        // this.comm_max   = 0;

        /* true if there was or will be a header crc */

        this.hcrc = 0;
        /* true when done reading gzip header (not used when writing a gzip file) */

        this.done = false;
      }

      module.exports = GZheader;
      /***/
    }
    /******/
    ])
  );
});

;
},{"buffer":"node_modules/buffer/index.js","process":"node_modules/process/browser.js"}],"style.css":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

var React = _interopRequireWildcard(require("react"));

var ReactDOM = _interopRequireWildcard(require("react-dom"));

var _App = require("./components/App");

var _browserfs = require("browserfs");

var _tree = require("./tree");

require("./style.css");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function configureFS(config) {
  var options = Object.entries(config).reduce(function (acc, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    return _objectSpread({}, acc, _defineProperty({}, key, {
      fs: "ZipFS",
      options: {
        zipData: Buffer.from(value)
      }
    }));
  }, {});
  return new Promise(function (resolve, reject) {
    (0, _browserfs.configure)({
      fs: "MountableFileSystem",
      options: options
    }, function (e) {
      if (e) {
        return reject(e);
      }

      var fs = (0, _browserfs.BFSRequire)("fs");
      resolve(fs);
    });
  });
}

function fetchZIP(url) {
  return fetch(url).then(function (res) {
    return res.arrayBuffer();
  });
}

Promise.all([fetchZIP("./self.zip")]).then(function (_ref3) {
  var _ref4 = _slicedToArray(_ref3, 1),
      self = _ref4[0];

  return configureFS({
    "/": self
  });
}).then(function (fs) {
  var tree = (0, _tree.directoryTree)(fs, "/");
  ReactDOM.render(React.createElement(_App.App, {
    tree: tree,
    readFile: function readFile(path) {
      return fs.readFileSync(path, "utf-8");
    }
  }), document.querySelector("#app"));
});
},{"react":"node_modules/react/index.js","react-dom":"node_modules/react-dom/index.js","./components/App":"components/App.jsx","browserfs":"node_modules/browserfs/dist/browserfs.js","./tree":"tree.js","./style.css":"style.css","buffer":"node_modules/buffer/index.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "56936" + '/');

  ws.onmessage = function (event) {
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      console.clear();
      data.assets.forEach(function (asset) {
        hmrApply(global.parcelRequire, asset);
      });
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          hmrAccept(global.parcelRequire, asset.id);
        }
      });
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAccept(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAccept(bundle.parent, id);
  }

  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAccept(global.parcelRequire, id);
  });
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=/example.e31bb0bc.map